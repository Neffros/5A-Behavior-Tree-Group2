### YamlMime:ManagedReference
items:
- uid: BehaviorTree.Node
  commentId: T:BehaviorTree.Node
  id: Node
  parent: BehaviorTree
  children:
  - BehaviorTree.Node.Agent
  - BehaviorTree.Node.Attach(BehaviorTree.Node)
  - BehaviorTree.Node.Children
  - BehaviorTree.Node.GetData(System.String)
  - BehaviorTree.Node.GetData``1(System.String)
  - BehaviorTree.Node.GetNode``1
  - BehaviorTree.Node.GetNodes``1
  - BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
  - BehaviorTree.Node.OnInitialize
  - BehaviorTree.Node.OnReset
  - BehaviorTree.Node.OnStart
  - BehaviorTree.Node.OnUpdate
  - BehaviorTree.Node.Parent
  - BehaviorTree.Node.RemoveData(System.String)
  - BehaviorTree.Node.Reset
  - BehaviorTree.Node.Root
  - BehaviorTree.Node.SetData(System.String,System.Object)
  - BehaviorTree.Node.State
  - BehaviorTree.Node.Update
  langs:
  - csharp
  - vb
  name: Node
  nameWithType: Node
  fullName: BehaviorTree.Node
  type: Class
  source:
    id: Node
    path: ''
    startLine: 146
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nNode that is connected to the root, will be evaluated by the agent\n"
  example: []
  syntax:
    content: public abstract class Node
    content.vb: Public MustInherit Class Node
  inheritance:
  - System.Object
  derivedClasses:
  - BehaviorTree.Inverter
  - BehaviorTree.Repeater
  - BehaviorTree.Selector
  - BehaviorTree.Sequence
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: BehaviorTree.Node.Agent
  commentId: P:BehaviorTree.Node.Agent
  id: Agent
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: Agent
  nameWithType: Node.Agent
  fullName: BehaviorTree.Node.Agent
  type: Property
  source:
    id: Agent
    path: ''
    startLine: 153
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nGets the behavior tree agent\n"
  example: []
  syntax:
    content: public BehaviorTreeAgent Agent { get; }
    parameters: []
    return:
      type: BehaviorTree.BehaviorTreeAgent
    content.vb: Public ReadOnly Property Agent As BehaviorTreeAgent
  overload: BehaviorTree.Node.Agent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BehaviorTree.Node.Children
  commentId: P:BehaviorTree.Node.Children
  id: Children
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: Node.Children
  fullName: BehaviorTree.Node.Children
  type: Property
  source:
    id: Children
    path: ''
    startLine: 158
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nChildren node that the node will have\n"
  example: []
  syntax:
    content: public List<Node> Children { get; }
    parameters: []
    return:
      type: List{BehaviorTree.Node}
    content.vb: Public ReadOnly Property Children As List(Of Node)
  overload: BehaviorTree.Node.Children*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BehaviorTree.Node.Parent
  commentId: P:BehaviorTree.Node.Parent
  id: Parent
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: Node.Parent
  fullName: BehaviorTree.Node.Parent
  type: Property
  source:
    id: Parent
    path: ''
    startLine: 163
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nGets the parent of the current node\n"
  example: []
  syntax:
    content: public Node Parent { get; }
    parameters: []
    return:
      type: BehaviorTree.Node
    content.vb: Public ReadOnly Property Parent As Node
  overload: BehaviorTree.Node.Parent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BehaviorTree.Node.Root
  commentId: P:BehaviorTree.Node.Root
  id: Root
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: Node.Root
  fullName: BehaviorTree.Node.Root
  type: Property
  source:
    id: Root
    path: ''
    startLine: 168
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nGets the root of the tree containing the node\n"
  example: []
  syntax:
    content: public Node Root { get; }
    parameters: []
    return:
      type: BehaviorTree.Node
    content.vb: Public ReadOnly Property Root As Node
  overload: BehaviorTree.Node.Root*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BehaviorTree.Node.State
  commentId: P:BehaviorTree.Node.State
  id: State
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: State
  nameWithType: Node.State
  fullName: BehaviorTree.Node.State
  type: Property
  source:
    id: State
    path: ''
    startLine: 173
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nCurrent state of the node\n"
  example: []
  syntax:
    content: public NodeState State { get; }
    parameters: []
    return:
      type: BehaviorTree.NodeState
    content.vb: Public ReadOnly Property State As NodeState
  overload: BehaviorTree.Node.State*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: BehaviorTree.Node.Attach(BehaviorTree.Node)
  commentId: M:BehaviorTree.Node.Attach(BehaviorTree.Node)
  id: Attach(BehaviorTree.Node)
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: Attach(Node)
  nameWithType: Node.Attach(Node)
  fullName: BehaviorTree.Node.Attach(BehaviorTree.Node)
  type: Method
  source:
    id: Attach
    path: ''
    startLine: 193
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nAttach child node to this instance of Node\n"
  example: []
  syntax:
    content: public Node Attach(Node node)
    parameters:
    - id: node
      type: BehaviorTree.Node
      description: Child node to be attached
    return:
      type: BehaviorTree.Node
      description: Return current node for chaining
    content.vb: Public Function Attach(node As Node) As Node
  overload: BehaviorTree.Node.Attach*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BehaviorTree.Node.GetNode``1
  commentId: M:BehaviorTree.Node.GetNode``1
  id: GetNode``1
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: GetNode<T>()
  nameWithType: Node.GetNode<T>()
  fullName: BehaviorTree.Node.GetNode<T>()
  type: Method
  source:
    id: GetNode
    path: ''
    startLine: 205
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nGets the first found node with the given type in the tree of this node\n"
  example: []
  syntax:
    content: >-
      public T GetNode<T>()
          where T : Node
    typeParameters:
    - id: T
      description: Node type to find
    return:
      type: '{T}'
      description: A node with the given type
    content.vb: Public Function GetNode(Of T As Node) As T
  overload: BehaviorTree.Node.GetNode*
  nameWithType.vb: Node.GetNode(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BehaviorTree.Node.GetNode(Of T)()
  name.vb: GetNode(Of T)()
- uid: BehaviorTree.Node.GetNodes``1
  commentId: M:BehaviorTree.Node.GetNodes``1
  id: GetNodes``1
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: GetNodes<T>()
  nameWithType: Node.GetNodes<T>()
  fullName: BehaviorTree.Node.GetNodes<T>()
  type: Method
  source:
    id: GetNodes
    path: ''
    startLine: 229
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nGets nodes by type in the tree of this node\n"
  example: []
  syntax:
    content: >-
      public IEnumerable<T> GetNodes<T>()
          where T : Node
    typeParameters:
    - id: T
      description: Node type to find
    return:
      type: IEnumerable{{T}}
      description: An enumerable of nodes with the given type
    content.vb: Public Function GetNodes(Of T As Node) As IEnumerable(Of T)
  overload: BehaviorTree.Node.GetNodes*
  nameWithType.vb: Node.GetNodes(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: BehaviorTree.Node.GetNodes(Of T)()
  name.vb: GetNodes(Of T)()
- uid: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
  commentId: M:BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
  id: Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: Initialize(BehaviorTreeAgent, Node)
  nameWithType: Node.Initialize(BehaviorTreeAgent, Node)
  fullName: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent, BehaviorTree.Node)
  type: Method
  source:
    id: Initialize
    path: ''
    startLine: 242
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nInitializes the node\n"
  example: []
  syntax:
    content: public void Initialize(BehaviorTreeAgent agent, Node root = null)
    parameters:
    - id: agent
      type: BehaviorTree.BehaviorTreeAgent
    - id: root
      type: BehaviorTree.Node
    content.vb: Public Sub Initialize(agent As BehaviorTreeAgent, root As Node = Nothing)
  overload: BehaviorTree.Node.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BehaviorTree.Node.Update
  commentId: M:BehaviorTree.Node.Update
  id: Update
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: Node.Update()
  fullName: BehaviorTree.Node.Update()
  type: Method
  source:
    id: Update
    path: ''
    startLine: 258
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nUpdates the node\n"
  example: []
  syntax:
    content: public void Update()
    content.vb: Public Sub Update
  overload: BehaviorTree.Node.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BehaviorTree.Node.Reset
  commentId: M:BehaviorTree.Node.Reset
  id: Reset
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: Node.Reset()
  fullName: BehaviorTree.Node.Reset()
  type: Method
  source:
    id: Reset
    path: ''
    startLine: 271
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: BehaviorTree.Node.Reset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BehaviorTree.Node.SetData(System.String,System.Object)
  commentId: M:BehaviorTree.Node.SetData(System.String,System.Object)
  id: SetData(System.String,System.Object)
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: SetData(String, Object)
  nameWithType: Node.SetData(String, Object)
  fullName: BehaviorTree.Node.SetData(System.String, System.Object)
  type: Method
  source:
    id: SetData
    path: ''
    startLine: 288
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nAdds data to the dictionary\n"
  example: []
  syntax:
    content: public void SetData(string key, object value)
    parameters:
    - id: key
      type: System.String
      description: Key to be added
    - id: value
      type: System.Object
      description: Value to be added
    content.vb: Public Sub SetData(key As String, value As Object)
  overload: BehaviorTree.Node.SetData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: BehaviorTree.Node.OnInitialize
  commentId: M:BehaviorTree.Node.OnInitialize
  id: OnInitialize
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: OnInitialize()
  nameWithType: Node.OnInitialize()
  fullName: BehaviorTree.Node.OnInitialize()
  type: Method
  source:
    id: OnInitialize
    path: ''
    startLine: 300
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nFired on tree initialization\n"
  example: []
  syntax:
    content: protected virtual void OnInitialize()
    content.vb: Protected Overridable Sub OnInitialize
  overload: BehaviorTree.Node.OnInitialize*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: BehaviorTree.Node.OnStart
  commentId: M:BehaviorTree.Node.OnStart
  id: OnStart
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: OnStart()
  nameWithType: Node.OnStart()
  fullName: BehaviorTree.Node.OnStart()
  type: Method
  source:
    id: OnStart
    path: ''
    startLine: 306
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nCalled on node update if the status is NotExecuted.\n"
  example: []
  syntax:
    content: protected virtual NodeState OnStart()
    return:
      type: BehaviorTree.NodeState
      description: Returns the new state of this node. Must not be NodeState.NotExecuted.
    content.vb: Protected Overridable Function OnStart As NodeState
  overload: BehaviorTree.Node.OnStart*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: BehaviorTree.Node.OnUpdate
  commentId: M:BehaviorTree.Node.OnUpdate
  id: OnUpdate
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: OnUpdate()
  nameWithType: Node.OnUpdate()
  fullName: BehaviorTree.Node.OnUpdate()
  type: Method
  source:
    id: OnUpdate
    path: ''
    startLine: 315
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nCalled on node update if the status is Running.\n"
  example: []
  syntax:
    content: protected virtual NodeState OnUpdate()
    return:
      type: BehaviorTree.NodeState
      description: Returns the new state of this node. Must not be NodeState.NotExecuted.
    content.vb: Protected Overridable Function OnUpdate As NodeState
  overload: BehaviorTree.Node.OnUpdate*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: BehaviorTree.Node.OnReset
  commentId: M:BehaviorTree.Node.OnReset
  id: OnReset
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: OnReset()
  nameWithType: Node.OnReset()
  fullName: BehaviorTree.Node.OnReset()
  type: Method
  source:
    id: OnReset
    path: ''
    startLine: 323
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nCalled when the node is reset.\n"
  example: []
  syntax:
    content: protected virtual void OnReset()
    content.vb: Protected Overridable Sub OnReset
  overload: BehaviorTree.Node.OnReset*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: BehaviorTree.Node.GetData(System.String)
  commentId: M:BehaviorTree.Node.GetData(System.String)
  id: GetData(System.String)
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: GetData(String)
  nameWithType: Node.GetData(String)
  fullName: BehaviorTree.Node.GetData(System.String)
  type: Method
  source:
    id: GetData
    path: ''
    startLine: 337
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nRetrieve value from dictionary\n"
  example: []
  syntax:
    content: protected object GetData(string key)
    parameters:
    - id: key
      type: System.String
      description: Key used to look for data
    return:
      type: System.Object
      description: Return value of the dictionary according to the key
    content.vb: Protected Function GetData(key As String) As Object
  overload: BehaviorTree.Node.GetData*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: BehaviorTree.Node.GetData``1(System.String)
  commentId: M:BehaviorTree.Node.GetData``1(System.String)
  id: GetData``1(System.String)
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: GetData<T>(String)
  nameWithType: Node.GetData<T>(String)
  fullName: BehaviorTree.Node.GetData<T>(System.String)
  type: Method
  source:
    id: GetData
    path: ''
    startLine: 351
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nRetrieve value from dictionary\n"
  example: []
  syntax:
    content: protected T GetData<T>(string key)
    parameters:
    - id: key
      type: System.String
      description: Key used to look for data
    typeParameters:
    - id: T
      description: Type of the value
    return:
      type: '{T}'
      description: Return value of the dictionary according to the key
    content.vb: Protected Function GetData(Of T)(key As String) As T
  overload: BehaviorTree.Node.GetData*
  nameWithType.vb: Node.GetData(Of T)(String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: BehaviorTree.Node.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
- uid: BehaviorTree.Node.RemoveData(System.String)
  commentId: M:BehaviorTree.Node.RemoveData(System.String)
  id: RemoveData(System.String)
  parent: BehaviorTree.Node
  langs:
  - csharp
  - vb
  name: RemoveData(String)
  nameWithType: Node.RemoveData(String)
  fullName: BehaviorTree.Node.RemoveData(System.String)
  type: Method
  source:
    id: RemoveData
    path: ''
    startLine: 364
  assemblies:
  - cs.temp.dll
  namespace: BehaviorTree
  summary: "\nRemove KeyValuePair from the dictionary\n"
  example: []
  syntax:
    content: protected bool RemoveData(string key)
    parameters:
    - id: key
      type: System.String
      description: Key remove from the dictionary
    return:
      type: System.Boolean
      description: Return true if the removal succeeded, false if not
    content.vb: Protected Function RemoveData(key As String) As Boolean
  overload: BehaviorTree.Node.RemoveData*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: BehaviorTree
  commentId: N:BehaviorTree
  name: BehaviorTree
  nameWithType: BehaviorTree
  fullName: BehaviorTree
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: BehaviorTree.Node.Agent*
  commentId: Overload:BehaviorTree.Node.Agent
  name: Agent
  nameWithType: Node.Agent
  fullName: BehaviorTree.Node.Agent
- uid: BehaviorTree.BehaviorTreeAgent
  commentId: T:BehaviorTree.BehaviorTreeAgent
  parent: BehaviorTree
  name: BehaviorTreeAgent
  nameWithType: BehaviorTreeAgent
  fullName: BehaviorTree.BehaviorTreeAgent
- uid: BehaviorTree.Node.Children*
  commentId: Overload:BehaviorTree.Node.Children
  name: Children
  nameWithType: Node.Children
  fullName: BehaviorTree.Node.Children
- uid: List{BehaviorTree.Node}
  commentId: '!:List{BehaviorTree.Node}'
  definition: List`1
  name: List<Node>
  nameWithType: List<Node>
  fullName: List<BehaviorTree.Node>
  nameWithType.vb: List(Of Node)
  fullName.vb: List(Of BehaviorTree.Node)
  name.vb: List(Of Node)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BehaviorTree.Node
    name: Node
    nameWithType: Node
    fullName: BehaviorTree.Node
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BehaviorTree.Node
    name: Node
    nameWithType: Node
    fullName: BehaviorTree.Node
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  commentId: '!:List`1'
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BehaviorTree.Node.Parent*
  commentId: Overload:BehaviorTree.Node.Parent
  name: Parent
  nameWithType: Node.Parent
  fullName: BehaviorTree.Node.Parent
- uid: BehaviorTree.Node
  commentId: T:BehaviorTree.Node
  parent: BehaviorTree
  name: Node
  nameWithType: Node
  fullName: BehaviorTree.Node
- uid: BehaviorTree.Node.Root*
  commentId: Overload:BehaviorTree.Node.Root
  name: Root
  nameWithType: Node.Root
  fullName: BehaviorTree.Node.Root
- uid: BehaviorTree.Node.State*
  commentId: Overload:BehaviorTree.Node.State
  name: State
  nameWithType: Node.State
  fullName: BehaviorTree.Node.State
- uid: BehaviorTree.NodeState
  commentId: T:BehaviorTree.NodeState
  parent: BehaviorTree
  name: NodeState
  nameWithType: NodeState
  fullName: BehaviorTree.NodeState
- uid: BehaviorTree.Node.Attach*
  commentId: Overload:BehaviorTree.Node.Attach
  name: Attach
  nameWithType: Node.Attach
  fullName: BehaviorTree.Node.Attach
- uid: BehaviorTree.Node.GetNode*
  commentId: Overload:BehaviorTree.Node.GetNode
  name: GetNode
  nameWithType: Node.GetNode
  fullName: BehaviorTree.Node.GetNode
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: BehaviorTree.Node.GetNodes*
  commentId: Overload:BehaviorTree.Node.GetNodes
  name: GetNodes
  nameWithType: Node.GetNodes
  fullName: BehaviorTree.Node.GetNodes
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  commentId: '!:IEnumerable`1'
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BehaviorTree.Node.Initialize*
  commentId: Overload:BehaviorTree.Node.Initialize
  name: Initialize
  nameWithType: Node.Initialize
  fullName: BehaviorTree.Node.Initialize
- uid: BehaviorTree.Node.Update*
  commentId: Overload:BehaviorTree.Node.Update
  name: Update
  nameWithType: Node.Update
  fullName: BehaviorTree.Node.Update
- uid: BehaviorTree.Node.Reset*
  commentId: Overload:BehaviorTree.Node.Reset
  name: Reset
  nameWithType: Node.Reset
  fullName: BehaviorTree.Node.Reset
- uid: BehaviorTree.Node.SetData*
  commentId: Overload:BehaviorTree.Node.SetData
  name: SetData
  nameWithType: Node.SetData
  fullName: BehaviorTree.Node.SetData
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BehaviorTree.Node.OnInitialize*
  commentId: Overload:BehaviorTree.Node.OnInitialize
  name: OnInitialize
  nameWithType: Node.OnInitialize
  fullName: BehaviorTree.Node.OnInitialize
- uid: BehaviorTree.Node.OnStart*
  commentId: Overload:BehaviorTree.Node.OnStart
  name: OnStart
  nameWithType: Node.OnStart
  fullName: BehaviorTree.Node.OnStart
- uid: BehaviorTree.Node.OnUpdate*
  commentId: Overload:BehaviorTree.Node.OnUpdate
  name: OnUpdate
  nameWithType: Node.OnUpdate
  fullName: BehaviorTree.Node.OnUpdate
- uid: BehaviorTree.Node.OnReset*
  commentId: Overload:BehaviorTree.Node.OnReset
  name: OnReset
  nameWithType: Node.OnReset
  fullName: BehaviorTree.Node.OnReset
- uid: BehaviorTree.Node.GetData*
  commentId: Overload:BehaviorTree.Node.GetData
  name: GetData
  nameWithType: Node.GetData
  fullName: BehaviorTree.Node.GetData
- uid: BehaviorTree.Node.RemoveData*
  commentId: Overload:BehaviorTree.Node.RemoveData
  name: RemoveData
  nameWithType: Node.RemoveData
  fullName: BehaviorTree.Node.RemoveData
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
