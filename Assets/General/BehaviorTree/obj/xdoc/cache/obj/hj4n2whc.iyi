id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: BehaviorTree
  commentId: N:BehaviorTree
  language: CSharp
  name:
    CSharp: BehaviorTree
    VB: BehaviorTree
  nameWithType:
    CSharp: BehaviorTree
    VB: BehaviorTree
  qualifiedName:
    CSharp: BehaviorTree
    VB: BehaviorTree
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: BehaviorTree.BehaviorTreeAgent
    commentId: T:BehaviorTree.BehaviorTreeAgent
    language: CSharp
    name:
      CSharp: BehaviorTreeAgent
      VB: BehaviorTreeAgent
    nameWithType:
      CSharp: BehaviorTreeAgent
      VB: BehaviorTreeAgent
    qualifiedName:
      CSharp: BehaviorTree.BehaviorTreeAgent
      VB: BehaviorTree.BehaviorTreeAgent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: BehaviorTreeAgent
      path: ''
      startLine: 12
    summary: "\nMain class for the behavior of the agent\n"
    example: []
    syntax:
      content:
        CSharp: 'public class BehaviorTreeAgent : MonoBehaviour'
        VB: >-
          Public Class BehaviorTreeAgent

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: BehaviorTree.BehaviorTreeAgent.Root
      commentId: P:BehaviorTree.BehaviorTreeAgent.Root
      language: CSharp
      name:
        CSharp: Root
        VB: Root
      nameWithType:
        CSharp: BehaviorTreeAgent.Root
        VB: BehaviorTreeAgent.Root
      qualifiedName:
        CSharp: BehaviorTree.BehaviorTreeAgent.Root
        VB: BehaviorTree.BehaviorTreeAgent.Root
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Root
        path: ''
        startLine: 26
      summary: "\nGets the root node that will contain children node\n"
      example: []
      syntax:
        content:
          CSharp: public Node Root { get; }
          VB: Public ReadOnly Property Root As Node
        parameters: []
        return:
          type: BehaviorTree.Node
      overload: BehaviorTree.BehaviorTreeAgent.Root*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.BehaviorTreeAgent.SetupTree
      commentId: M:BehaviorTree.BehaviorTreeAgent.SetupTree
      language: CSharp
      name:
        CSharp: SetupTree()
        VB: SetupTree()
      nameWithType:
        CSharp: BehaviorTreeAgent.SetupTree()
        VB: BehaviorTreeAgent.SetupTree()
      qualifiedName:
        CSharp: BehaviorTree.BehaviorTreeAgent.SetupTree()
        VB: BehaviorTree.BehaviorTreeAgent.SetupTree()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: SetupTree
        path: ''
        startLine: 73
      summary: "\nSets up nodes for the behavior of the agent\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual Node SetupTree()
          VB: Protected Overridable Function SetupTree As Node
        return:
          type: BehaviorTree.Node
          description: The root node. Must not be null.
      overload: BehaviorTree.BehaviorTreeAgent.SetupTree*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: BehaviorTree.Inverter
    commentId: T:BehaviorTree.Inverter
    language: CSharp
    name:
      CSharp: Inverter
      VB: Inverter
    nameWithType:
      CSharp: Inverter
      VB: Inverter
    qualifiedName:
      CSharp: BehaviorTree.Inverter
      VB: BehaviorTree.Inverter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: Inverter
      path: ''
      startLine: 95
    summary: "\nInverts the result of the child node.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [VisualNode("", "", false, "Custom")]

          public class Inverter : Node
        VB: >-
          <VisualNode("", "", False, "Custom")>

          Public Class Inverter

              Inherits Node
    inheritance:
    - System.Object
    - BehaviorTree.Node
    inheritedMembers:
    - BehaviorTree.Node.Agent
    - BehaviorTree.Node.Children
    - BehaviorTree.Node.Parent
    - BehaviorTree.Node.Root
    - BehaviorTree.Node.State
    - BehaviorTree.Node.Attach(BehaviorTree.Node)
    - BehaviorTree.Node.GetNode``1
    - BehaviorTree.Node.GetNodes``1
    - BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
    - BehaviorTree.Node.Update
    - BehaviorTree.Node.Reset
    - BehaviorTree.Node.SetData(System.String,System.Object)
    - BehaviorTree.Node.OnInitialize
    - BehaviorTree.Node.OnStart
    - BehaviorTree.Node.OnReset
    - BehaviorTree.Node.GetData(System.String)
    - BehaviorTree.Node.GetData``1(System.String)
    - BehaviorTree.Node.RemoveData(System.String)
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: NodeReflection.VisualNodeAttribute
      ctor: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      arguments:
      - type: System.String
        value: ''
      - type: System.String
        value: ''
      - type: System.Boolean
        value: false
      - type: System.String
        value: Custom
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: BehaviorTree.Inverter.OnUpdate
      commentId: M:BehaviorTree.Inverter.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: Inverter.OnUpdate()
        VB: Inverter.OnUpdate()
      qualifiedName:
        CSharp: BehaviorTree.Inverter.OnUpdate()
        VB: BehaviorTree.Inverter.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnUpdate
        path: ''
        startLine: 102
      summary: "\nEvaluate the node\n"
      example: []
      syntax:
        content:
          CSharp: protected override NodeState OnUpdate()
          VB: Protected Overrides Function OnUpdate As NodeState
        return:
          type: BehaviorTree.NodeState
          description: Return SUCCESS if a child node failed, FAILURE if a child node succeeded, or RUNNING
      overload: BehaviorTree.Inverter.OnUpdate*
      overridden: BehaviorTree.Node.OnUpdate
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: BehaviorTree.NodeState
    commentId: T:BehaviorTree.NodeState
    language: CSharp
    name:
      CSharp: NodeState
      VB: NodeState
    nameWithType:
      CSharp: NodeState
      VB: NodeState
    qualifiedName:
      CSharp: BehaviorTree.NodeState
      VB: BehaviorTree.NodeState
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: NodeState
      path: ''
      startLine: 135
    summary: "\nState of the node\n"
    example: []
    syntax:
      content:
        CSharp: public enum NodeState
        VB: Public Enum NodeState
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: BehaviorTree.NodeState.NotExecuted
      commentId: F:BehaviorTree.NodeState.NotExecuted
      language: CSharp
      name:
        CSharp: NotExecuted
        VB: NotExecuted
      nameWithType:
        CSharp: NodeState.NotExecuted
        VB: NodeState.NotExecuted
      qualifiedName:
        CSharp: BehaviorTree.NodeState.NotExecuted
        VB: BehaviorTree.NodeState.NotExecuted
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: NotExecuted
        path: ''
        startLine: 137
      syntax:
        content:
          CSharp: NotExecuted = 0
          VB: NotExecuted = 0
        return:
          type: BehaviorTree.NodeState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: BehaviorTree.NodeState.Running
      commentId: F:BehaviorTree.NodeState.Running
      language: CSharp
      name:
        CSharp: Running
        VB: Running
      nameWithType:
        CSharp: NodeState.Running
        VB: NodeState.Running
      qualifiedName:
        CSharp: BehaviorTree.NodeState.Running
        VB: BehaviorTree.NodeState.Running
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Running
        path: ''
        startLine: 138
      syntax:
        content:
          CSharp: Running = 1
          VB: Running = 1
        return:
          type: BehaviorTree.NodeState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: BehaviorTree.NodeState.Success
      commentId: F:BehaviorTree.NodeState.Success
      language: CSharp
      name:
        CSharp: Success
        VB: Success
      nameWithType:
        CSharp: NodeState.Success
        VB: NodeState.Success
      qualifiedName:
        CSharp: BehaviorTree.NodeState.Success
        VB: BehaviorTree.NodeState.Success
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Success
        path: ''
        startLine: 139
      syntax:
        content:
          CSharp: Success = 2
          VB: Success = 2
        return:
          type: BehaviorTree.NodeState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: BehaviorTree.NodeState.Failure
      commentId: F:BehaviorTree.NodeState.Failure
      language: CSharp
      name:
        CSharp: Failure
        VB: Failure
      nameWithType:
        CSharp: NodeState.Failure
        VB: NodeState.Failure
      qualifiedName:
        CSharp: BehaviorTree.NodeState.Failure
        VB: BehaviorTree.NodeState.Failure
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Failure
        path: ''
        startLine: 140
      syntax:
        content:
          CSharp: Failure = 3
          VB: Failure = 3
        return:
          type: BehaviorTree.NodeState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: BehaviorTree.Node
    commentId: T:BehaviorTree.Node
    language: CSharp
    name:
      CSharp: Node
      VB: Node
    nameWithType:
      CSharp: Node
      VB: Node
    qualifiedName:
      CSharp: BehaviorTree.Node
      VB: BehaviorTree.Node
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: Node
      path: ''
      startLine: 146
    summary: "\nNode that is connected to the root, will be evaluated by the agent\n"
    example: []
    syntax:
      content:
        CSharp: public abstract class Node
        VB: Public MustInherit Class Node
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: BehaviorTree.Node.Agent
      commentId: P:BehaviorTree.Node.Agent
      language: CSharp
      name:
        CSharp: Agent
        VB: Agent
      nameWithType:
        CSharp: Node.Agent
        VB: Node.Agent
      qualifiedName:
        CSharp: BehaviorTree.Node.Agent
        VB: BehaviorTree.Node.Agent
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Agent
        path: ''
        startLine: 153
      summary: "\nGets the behavior tree agent\n"
      example: []
      syntax:
        content:
          CSharp: public BehaviorTreeAgent Agent { get; }
          VB: Public ReadOnly Property Agent As BehaviorTreeAgent
        parameters: []
        return:
          type: BehaviorTree.BehaviorTreeAgent
      overload: BehaviorTree.Node.Agent*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.Node.Children
      commentId: P:BehaviorTree.Node.Children
      language: CSharp
      name:
        CSharp: Children
        VB: Children
      nameWithType:
        CSharp: Node.Children
        VB: Node.Children
      qualifiedName:
        CSharp: BehaviorTree.Node.Children
        VB: BehaviorTree.Node.Children
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Children
        path: ''
        startLine: 158
      summary: "\nChildren node that the node will have\n"
      example: []
      syntax:
        content:
          CSharp: public List<Node> Children { get; }
          VB: Public ReadOnly Property Children As List(Of Node)
        parameters: []
        return:
          type: List{BehaviorTree.Node}
      overload: BehaviorTree.Node.Children*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.Node.Parent
      commentId: P:BehaviorTree.Node.Parent
      language: CSharp
      name:
        CSharp: Parent
        VB: Parent
      nameWithType:
        CSharp: Node.Parent
        VB: Node.Parent
      qualifiedName:
        CSharp: BehaviorTree.Node.Parent
        VB: BehaviorTree.Node.Parent
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Parent
        path: ''
        startLine: 163
      summary: "\nGets the parent of the current node\n"
      example: []
      syntax:
        content:
          CSharp: public Node Parent { get; }
          VB: Public ReadOnly Property Parent As Node
        parameters: []
        return:
          type: BehaviorTree.Node
      overload: BehaviorTree.Node.Parent*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.Node.Root
      commentId: P:BehaviorTree.Node.Root
      language: CSharp
      name:
        CSharp: Root
        VB: Root
      nameWithType:
        CSharp: Node.Root
        VB: Node.Root
      qualifiedName:
        CSharp: BehaviorTree.Node.Root
        VB: BehaviorTree.Node.Root
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Root
        path: ''
        startLine: 168
      summary: "\nGets the root of the tree containing the node\n"
      example: []
      syntax:
        content:
          CSharp: public Node Root { get; }
          VB: Public ReadOnly Property Root As Node
        parameters: []
        return:
          type: BehaviorTree.Node
      overload: BehaviorTree.Node.Root*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.Node.State
      commentId: P:BehaviorTree.Node.State
      language: CSharp
      name:
        CSharp: State
        VB: State
      nameWithType:
        CSharp: Node.State
        VB: Node.State
      qualifiedName:
        CSharp: BehaviorTree.Node.State
        VB: BehaviorTree.Node.State
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: State
        path: ''
        startLine: 173
      summary: "\nCurrent state of the node\n"
      example: []
      syntax:
        content:
          CSharp: public NodeState State { get; }
          VB: Public ReadOnly Property State As NodeState
        parameters: []
        return:
          type: BehaviorTree.NodeState
      overload: BehaviorTree.Node.State*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.Node.Attach(BehaviorTree.Node)
      commentId: M:BehaviorTree.Node.Attach(BehaviorTree.Node)
      language: CSharp
      name:
        CSharp: Attach(Node)
        VB: Attach(Node)
      nameWithType:
        CSharp: Node.Attach(Node)
        VB: Node.Attach(Node)
      qualifiedName:
        CSharp: BehaviorTree.Node.Attach(BehaviorTree.Node)
        VB: BehaviorTree.Node.Attach(BehaviorTree.Node)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Attach
        path: ''
        startLine: 193
      summary: "\nAttach child node to this instance of Node\n"
      example: []
      syntax:
        content:
          CSharp: public Node Attach(Node node)
          VB: Public Function Attach(node As Node) As Node
        parameters:
        - id: node
          type: BehaviorTree.Node
          description: Child node to be attached
        return:
          type: BehaviorTree.Node
          description: Return current node for chaining
      overload: BehaviorTree.Node.Attach*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.GetNode``1
      commentId: M:BehaviorTree.Node.GetNode``1
      language: CSharp
      name:
        CSharp: GetNode<T>()
        VB: GetNode(Of T)()
      nameWithType:
        CSharp: Node.GetNode<T>()
        VB: Node.GetNode(Of T)()
      qualifiedName:
        CSharp: BehaviorTree.Node.GetNode<T>()
        VB: BehaviorTree.Node.GetNode(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: GetNode
        path: ''
        startLine: 205
      summary: "\nGets the first found node with the given type in the tree of this node\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public T GetNode<T>()

                where T : Node
          VB: Public Function GetNode(Of T As Node) As T
        typeParameters:
        - id: T
          description: Node type to find
        return:
          type: '{T}'
          description: A node with the given type
      overload: BehaviorTree.Node.GetNode*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.GetNodes``1
      commentId: M:BehaviorTree.Node.GetNodes``1
      language: CSharp
      name:
        CSharp: GetNodes<T>()
        VB: GetNodes(Of T)()
      nameWithType:
        CSharp: Node.GetNodes<T>()
        VB: Node.GetNodes(Of T)()
      qualifiedName:
        CSharp: BehaviorTree.Node.GetNodes<T>()
        VB: BehaviorTree.Node.GetNodes(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: GetNodes
        path: ''
        startLine: 229
      summary: "\nGets nodes by type in the tree of this node\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public IEnumerable<T> GetNodes<T>()

                where T : Node
          VB: Public Function GetNodes(Of T As Node) As IEnumerable(Of T)
        typeParameters:
        - id: T
          description: Node type to find
        return:
          type: IEnumerable{{T}}
          description: An enumerable of nodes with the given type
      overload: BehaviorTree.Node.GetNodes*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
      commentId: M:BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
      language: CSharp
      name:
        CSharp: Initialize(BehaviorTreeAgent, Node)
        VB: Initialize(BehaviorTreeAgent, Node)
      nameWithType:
        CSharp: Node.Initialize(BehaviorTreeAgent, Node)
        VB: Node.Initialize(BehaviorTreeAgent, Node)
      qualifiedName:
        CSharp: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent, BehaviorTree.Node)
        VB: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent, BehaviorTree.Node)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Initialize
        path: ''
        startLine: 242
      summary: "\nInitializes the node\n"
      example: []
      syntax:
        content:
          CSharp: public void Initialize(BehaviorTreeAgent agent, Node root = null)
          VB: Public Sub Initialize(agent As BehaviorTreeAgent, root As Node = Nothing)
        parameters:
        - id: agent
          type: BehaviorTree.BehaviorTreeAgent
        - id: root
          type: BehaviorTree.Node
      overload: BehaviorTree.Node.Initialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.Update
      commentId: M:BehaviorTree.Node.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: Node.Update()
        VB: Node.Update()
      qualifiedName:
        CSharp: BehaviorTree.Node.Update()
        VB: BehaviorTree.Node.Update()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Update
        path: ''
        startLine: 258
      summary: "\nUpdates the node\n"
      example: []
      syntax:
        content:
          CSharp: public void Update()
          VB: Public Sub Update
      overload: BehaviorTree.Node.Update*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.Reset
      commentId: M:BehaviorTree.Node.Reset
      language: CSharp
      name:
        CSharp: Reset()
        VB: Reset()
      nameWithType:
        CSharp: Node.Reset()
        VB: Node.Reset()
      qualifiedName:
        CSharp: BehaviorTree.Node.Reset()
        VB: BehaviorTree.Node.Reset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Reset
        path: ''
        startLine: 271
      syntax:
        content:
          CSharp: public void Reset()
          VB: Public Sub Reset
      overload: BehaviorTree.Node.Reset*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.SetData(System.String,System.Object)
      commentId: M:BehaviorTree.Node.SetData(System.String,System.Object)
      language: CSharp
      name:
        CSharp: SetData(String, Object)
        VB: SetData(String, Object)
      nameWithType:
        CSharp: Node.SetData(String, Object)
        VB: Node.SetData(String, Object)
      qualifiedName:
        CSharp: BehaviorTree.Node.SetData(System.String, System.Object)
        VB: BehaviorTree.Node.SetData(System.String, System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: SetData
        path: ''
        startLine: 288
      summary: "\nAdds data to the dictionary\n"
      example: []
      syntax:
        content:
          CSharp: public void SetData(string key, object value)
          VB: Public Sub SetData(key As String, value As Object)
        parameters:
        - id: key
          type: System.String
          description: Key to be added
        - id: value
          type: System.Object
          description: Value to be added
      overload: BehaviorTree.Node.SetData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.OnInitialize
      commentId: M:BehaviorTree.Node.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: Node.OnInitialize()
        VB: Node.OnInitialize()
      qualifiedName:
        CSharp: BehaviorTree.Node.OnInitialize()
        VB: BehaviorTree.Node.OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnInitialize
        path: ''
        startLine: 300
      summary: "\nFired on tree initialization\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnInitialize()
          VB: Protected Overridable Sub OnInitialize
      overload: BehaviorTree.Node.OnInitialize*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: BehaviorTree.Node.OnStart
      commentId: M:BehaviorTree.Node.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: Node.OnStart()
        VB: Node.OnStart()
      qualifiedName:
        CSharp: BehaviorTree.Node.OnStart()
        VB: BehaviorTree.Node.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnStart
        path: ''
        startLine: 306
      summary: "\nCalled on node update if the status is NotExecuted.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual NodeState OnStart()
          VB: Protected Overridable Function OnStart As NodeState
        return:
          type: BehaviorTree.NodeState
          description: Returns the new state of this node. Must not be NodeState.NotExecuted.
      overload: BehaviorTree.Node.OnStart*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: BehaviorTree.Node.OnUpdate
      commentId: M:BehaviorTree.Node.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: Node.OnUpdate()
        VB: Node.OnUpdate()
      qualifiedName:
        CSharp: BehaviorTree.Node.OnUpdate()
        VB: BehaviorTree.Node.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnUpdate
        path: ''
        startLine: 315
      summary: "\nCalled on node update if the status is Running.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual NodeState OnUpdate()
          VB: Protected Overridable Function OnUpdate As NodeState
        return:
          type: BehaviorTree.NodeState
          description: Returns the new state of this node. Must not be NodeState.NotExecuted.
      overload: BehaviorTree.Node.OnUpdate*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: BehaviorTree.Node.OnReset
      commentId: M:BehaviorTree.Node.OnReset
      language: CSharp
      name:
        CSharp: OnReset()
        VB: OnReset()
      nameWithType:
        CSharp: Node.OnReset()
        VB: Node.OnReset()
      qualifiedName:
        CSharp: BehaviorTree.Node.OnReset()
        VB: BehaviorTree.Node.OnReset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnReset
        path: ''
        startLine: 323
      summary: "\nCalled when the node is reset.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnReset()
          VB: Protected Overridable Sub OnReset
      overload: BehaviorTree.Node.OnReset*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: BehaviorTree.Node.GetData(System.String)
      commentId: M:BehaviorTree.Node.GetData(System.String)
      language: CSharp
      name:
        CSharp: GetData(String)
        VB: GetData(String)
      nameWithType:
        CSharp: Node.GetData(String)
        VB: Node.GetData(String)
      qualifiedName:
        CSharp: BehaviorTree.Node.GetData(System.String)
        VB: BehaviorTree.Node.GetData(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: GetData
        path: ''
        startLine: 337
      summary: "\nRetrieve value from dictionary\n"
      example: []
      syntax:
        content:
          CSharp: protected object GetData(string key)
          VB: Protected Function GetData(key As String) As Object
        parameters:
        - id: key
          type: System.String
          description: Key used to look for data
        return:
          type: System.Object
          description: Return value of the dictionary according to the key
      overload: BehaviorTree.Node.GetData*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: BehaviorTree.Node.GetData``1(System.String)
      commentId: M:BehaviorTree.Node.GetData``1(System.String)
      language: CSharp
      name:
        CSharp: GetData<T>(String)
        VB: GetData(Of T)(String)
      nameWithType:
        CSharp: Node.GetData<T>(String)
        VB: Node.GetData(Of T)(String)
      qualifiedName:
        CSharp: BehaviorTree.Node.GetData<T>(System.String)
        VB: BehaviorTree.Node.GetData(Of T)(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: GetData
        path: ''
        startLine: 351
      summary: "\nRetrieve value from dictionary\n"
      example: []
      syntax:
        content:
          CSharp: protected T GetData<T>(string key)
          VB: Protected Function GetData(Of T)(key As String) As T
        parameters:
        - id: key
          type: System.String
          description: Key used to look for data
        typeParameters:
        - id: T
          description: Type of the value
        return:
          type: '{T}'
          description: Return value of the dictionary according to the key
      overload: BehaviorTree.Node.GetData*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: BehaviorTree.Node.RemoveData(System.String)
      commentId: M:BehaviorTree.Node.RemoveData(System.String)
      language: CSharp
      name:
        CSharp: RemoveData(String)
        VB: RemoveData(String)
      nameWithType:
        CSharp: Node.RemoveData(String)
        VB: Node.RemoveData(String)
      qualifiedName:
        CSharp: BehaviorTree.Node.RemoveData(System.String)
        VB: BehaviorTree.Node.RemoveData(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: RemoveData
        path: ''
        startLine: 364
      summary: "\nRemove KeyValuePair from the dictionary\n"
      example: []
      syntax:
        content:
          CSharp: protected bool RemoveData(string key)
          VB: Protected Function RemoveData(key As String) As Boolean
        parameters:
        - id: key
          type: System.String
          description: Key remove from the dictionary
        return:
          type: System.Boolean
          description: Return true if the removal succeeded, false if not
      overload: BehaviorTree.Node.RemoveData*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
  - id: BehaviorTree.RepeatMode
    commentId: T:BehaviorTree.RepeatMode
    language: CSharp
    name:
      CSharp: RepeatMode
      VB: RepeatMode
    nameWithType:
      CSharp: RepeatMode
      VB: RepeatMode
    qualifiedName:
      CSharp: BehaviorTree.RepeatMode
      VB: BehaviorTree.RepeatMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: RepeatMode
      path: ''
      startLine: 395
    summary: "\nRepeat mode\n"
    example: []
    syntax:
      content:
        CSharp: public enum RepeatMode
        VB: Public Enum RepeatMode
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: BehaviorTree.RepeatMode.RepeatIfSuccess
      commentId: F:BehaviorTree.RepeatMode.RepeatIfSuccess
      language: CSharp
      name:
        CSharp: RepeatIfSuccess
        VB: RepeatIfSuccess
      nameWithType:
        CSharp: RepeatMode.RepeatIfSuccess
        VB: RepeatMode.RepeatIfSuccess
      qualifiedName:
        CSharp: BehaviorTree.RepeatMode.RepeatIfSuccess
        VB: BehaviorTree.RepeatMode.RepeatIfSuccess
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: RepeatIfSuccess
        path: ''
        startLine: 397
      syntax:
        content:
          CSharp: RepeatIfSuccess = 0
          VB: RepeatIfSuccess = 0
        return:
          type: BehaviorTree.RepeatMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: BehaviorTree.RepeatMode.RepeatIfFailure
      commentId: F:BehaviorTree.RepeatMode.RepeatIfFailure
      language: CSharp
      name:
        CSharp: RepeatIfFailure
        VB: RepeatIfFailure
      nameWithType:
        CSharp: RepeatMode.RepeatIfFailure
        VB: RepeatMode.RepeatIfFailure
      qualifiedName:
        CSharp: BehaviorTree.RepeatMode.RepeatIfFailure
        VB: BehaviorTree.RepeatMode.RepeatIfFailure
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: RepeatIfFailure
        path: ''
        startLine: 398
      syntax:
        content:
          CSharp: RepeatIfFailure = 1
          VB: RepeatIfFailure = 1
        return:
          type: BehaviorTree.RepeatMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: BehaviorTree.Repeater
    commentId: T:BehaviorTree.Repeater
    language: CSharp
    name:
      CSharp: Repeater
      VB: Repeater
    nameWithType:
      CSharp: Repeater
      VB: Repeater
    qualifiedName:
      CSharp: BehaviorTree.Repeater
      VB: BehaviorTree.Repeater
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: Repeater
      path: ''
      startLine: 404
    summary: "\nRepeats the child while its state does not match the RepeatMode\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [VisualNode("", "", false, "Custom")]

          public class Repeater : Node
        VB: >-
          <VisualNode("", "", False, "Custom")>

          Public Class Repeater

              Inherits Node
    inheritance:
    - System.Object
    - BehaviorTree.Node
    inheritedMembers:
    - BehaviorTree.Node.Agent
    - BehaviorTree.Node.Children
    - BehaviorTree.Node.Parent
    - BehaviorTree.Node.Root
    - BehaviorTree.Node.State
    - BehaviorTree.Node.Attach(BehaviorTree.Node)
    - BehaviorTree.Node.GetNode``1
    - BehaviorTree.Node.GetNodes``1
    - BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
    - BehaviorTree.Node.Update
    - BehaviorTree.Node.Reset
    - BehaviorTree.Node.SetData(System.String,System.Object)
    - BehaviorTree.Node.OnInitialize
    - BehaviorTree.Node.OnStart
    - BehaviorTree.Node.OnReset
    - BehaviorTree.Node.GetData(System.String)
    - BehaviorTree.Node.GetData``1(System.String)
    - BehaviorTree.Node.RemoveData(System.String)
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: NodeReflection.VisualNodeAttribute
      ctor: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      arguments:
      - type: System.String
        value: ''
      - type: System.String
        value: ''
      - type: System.Boolean
        value: false
      - type: System.String
        value: Custom
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: BehaviorTree.Repeater.RepeatMode
      commentId: P:BehaviorTree.Repeater.RepeatMode
      language: CSharp
      name:
        CSharp: RepeatMode
        VB: RepeatMode
      nameWithType:
        CSharp: Repeater.RepeatMode
        VB: Repeater.RepeatMode
      qualifiedName:
        CSharp: BehaviorTree.Repeater.RepeatMode
        VB: BehaviorTree.Repeater.RepeatMode
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: RepeatMode
        path: ''
        startLine: 410
      summary: "\nRepeat mode\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [ExposedInVisualEditor("", RepeatMode.RepeatIfSuccess)]

            public RepeatMode RepeatMode { get; set; }
          VB: >-
            <ExposedInVisualEditor("", RepeatMode.RepeatIfSuccess)>

            Public Property RepeatMode As RepeatMode
        parameters: []
        return:
          type: BehaviorTree.RepeatMode
      overload: BehaviorTree.Repeater.RepeatMode*
      attributes:
      - type: NodeReflection.ExposedInVisualEditorAttribute
        ctor: NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
        arguments:
        - type: System.String
          value: ''
        - type: BehaviorTree.RepeatMode
          value: 0
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: BehaviorTree.Repeater.OnUpdate
      commentId: M:BehaviorTree.Repeater.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: Repeater.OnUpdate()
        VB: Repeater.OnUpdate()
      qualifiedName:
        CSharp: BehaviorTree.Repeater.OnUpdate()
        VB: BehaviorTree.Repeater.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnUpdate
        path: ''
        startLine: 423
      summary: "\nEvaluates the node\n"
      example: []
      syntax:
        content:
          CSharp: protected override NodeState OnUpdate()
          VB: Protected Overrides Function OnUpdate As NodeState
        return:
          type: BehaviorTree.NodeState
          description: "\nIf RepeatMode is RepeatIfSuccess:\nReturn Success if the child state is Success, Running otherwise.\nIf RepeatMode is RepeatIfFailure:\nReturn Failure if the child state is Failure, Running otherwise.\n"
      overload: BehaviorTree.Repeater.OnUpdate*
      overridden: BehaviorTree.Node.OnUpdate
      exceptions:
      - type: System.InvalidOperationException
        commentId: T:System.InvalidOperationException
        description: If the repeater does not have exactly one child.
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: BehaviorTree.Selector
    commentId: T:BehaviorTree.Selector
    language: CSharp
    name:
      CSharp: Selector
      VB: Selector
    nameWithType:
      CSharp: Selector
      VB: Selector
    qualifiedName:
      CSharp: BehaviorTree.Selector
      VB: BehaviorTree.Selector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: Selector
      path: ''
      startLine: 471
    summary: "\nSelector nodes contain one or more children. Upon execution, it executes every child until one of them succeeds, otherwise it fails\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [VisualNode("", "", false, "Custom")]

          public class Selector : Node
        VB: >-
          <VisualNode("", "", False, "Custom")>

          Public Class Selector

              Inherits Node
    inheritance:
    - System.Object
    - BehaviorTree.Node
    inheritedMembers:
    - BehaviorTree.Node.Agent
    - BehaviorTree.Node.Children
    - BehaviorTree.Node.Parent
    - BehaviorTree.Node.Root
    - BehaviorTree.Node.State
    - BehaviorTree.Node.Attach(BehaviorTree.Node)
    - BehaviorTree.Node.GetNode``1
    - BehaviorTree.Node.GetNodes``1
    - BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
    - BehaviorTree.Node.Update
    - BehaviorTree.Node.Reset
    - BehaviorTree.Node.SetData(System.String,System.Object)
    - BehaviorTree.Node.OnInitialize
    - BehaviorTree.Node.OnStart
    - BehaviorTree.Node.OnReset
    - BehaviorTree.Node.GetData(System.String)
    - BehaviorTree.Node.GetData``1(System.String)
    - BehaviorTree.Node.RemoveData(System.String)
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: NodeReflection.VisualNodeAttribute
      ctor: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      arguments:
      - type: System.String
        value: ''
      - type: System.String
        value: ''
      - type: System.Boolean
        value: false
      - type: System.String
        value: Custom
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: BehaviorTree.Selector.OnUpdate
      commentId: M:BehaviorTree.Selector.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: Selector.OnUpdate()
        VB: Selector.OnUpdate()
      qualifiedName:
        CSharp: BehaviorTree.Selector.OnUpdate()
        VB: BehaviorTree.Selector.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnUpdate
        path: ''
        startLine: 478
      summary: "\nEvaluate the node\n"
      example: []
      syntax:
        content:
          CSharp: protected override NodeState OnUpdate()
          VB: Protected Overrides Function OnUpdate As NodeState
        return:
          type: BehaviorTree.NodeState
          description: 'Return SUCCESS if a child node succeeded, RUNNING if a child node is running, or FAILURE after every evaluated children '
      overload: BehaviorTree.Selector.OnUpdate*
      overridden: BehaviorTree.Node.OnUpdate
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: BehaviorTree.Sequence
    commentId: T:BehaviorTree.Sequence
    language: CSharp
    name:
      CSharp: Sequence
      VB: Sequence
    nameWithType:
      CSharp: Sequence
      VB: Sequence
    qualifiedName:
      CSharp: BehaviorTree.Sequence
      VB: BehaviorTree.Sequence
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: Sequence
      path: ''
      startLine: 513
    summary: "\nSequence nodes contain one or more children. Upon execution, it executes every child and fails when one of the children fails.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [VisualNode("", "", true, "Custom")]

          public class Sequence : Node
        VB: >-
          <VisualNode("", "", True, "Custom")>

          Public Class Sequence

              Inherits Node
    inheritance:
    - System.Object
    - BehaviorTree.Node
    inheritedMembers:
    - BehaviorTree.Node.Agent
    - BehaviorTree.Node.Children
    - BehaviorTree.Node.Parent
    - BehaviorTree.Node.Root
    - BehaviorTree.Node.State
    - BehaviorTree.Node.Attach(BehaviorTree.Node)
    - BehaviorTree.Node.GetNode``1
    - BehaviorTree.Node.GetNodes``1
    - BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
    - BehaviorTree.Node.Update
    - BehaviorTree.Node.Reset
    - BehaviorTree.Node.SetData(System.String,System.Object)
    - BehaviorTree.Node.OnInitialize
    - BehaviorTree.Node.OnStart
    - BehaviorTree.Node.OnReset
    - BehaviorTree.Node.GetData(System.String)
    - BehaviorTree.Node.GetData``1(System.String)
    - BehaviorTree.Node.RemoveData(System.String)
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: NodeReflection.VisualNodeAttribute
      ctor: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      arguments:
      - type: System.String
        value: ''
      - type: System.String
        value: ''
      - type: System.Boolean
        value: true
      - type: System.String
        value: Custom
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: BehaviorTree.Sequence.OnUpdate
      commentId: M:BehaviorTree.Sequence.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: Sequence.OnUpdate()
        VB: Sequence.OnUpdate()
      qualifiedName:
        CSharp: BehaviorTree.Sequence.OnUpdate()
        VB: BehaviorTree.Sequence.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnUpdate
        path: ''
        startLine: 520
      summary: "\nEvaluate the node\n"
      example: []
      syntax:
        content:
          CSharp: protected override NodeState OnUpdate()
          VB: Protected Overrides Function OnUpdate As NodeState
        return:
          type: BehaviorTree.NodeState
          description: 'Return FAILURE if a child node failed, RUNNING if a child is running after every evaluated node, SUCCESS if none of the child is running or failing '
      overload: BehaviorTree.Sequence.OnUpdate*
      overridden: BehaviorTree.Node.OnUpdate
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
- id: NodeReflection
  commentId: N:NodeReflection
  language: CSharp
  name:
    CSharp: NodeReflection
    VB: NodeReflection
  nameWithType:
    CSharp: NodeReflection
    VB: NodeReflection
  qualifiedName:
    CSharp: NodeReflection
    VB: NodeReflection
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NodeReflection.ExposedInVisualEditorAttribute
    commentId: T:NodeReflection.ExposedInVisualEditorAttribute
    language: CSharp
    name:
      CSharp: ExposedInVisualEditorAttribute
      VB: ExposedInVisualEditorAttribute
    nameWithType:
      CSharp: ExposedInVisualEditorAttribute
      VB: ExposedInVisualEditorAttribute
    qualifiedName:
      CSharp: NodeReflection.ExposedInVisualEditorAttribute
      VB: NodeReflection.ExposedInVisualEditorAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NodeReflection
    source:
      id: ExposedInVisualEditorAttribute
      path: ''
      startLine: 554
    summary: "\nCustom attribute for node&apos;s properties\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Property)]

          public class ExposedInVisualEditorAttribute : Attribute, _Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Property)>

          Public Class ExposedInVisualEditorAttribute

              Inherits Attribute

              Implements _Attribute
    inheritance:
    - System.Object
    - System.Attribute
    implements:
    - System.Runtime.InteropServices._Attribute
    inheritedMembers:
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetHashCode
    - System.Attribute.Match(System.Object)
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    - System.Attribute.TypeId
    - System.Object.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 128
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
      commentId: P:NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
      language: CSharp
      name:
        CSharp: DefaultValue
        VB: DefaultValue
      nameWithType:
        CSharp: ExposedInVisualEditorAttribute.DefaultValue
        VB: ExposedInVisualEditorAttribute.DefaultValue
      qualifiedName:
        CSharp: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
        VB: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: DefaultValue
        path: ''
        startLine: 563
      summary: "\nGets the default value of the property\n"
      example: []
      syntax:
        content:
          CSharp: public object DefaultValue { get; }
          VB: Public ReadOnly Property DefaultValue As Object
        parameters: []
        return:
          type: System.Object
      overload: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.ExposedInVisualEditorAttribute.Name
      commentId: P:NodeReflection.ExposedInVisualEditorAttribute.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: ExposedInVisualEditorAttribute.Name
        VB: ExposedInVisualEditorAttribute.Name
      qualifiedName:
        CSharp: NodeReflection.ExposedInVisualEditorAttribute.Name
        VB: NodeReflection.ExposedInVisualEditorAttribute.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: Name
        path: ''
        startLine: 568
      summary: "\nGets the name of the node\n"
      example: []
      syntax:
        content:
          CSharp: public string Name { get; }
          VB: Public ReadOnly Property Name As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.ExposedInVisualEditorAttribute.Name*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
      commentId: M:NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
      language: CSharp
      name:
        CSharp: ExposedInVisualEditorAttribute(String, Object)
        VB: ExposedInVisualEditorAttribute(String, Object)
      nameWithType:
        CSharp: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute(String, Object)
        VB: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute(String, Object)
      qualifiedName:
        CSharp: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute(System.String, System.Object)
        VB: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute(System.String, System.Object)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: .ctor
        path: ''
        startLine: 578
      summary: "\nClass constructor\n"
      example: []
      syntax:
        content:
          CSharp: public ExposedInVisualEditorAttribute(string name = "", object defaultValue = null)
          VB: Public Sub New(name As String = "", defaultValue As Object = Nothing)
        parameters:
        - id: name
          type: System.String
          description: Property name, for display purposes
        - id: defaultValue
          type: System.Object
      overload: NodeReflection.ExposedInVisualEditorAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: NodeReflection.VisualNodeAttribute
    commentId: T:NodeReflection.VisualNodeAttribute
    language: CSharp
    name:
      CSharp: VisualNodeAttribute
      VB: VisualNodeAttribute
    nameWithType:
      CSharp: VisualNodeAttribute
      VB: VisualNodeAttribute
    qualifiedName:
      CSharp: NodeReflection.VisualNodeAttribute
      VB: NodeReflection.VisualNodeAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NodeReflection
    source:
      id: VisualNodeAttribute
      path: ''
      startLine: 595
    summary: "\nCustom attribute for custom node\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]

          public class VisualNodeAttribute : Attribute, _Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Class Or AttributeTargets.Struct)>

          Public Class VisualNodeAttribute

              Inherits Attribute

              Implements _Attribute
    inheritance:
    - System.Object
    - System.Attribute
    implements:
    - System.Runtime.InteropServices._Attribute
    inheritedMembers:
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetHashCode
    - System.Attribute.Match(System.Object)
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    - System.Attribute.TypeId
    - System.Object.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 12
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: NodeReflection.VisualNodeAttribute.Description
      commentId: P:NodeReflection.VisualNodeAttribute.Description
      language: CSharp
      name:
        CSharp: Description
        VB: Description
      nameWithType:
        CSharp: VisualNodeAttribute.Description
        VB: VisualNodeAttribute.Description
      qualifiedName:
        CSharp: NodeReflection.VisualNodeAttribute.Description
        VB: NodeReflection.VisualNodeAttribute.Description
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: Description
        path: ''
        startLine: 604
      summary: "\nGets the description of the node\n"
      example: []
      syntax:
        content:
          CSharp: public string Description { get; }
          VB: Public ReadOnly Property Description As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.VisualNodeAttribute.Description*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.VisualNodeAttribute.DisplayAsBlock
      commentId: P:NodeReflection.VisualNodeAttribute.DisplayAsBlock
      language: CSharp
      name:
        CSharp: DisplayAsBlock
        VB: DisplayAsBlock
      nameWithType:
        CSharp: VisualNodeAttribute.DisplayAsBlock
        VB: VisualNodeAttribute.DisplayAsBlock
      qualifiedName:
        CSharp: NodeReflection.VisualNodeAttribute.DisplayAsBlock
        VB: NodeReflection.VisualNodeAttribute.DisplayAsBlock
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: DisplayAsBlock
        path: ''
        startLine: 609
      summary: "\nGets if the children should be displayed as a block\n"
      example: []
      syntax:
        content:
          CSharp: public bool DisplayAsBlock { get; }
          VB: Public ReadOnly Property DisplayAsBlock As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: NodeReflection.VisualNodeAttribute.DisplayAsBlock*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.VisualNodeAttribute.Name
      commentId: P:NodeReflection.VisualNodeAttribute.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: VisualNodeAttribute.Name
        VB: VisualNodeAttribute.Name
      qualifiedName:
        CSharp: NodeReflection.VisualNodeAttribute.Name
        VB: NodeReflection.VisualNodeAttribute.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: Name
        path: ''
        startLine: 614
      summary: "\nGets the name of the node\n"
      example: []
      syntax:
        content:
          CSharp: public string Name { get; }
          VB: Public ReadOnly Property Name As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.VisualNodeAttribute.Name*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.VisualNodeAttribute.Path
      commentId: P:NodeReflection.VisualNodeAttribute.Path
      language: CSharp
      name:
        CSharp: Path
        VB: Path
      nameWithType:
        CSharp: VisualNodeAttribute.Path
        VB: VisualNodeAttribute.Path
      qualifiedName:
        CSharp: NodeReflection.VisualNodeAttribute.Path
        VB: NodeReflection.VisualNodeAttribute.Path
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: Path
        path: ''
        startLine: 619
      summary: "\nGets the path of the node category\n"
      example: []
      syntax:
        content:
          CSharp: public string Path { get; }
          VB: Public ReadOnly Property Path As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.VisualNodeAttribute.Path*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      commentId: M:NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      language: CSharp
      name:
        CSharp: VisualNodeAttribute(String, String, Boolean, String)
        VB: VisualNodeAttribute(String, String, Boolean, String)
      nameWithType:
        CSharp: VisualNodeAttribute.VisualNodeAttribute(String, String, Boolean, String)
        VB: VisualNodeAttribute.VisualNodeAttribute(String, String, Boolean, String)
      qualifiedName:
        CSharp: NodeReflection.VisualNodeAttribute.VisualNodeAttribute(System.String, System.String, System.Boolean, System.String)
        VB: NodeReflection.VisualNodeAttribute.VisualNodeAttribute(System.String, System.String, System.Boolean, System.String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: .ctor
        path: ''
        startLine: 632
      summary: "\nClass constructor\n"
      example: []
      syntax:
        content:
          CSharp: public VisualNodeAttribute(string name = "", string description = "", bool displayAsBlock = false, string path = "Custom")
          VB: Public Sub New(name As String = "", description As String = "", displayAsBlock As Boolean = False, path As String = "Custom")
        parameters:
        - id: name
          type: System.String
          description: Node name, for display purposes
        - id: description
          type: System.String
          description: Node description
        - id: displayAsBlock
          type: System.Boolean
          description: Indicates if the children should be displayed as a block
        - id: path
          type: System.String
          description: Path of the node in the editor
      overload: NodeReflection.VisualNodeAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: VisualEditor.Editor
  commentId: N:VisualEditor.Editor
  language: CSharp
  name:
    CSharp: VisualEditor.Editor
    VB: VisualEditor.Editor
  nameWithType:
    CSharp: VisualEditor.Editor
    VB: VisualEditor.Editor
  qualifiedName:
    CSharp: VisualEditor.Editor
    VB: VisualEditor.Editor
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: VisualEditor.Editor.BehaviourTreeEditorGraphView
    commentId: T:VisualEditor.Editor.BehaviourTreeEditorGraphView
    language: CSharp
    name:
      CSharp: BehaviourTreeEditorGraphView
      VB: BehaviourTreeEditorGraphView
    nameWithType:
      CSharp: BehaviourTreeEditorGraphView
      VB: BehaviourTreeEditorGraphView
    qualifiedName:
      CSharp: VisualEditor.Editor.BehaviourTreeEditorGraphView
      VB: VisualEditor.Editor.BehaviourTreeEditorGraphView
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: VisualEditor.Editor
    source:
      id: BehaviourTreeEditorGraphView
      path: ''
      startLine: 656
    syntax:
      content:
        CSharp: 'public class BehaviourTreeEditorGraphView : GraphView'
        VB: >-
          Public Class BehaviourTreeEditorGraphView

              Inherits GraphView
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.OnNodeSelected
      commentId: F:VisualEditor.Editor.BehaviourTreeEditorGraphView.OnNodeSelected
      language: CSharp
      name:
        CSharp: OnNodeSelected
        VB: OnNodeSelected
      nameWithType:
        CSharp: BehaviourTreeEditorGraphView.OnNodeSelected
        VB: BehaviourTreeEditorGraphView.OnNodeSelected
      qualifiedName:
        CSharp: VisualEditor.Editor.BehaviourTreeEditorGraphView.OnNodeSelected
        VB: VisualEditor.Editor.BehaviourTreeEditorGraphView.OnNodeSelected
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: OnNodeSelected
        path: ''
        startLine: 661
      syntax:
        content:
          CSharp: public Action<NodeView> OnNodeSelected
          VB: Public OnNodeSelected As Action(Of NodeView)
        return:
          type: System.Action{VisualEditor.Editor.NodeView}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.#ctor
      commentId: M:VisualEditor.Editor.BehaviourTreeEditorGraphView.#ctor
      language: CSharp
      name:
        CSharp: BehaviourTreeEditorGraphView()
        VB: BehaviourTreeEditorGraphView()
      nameWithType:
        CSharp: BehaviourTreeEditorGraphView.BehaviourTreeEditorGraphView()
        VB: BehaviourTreeEditorGraphView.BehaviourTreeEditorGraphView()
      qualifiedName:
        CSharp: VisualEditor.Editor.BehaviourTreeEditorGraphView.BehaviourTreeEditorGraphView()
        VB: VisualEditor.Editor.BehaviourTreeEditorGraphView.BehaviourTreeEditorGraphView()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: .ctor
        path: ''
        startLine: 663
      syntax:
        content:
          CSharp: public BehaviourTreeEditorGraphView()
          VB: Public Sub New
      overload: VisualEditor.Editor.BehaviourTreeEditorGraphView.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.PopulateView(BehaviorTreeObject)
      commentId: M:VisualEditor.Editor.BehaviourTreeEditorGraphView.PopulateView(BehaviorTreeObject)
      language: CSharp
      name:
        CSharp: PopulateView(BehaviorTreeObject)
        VB: PopulateView(BehaviorTreeObject)
      nameWithType:
        CSharp: BehaviourTreeEditorGraphView.PopulateView(BehaviorTreeObject)
        VB: BehaviourTreeEditorGraphView.PopulateView(BehaviorTreeObject)
      qualifiedName:
        CSharp: VisualEditor.Editor.BehaviourTreeEditorGraphView.PopulateView(BehaviorTreeObject)
        VB: VisualEditor.Editor.BehaviourTreeEditorGraphView.PopulateView(BehaviorTreeObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: PopulateView
        path: ''
        startLine: 685
      summary: "\nPopulates graph view when the visual editor is loaded\n"
      example: []
      syntax:
        content:
          CSharp: public void PopulateView(BehaviorTreeObject behaviorTreeObject)
          VB: Public Sub PopulateView(behaviorTreeObject As BehaviorTreeObject)
        parameters:
        - id: behaviorTreeObject
          type: BehaviorTreeObject
      overload: VisualEditor.Editor.BehaviourTreeEditorGraphView.PopulateView*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.GetCompatiblePorts(Port,NodeAdapter)
      commentId: M:VisualEditor.Editor.BehaviourTreeEditorGraphView.GetCompatiblePorts(Port,NodeAdapter)
      language: CSharp
      name:
        CSharp: GetCompatiblePorts(Port, NodeAdapter)
        VB: GetCompatiblePorts(Port, NodeAdapter)
      nameWithType:
        CSharp: BehaviourTreeEditorGraphView.GetCompatiblePorts(Port, NodeAdapter)
        VB: BehaviourTreeEditorGraphView.GetCompatiblePorts(Port, NodeAdapter)
      qualifiedName:
        CSharp: VisualEditor.Editor.BehaviourTreeEditorGraphView.GetCompatiblePorts(Port, NodeAdapter)
        VB: VisualEditor.Editor.BehaviourTreeEditorGraphView.GetCompatiblePorts(Port, NodeAdapter)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: GetCompatiblePorts
        path: ''
        startLine: 712
      syntax:
        content:
          CSharp: public override List<Port> GetCompatiblePorts(Port startPort, NodeAdapter nodeAdapter)
          VB: Public Overrides Function GetCompatiblePorts(startPort As Port, nodeAdapter As NodeAdapter) As List(Of Port)
        parameters:
        - id: startPort
          type: Port
        - id: nodeAdapter
          type: NodeAdapter
        return:
          type: List{Port}
      overload: VisualEditor.Editor.BehaviourTreeEditorGraphView.GetCompatiblePorts*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.BuildContextualMenu(ContextualMenuPopulateEvent)
      commentId: M:VisualEditor.Editor.BehaviourTreeEditorGraphView.BuildContextualMenu(ContextualMenuPopulateEvent)
      language: CSharp
      name:
        CSharp: BuildContextualMenu(ContextualMenuPopulateEvent)
        VB: BuildContextualMenu(ContextualMenuPopulateEvent)
      nameWithType:
        CSharp: BehaviourTreeEditorGraphView.BuildContextualMenu(ContextualMenuPopulateEvent)
        VB: BehaviourTreeEditorGraphView.BuildContextualMenu(ContextualMenuPopulateEvent)
      qualifiedName:
        CSharp: VisualEditor.Editor.BehaviourTreeEditorGraphView.BuildContextualMenu(ContextualMenuPopulateEvent)
        VB: VisualEditor.Editor.BehaviourTreeEditorGraphView.BuildContextualMenu(ContextualMenuPopulateEvent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: BuildContextualMenu
        path: ''
        startLine: 752
      summary: "\nGeneric menu showed when right clicking\n"
      example: []
      syntax:
        content:
          CSharp: public override void BuildContextualMenu(ContextualMenuPopulateEvent evt)
          VB: Public Overrides Sub BuildContextualMenu(evt As ContextualMenuPopulateEvent)
        parameters:
        - id: evt
          type: ContextualMenuPopulateEvent
      overload: VisualEditor.Editor.BehaviourTreeEditorGraphView.BuildContextualMenu*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.UxmlFactory
    commentId: T:VisualEditor.Editor.BehaviourTreeEditorGraphView.UxmlFactory
    language: CSharp
    name:
      CSharp: BehaviourTreeEditorGraphView.UxmlFactory
      VB: BehaviourTreeEditorGraphView.UxmlFactory
    nameWithType:
      CSharp: BehaviourTreeEditorGraphView.UxmlFactory
      VB: BehaviourTreeEditorGraphView.UxmlFactory
    qualifiedName:
      CSharp: VisualEditor.Editor.BehaviourTreeEditorGraphView.UxmlFactory
      VB: VisualEditor.Editor.BehaviourTreeEditorGraphView.UxmlFactory
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: VisualEditor.Editor
    source:
      id: UxmlFactory
      path: ''
      startLine: 657
    syntax:
      content:
        CSharp: 'public class UxmlFactory : BehaviourTreeEditorGraphView.UxmlFactory<BehaviourTreeEditorGraphView, GraphView.UxmlTraits>'
        VB: >-
          Public Class UxmlFactory

              Inherits BehaviourTreeEditorGraphView.UxmlFactory(Of BehaviourTreeEditorGraphView, GraphView.UxmlTraits)
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView
    commentId: T:VisualEditor.Editor.BehaviourTreeEditorInspectorView
    language: CSharp
    name:
      CSharp: BehaviourTreeEditorInspectorView
      VB: BehaviourTreeEditorInspectorView
    nameWithType:
      CSharp: BehaviourTreeEditorInspectorView
      VB: BehaviourTreeEditorInspectorView
    qualifiedName:
      CSharp: VisualEditor.Editor.BehaviourTreeEditorInspectorView
      VB: VisualEditor.Editor.BehaviourTreeEditorInspectorView
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: VisualEditor.Editor
    source:
      id: BehaviourTreeEditorInspectorView
      path: ''
      startLine: 780
    syntax:
      content:
        CSharp: 'public class BehaviourTreeEditorInspectorView : VisualElement'
        VB: >-
          Public Class BehaviourTreeEditorInspectorView

              Inherits VisualElement
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView.#ctor
      commentId: M:VisualEditor.Editor.BehaviourTreeEditorInspectorView.#ctor
      language: CSharp
      name:
        CSharp: BehaviourTreeEditorInspectorView()
        VB: BehaviourTreeEditorInspectorView()
      nameWithType:
        CSharp: BehaviourTreeEditorInspectorView.BehaviourTreeEditorInspectorView()
        VB: BehaviourTreeEditorInspectorView.BehaviourTreeEditorInspectorView()
      qualifiedName:
        CSharp: VisualEditor.Editor.BehaviourTreeEditorInspectorView.BehaviourTreeEditorInspectorView()
        VB: VisualEditor.Editor.BehaviourTreeEditorInspectorView.BehaviourTreeEditorInspectorView()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: .ctor
        path: ''
        startLine: 785
      syntax:
        content:
          CSharp: public BehaviourTreeEditorInspectorView()
          VB: Public Sub New
      overload: VisualEditor.Editor.BehaviourTreeEditorInspectorView.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UpdateSelection(BehaviorTreeObject,NodeEditorInstanceMetadata)
      commentId: M:VisualEditor.Editor.BehaviourTreeEditorInspectorView.UpdateSelection(BehaviorTreeObject,NodeEditorInstanceMetadata)
      language: CSharp
      name:
        CSharp: UpdateSelection(BehaviorTreeObject, NodeEditorInstanceMetadata)
        VB: UpdateSelection(BehaviorTreeObject, NodeEditorInstanceMetadata)
      nameWithType:
        CSharp: BehaviourTreeEditorInspectorView.UpdateSelection(BehaviorTreeObject, NodeEditorInstanceMetadata)
        VB: BehaviourTreeEditorInspectorView.UpdateSelection(BehaviorTreeObject, NodeEditorInstanceMetadata)
      qualifiedName:
        CSharp: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UpdateSelection(BehaviorTreeObject, NodeEditorInstanceMetadata)
        VB: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UpdateSelection(BehaviorTreeObject, NodeEditorInstanceMetadata)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: UpdateSelection
        path: ''
        startLine: 794
      summary: "\nUpdates inspector to display selected node information\n"
      example: []
      syntax:
        content:
          CSharp: public void UpdateSelection(BehaviorTreeObject tree, NodeEditorInstanceMetadata node)
          VB: Public Sub UpdateSelection(tree As BehaviorTreeObject, node As NodeEditorInstanceMetadata)
        parameters:
        - id: tree
          type: BehaviorTreeObject
          description: Behaviour tree scriptable object used by visual editor
        - id: node
          type: NodeEditorInstanceMetadata
          description: Node metadata reference
      overload: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UpdateSelection*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UxmlFactory
    commentId: T:VisualEditor.Editor.BehaviourTreeEditorInspectorView.UxmlFactory
    language: CSharp
    name:
      CSharp: BehaviourTreeEditorInspectorView.UxmlFactory
      VB: BehaviourTreeEditorInspectorView.UxmlFactory
    nameWithType:
      CSharp: BehaviourTreeEditorInspectorView.UxmlFactory
      VB: BehaviourTreeEditorInspectorView.UxmlFactory
    qualifiedName:
      CSharp: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UxmlFactory
      VB: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UxmlFactory
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: VisualEditor.Editor
    source:
      id: UxmlFactory
      path: ''
      startLine: 781
    syntax:
      content:
        CSharp: 'public class UxmlFactory : BehaviourTreeEditorInspectorView.UxmlFactory<BehaviourTreeEditorInspectorView, VisualElement.UxmlTraits>'
        VB: >-
          Public Class UxmlFactory

              Inherits BehaviourTreeEditorInspectorView.UxmlFactory(Of BehaviourTreeEditorInspectorView, VisualElement.UxmlTraits)
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: VisualEditor.Editor.BehaviourTreeEditorWindow
    commentId: T:VisualEditor.Editor.BehaviourTreeEditorWindow
    language: CSharp
    name:
      CSharp: BehaviourTreeEditorWindow
      VB: BehaviourTreeEditorWindow
    nameWithType:
      CSharp: BehaviourTreeEditorWindow
      VB: BehaviourTreeEditorWindow
    qualifiedName:
      CSharp: VisualEditor.Editor.BehaviourTreeEditorWindow
      VB: VisualEditor.Editor.BehaviourTreeEditorWindow
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: VisualEditor.Editor
    source:
      id: BehaviourTreeEditorWindow
      path: ''
      startLine: 897
    syntax:
      content:
        CSharp: 'public class BehaviourTreeEditorWindow : EditorWindow'
        VB: >-
          Public Class BehaviourTreeEditorWindow

              Inherits EditorWindow
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: VisualEditor.Editor.BehaviourTreeEditorWindow.OpenWindow(BehaviorTreeObject)
      commentId: M:VisualEditor.Editor.BehaviourTreeEditorWindow.OpenWindow(BehaviorTreeObject)
      language: CSharp
      name:
        CSharp: OpenWindow(BehaviorTreeObject)
        VB: OpenWindow(BehaviorTreeObject)
      nameWithType:
        CSharp: BehaviourTreeEditorWindow.OpenWindow(BehaviorTreeObject)
        VB: BehaviourTreeEditorWindow.OpenWindow(BehaviorTreeObject)
      qualifiedName:
        CSharp: VisualEditor.Editor.BehaviourTreeEditorWindow.OpenWindow(BehaviorTreeObject)
        VB: VisualEditor.Editor.BehaviourTreeEditorWindow.OpenWindow(BehaviorTreeObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: OpenWindow
        path: ''
        startLine: 907
      summary: "\nOpens visual editor and loads targetObject\n"
      example: []
      syntax:
        content:
          CSharp: public static void OpenWindow(BehaviorTreeObject targetObject)
          VB: Public Shared Sub OpenWindow(targetObject As BehaviorTreeObject)
        parameters:
        - id: targetObject
          type: BehaviorTreeObject
      overload: VisualEditor.Editor.BehaviourTreeEditorWindow.OpenWindow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: VisualEditor.Editor.BehaviourTreeEditorWindow.CreateGUI
      commentId: M:VisualEditor.Editor.BehaviourTreeEditorWindow.CreateGUI
      language: CSharp
      name:
        CSharp: CreateGUI()
        VB: CreateGUI()
      nameWithType:
        CSharp: BehaviourTreeEditorWindow.CreateGUI()
        VB: BehaviourTreeEditorWindow.CreateGUI()
      qualifiedName:
        CSharp: VisualEditor.Editor.BehaviourTreeEditorWindow.CreateGUI()
        VB: VisualEditor.Editor.BehaviourTreeEditorWindow.CreateGUI()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: CreateGUI
        path: ''
        startLine: 921
      summary: "\nFunction called when window is loaded, builds window with data\n"
      example: []
      syntax:
        content:
          CSharp: public void CreateGUI()
          VB: Public Sub CreateGUI
      overload: VisualEditor.Editor.BehaviourTreeEditorWindow.CreateGUI*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: VisualEditor.Editor.NodeView
    commentId: T:VisualEditor.Editor.NodeView
    language: CSharp
    name:
      CSharp: NodeView
      VB: NodeView
    nameWithType:
      CSharp: NodeView
      VB: NodeView
    qualifiedName:
      CSharp: VisualEditor.Editor.NodeView
      VB: VisualEditor.Editor.NodeView
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: VisualEditor.Editor
    source:
      id: NodeView
      path: ''
      startLine: 961
    syntax:
      content:
        CSharp: 'public class NodeView : Node'
        VB: >-
          Public Class NodeView

              Inherits Node
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: VisualEditor.Editor.NodeView.OnNodeSelected
      commentId: F:VisualEditor.Editor.NodeView.OnNodeSelected
      language: CSharp
      name:
        CSharp: OnNodeSelected
        VB: OnNodeSelected
      nameWithType:
        CSharp: NodeView.OnNodeSelected
        VB: NodeView.OnNodeSelected
      qualifiedName:
        CSharp: VisualEditor.Editor.NodeView.OnNodeSelected
        VB: VisualEditor.Editor.NodeView.OnNodeSelected
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: OnNodeSelected
        path: ''
        startLine: 962
      syntax:
        content:
          CSharp: public Action<NodeView> OnNodeSelected
          VB: Public OnNodeSelected As Action(Of NodeView)
        return:
          type: System.Action{VisualEditor.Editor.NodeView}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: VisualEditor.Editor.NodeView.Node
      commentId: F:VisualEditor.Editor.NodeView.Node
      language: CSharp
      name:
        CSharp: Node
        VB: Node
      nameWithType:
        CSharp: NodeView.Node
        VB: NodeView.Node
      qualifiedName:
        CSharp: VisualEditor.Editor.NodeView.Node
        VB: VisualEditor.Editor.NodeView.Node
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: Node
        path: ''
        startLine: 963
      syntax:
        content:
          CSharp: public NodeEditorInstanceMetadata Node
          VB: Public Node As NodeEditorInstanceMetadata
        return:
          type: NodeEditorInstanceMetadata
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: VisualEditor.Editor.NodeView.Input
      commentId: F:VisualEditor.Editor.NodeView.Input
      language: CSharp
      name:
        CSharp: Input
        VB: Input
      nameWithType:
        CSharp: NodeView.Input
        VB: NodeView.Input
      qualifiedName:
        CSharp: VisualEditor.Editor.NodeView.Input
        VB: VisualEditor.Editor.NodeView.Input
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: Input
        path: ''
        startLine: 964
      syntax:
        content:
          CSharp: public Port Input
          VB: Public Input As Port
        return:
          type: Port
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: VisualEditor.Editor.NodeView.Output
      commentId: F:VisualEditor.Editor.NodeView.Output
      language: CSharp
      name:
        CSharp: Output
        VB: Output
      nameWithType:
        CSharp: NodeView.Output
        VB: NodeView.Output
      qualifiedName:
        CSharp: VisualEditor.Editor.NodeView.Output
        VB: VisualEditor.Editor.NodeView.Output
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: Output
        path: ''
        startLine: 965
      syntax:
        content:
          CSharp: public Port Output
          VB: Public Output As Port
        return:
          type: Port
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: VisualEditor.Editor.NodeView.#ctor(NodeEditorInstanceMetadata)
      commentId: M:VisualEditor.Editor.NodeView.#ctor(NodeEditorInstanceMetadata)
      language: CSharp
      name:
        CSharp: NodeView(NodeEditorInstanceMetadata)
        VB: NodeView(NodeEditorInstanceMetadata)
      nameWithType:
        CSharp: NodeView.NodeView(NodeEditorInstanceMetadata)
        VB: NodeView.NodeView(NodeEditorInstanceMetadata)
      qualifiedName:
        CSharp: VisualEditor.Editor.NodeView.NodeView(NodeEditorInstanceMetadata)
        VB: VisualEditor.Editor.NodeView.NodeView(NodeEditorInstanceMetadata)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: .ctor
        path: ''
        startLine: 970
      summary: "\nGenerates a custom nodeview from node meta data\n"
      example: []
      syntax:
        content:
          CSharp: public NodeView(NodeEditorInstanceMetadata node)
          VB: Public Sub New(node As NodeEditorInstanceMetadata)
        parameters:
        - id: node
          type: NodeEditorInstanceMetadata
      overload: VisualEditor.Editor.NodeView.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: VisualEditor.Editor.NodeView.SetPosition(Rect)
      commentId: M:VisualEditor.Editor.NodeView.SetPosition(Rect)
      language: CSharp
      name:
        CSharp: SetPosition(Rect)
        VB: SetPosition(Rect)
      nameWithType:
        CSharp: NodeView.SetPosition(Rect)
        VB: NodeView.SetPosition(Rect)
      qualifiedName:
        CSharp: VisualEditor.Editor.NodeView.SetPosition(Rect)
        VB: VisualEditor.Editor.NodeView.SetPosition(Rect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: SetPosition
        path: ''
        startLine: 1012
      summary: "\nSet a new position for a visual node\n"
      example: []
      syntax:
        content:
          CSharp: public override void SetPosition(Rect newPos)
          VB: Public Overrides Sub SetPosition(newPos As Rect)
        parameters:
        - id: newPos
          type: Rect
      overload: VisualEditor.Editor.NodeView.SetPosition*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: VisualEditor.Editor.NodeView.OnSelected
      commentId: M:VisualEditor.Editor.NodeView.OnSelected
      language: CSharp
      name:
        CSharp: OnSelected()
        VB: OnSelected()
      nameWithType:
        CSharp: NodeView.OnSelected()
        VB: NodeView.OnSelected()
      qualifiedName:
        CSharp: VisualEditor.Editor.NodeView.OnSelected()
        VB: VisualEditor.Editor.NodeView.OnSelected()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: VisualEditor.Editor
      source:
        id: OnSelected
        path: ''
        startLine: 1022
      summary: "\nCallback sent when a node is selected\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnSelected()
          VB: Public Overrides Sub OnSelected
      overload: VisualEditor.Editor.NodeView.OnSelected*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: VisualEditor.Editor.SplitView
    commentId: T:VisualEditor.Editor.SplitView
    language: CSharp
    name:
      CSharp: SplitView
      VB: SplitView
    nameWithType:
      CSharp: SplitView
      VB: SplitView
    qualifiedName:
      CSharp: VisualEditor.Editor.SplitView
      VB: VisualEditor.Editor.SplitView
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: VisualEditor.Editor
    source:
      id: SplitView
      path: ''
      startLine: 1033
    syntax:
      content:
        CSharp: 'public class SplitView : TwoPaneSplitView'
        VB: >-
          Public Class SplitView

              Inherits TwoPaneSplitView
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: VisualEditor.Editor.SplitView.UxmlFactory
    commentId: T:VisualEditor.Editor.SplitView.UxmlFactory
    language: CSharp
    name:
      CSharp: SplitView.UxmlFactory
      VB: SplitView.UxmlFactory
    nameWithType:
      CSharp: SplitView.UxmlFactory
      VB: SplitView.UxmlFactory
    qualifiedName:
      CSharp: VisualEditor.Editor.SplitView.UxmlFactory
      VB: VisualEditor.Editor.SplitView.UxmlFactory
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: VisualEditor.Editor
    source:
      id: UxmlFactory
      path: ''
      startLine: 1034
    syntax:
      content:
        CSharp: 'public class UxmlFactory : SplitView.UxmlFactory<SplitView, TwoPaneSplitView.UxmlTraits>'
        VB: >-
          Public Class UxmlFactory

              Inherits SplitView.UxmlFactory(Of SplitView, TwoPaneSplitView.UxmlTraits)
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
references:
  BehaviorTree:
    name:
      CSharp:
      - name: BehaviorTree
        nameWithType: BehaviorTree
        qualifiedName: BehaviorTree
      VB:
      - name: BehaviorTree
        nameWithType: BehaviorTree
        qualifiedName: BehaviorTree
    isDefinition: true
    commentId: N:BehaviorTree
  BehaviorTree.Node:
    name:
      CSharp:
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      VB:
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
    isDefinition: true
    parent: BehaviorTree
    commentId: T:BehaviorTree.Node
  BehaviorTree.BehaviorTreeAgent.Root*:
    name:
      CSharp:
      - id: BehaviorTree.BehaviorTreeAgent.Root*
        name: Root
        nameWithType: BehaviorTreeAgent.Root
        qualifiedName: BehaviorTree.BehaviorTreeAgent.Root
      VB:
      - id: BehaviorTree.BehaviorTreeAgent.Root*
        name: Root
        nameWithType: BehaviorTreeAgent.Root
        qualifiedName: BehaviorTree.BehaviorTreeAgent.Root
    isDefinition: true
    commentId: Overload:BehaviorTree.BehaviorTreeAgent.Root
  BehaviorTree.BehaviorTreeAgent.SetupTree*:
    name:
      CSharp:
      - id: BehaviorTree.BehaviorTreeAgent.SetupTree*
        name: SetupTree
        nameWithType: BehaviorTreeAgent.SetupTree
        qualifiedName: BehaviorTree.BehaviorTreeAgent.SetupTree
      VB:
      - id: BehaviorTree.BehaviorTreeAgent.SetupTree*
        name: SetupTree
        nameWithType: BehaviorTreeAgent.SetupTree
        qualifiedName: BehaviorTree.BehaviorTreeAgent.SetupTree
    isDefinition: true
    commentId: Overload:BehaviorTree.BehaviorTreeAgent.SetupTree
  BehaviorTree.BehaviorTreeAgent:
    name:
      CSharp:
      - id: BehaviorTree.BehaviorTreeAgent
        name: BehaviorTreeAgent
        nameWithType: BehaviorTreeAgent
        qualifiedName: BehaviorTree.BehaviorTreeAgent
      VB:
      - id: BehaviorTree.BehaviorTreeAgent
        name: BehaviorTreeAgent
        nameWithType: BehaviorTreeAgent
        qualifiedName: BehaviorTree.BehaviorTreeAgent
    isDefinition: true
    parent: BehaviorTree
    commentId: T:BehaviorTree.BehaviorTreeAgent
  BehaviorTree.Node.Agent:
    name:
      CSharp:
      - id: BehaviorTree.Node.Agent
        name: Agent
        nameWithType: Node.Agent
        qualifiedName: BehaviorTree.Node.Agent
      VB:
      - id: BehaviorTree.Node.Agent
        name: Agent
        nameWithType: Node.Agent
        qualifiedName: BehaviorTree.Node.Agent
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: P:BehaviorTree.Node.Agent
  BehaviorTree.Node.Children:
    name:
      CSharp:
      - id: BehaviorTree.Node.Children
        name: Children
        nameWithType: Node.Children
        qualifiedName: BehaviorTree.Node.Children
      VB:
      - id: BehaviorTree.Node.Children
        name: Children
        nameWithType: Node.Children
        qualifiedName: BehaviorTree.Node.Children
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: P:BehaviorTree.Node.Children
  BehaviorTree.Node.Parent:
    name:
      CSharp:
      - id: BehaviorTree.Node.Parent
        name: Parent
        nameWithType: Node.Parent
        qualifiedName: BehaviorTree.Node.Parent
      VB:
      - id: BehaviorTree.Node.Parent
        name: Parent
        nameWithType: Node.Parent
        qualifiedName: BehaviorTree.Node.Parent
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: P:BehaviorTree.Node.Parent
  BehaviorTree.Node.Root:
    name:
      CSharp:
      - id: BehaviorTree.Node.Root
        name: Root
        nameWithType: Node.Root
        qualifiedName: BehaviorTree.Node.Root
      VB:
      - id: BehaviorTree.Node.Root
        name: Root
        nameWithType: Node.Root
        qualifiedName: BehaviorTree.Node.Root
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: P:BehaviorTree.Node.Root
  BehaviorTree.Node.State:
    name:
      CSharp:
      - id: BehaviorTree.Node.State
        name: State
        nameWithType: Node.State
        qualifiedName: BehaviorTree.Node.State
      VB:
      - id: BehaviorTree.Node.State
        name: State
        nameWithType: Node.State
        qualifiedName: BehaviorTree.Node.State
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: P:BehaviorTree.Node.State
  BehaviorTree.Node.Attach(BehaviorTree.Node):
    name:
      CSharp:
      - id: BehaviorTree.Node.Attach(BehaviorTree.Node)
        name: Attach
        nameWithType: Node.Attach
        qualifiedName: BehaviorTree.Node.Attach
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.Attach(BehaviorTree.Node)
        name: Attach
        nameWithType: Node.Attach
        qualifiedName: BehaviorTree.Node.Attach
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.Attach(BehaviorTree.Node)
  BehaviorTree.Node.GetNode``1:
    name:
      CSharp:
      - id: BehaviorTree.Node.GetNode``1
        name: GetNode<T>
        nameWithType: Node.GetNode<T>
        qualifiedName: BehaviorTree.Node.GetNode<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.GetNode``1
        name: GetNode(Of T)
        nameWithType: Node.GetNode(Of T)
        qualifiedName: BehaviorTree.Node.GetNode(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.GetNode``1
  BehaviorTree.Node.GetNodes``1:
    name:
      CSharp:
      - id: BehaviorTree.Node.GetNodes``1
        name: GetNodes<T>
        nameWithType: Node.GetNodes<T>
        qualifiedName: BehaviorTree.Node.GetNodes<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.GetNodes``1
        name: GetNodes(Of T)
        nameWithType: Node.GetNodes(Of T)
        qualifiedName: BehaviorTree.Node.GetNodes(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.GetNodes``1
  BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node):
    name:
      CSharp:
      - id: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
        name: Initialize
        nameWithType: Node.Initialize
        qualifiedName: BehaviorTree.Node.Initialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: BehaviorTree.BehaviorTreeAgent
        name: BehaviorTreeAgent
        nameWithType: BehaviorTreeAgent
        qualifiedName: BehaviorTree.BehaviorTreeAgent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
        name: Initialize
        nameWithType: Node.Initialize
        qualifiedName: BehaviorTree.Node.Initialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: BehaviorTree.BehaviorTreeAgent
        name: BehaviorTreeAgent
        nameWithType: BehaviorTreeAgent
        qualifiedName: BehaviorTree.BehaviorTreeAgent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
  BehaviorTree.Node.Update:
    name:
      CSharp:
      - id: BehaviorTree.Node.Update
        name: Update
        nameWithType: Node.Update
        qualifiedName: BehaviorTree.Node.Update
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.Update
        name: Update
        nameWithType: Node.Update
        qualifiedName: BehaviorTree.Node.Update
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.Update
  BehaviorTree.Node.Reset:
    name:
      CSharp:
      - id: BehaviorTree.Node.Reset
        name: Reset
        nameWithType: Node.Reset
        qualifiedName: BehaviorTree.Node.Reset
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.Reset
        name: Reset
        nameWithType: Node.Reset
        qualifiedName: BehaviorTree.Node.Reset
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.Reset
  BehaviorTree.Node.SetData(System.String,System.Object):
    name:
      CSharp:
      - id: BehaviorTree.Node.SetData(System.String,System.Object)
        name: SetData
        nameWithType: Node.SetData
        qualifiedName: BehaviorTree.Node.SetData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.SetData(System.String,System.Object)
        name: SetData
        nameWithType: Node.SetData
        qualifiedName: BehaviorTree.Node.SetData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.SetData(System.String,System.Object)
  BehaviorTree.Node.OnInitialize:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnInitialize
        name: OnInitialize
        nameWithType: Node.OnInitialize
        qualifiedName: BehaviorTree.Node.OnInitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.OnInitialize
        name: OnInitialize
        nameWithType: Node.OnInitialize
        qualifiedName: BehaviorTree.Node.OnInitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.OnInitialize
  BehaviorTree.Node.OnStart:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnStart
        name: OnStart
        nameWithType: Node.OnStart
        qualifiedName: BehaviorTree.Node.OnStart
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.OnStart
        name: OnStart
        nameWithType: Node.OnStart
        qualifiedName: BehaviorTree.Node.OnStart
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.OnStart
  BehaviorTree.Node.OnReset:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnReset
        name: OnReset
        nameWithType: Node.OnReset
        qualifiedName: BehaviorTree.Node.OnReset
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.OnReset
        name: OnReset
        nameWithType: Node.OnReset
        qualifiedName: BehaviorTree.Node.OnReset
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.OnReset
  BehaviorTree.Node.GetData(System.String):
    name:
      CSharp:
      - id: BehaviorTree.Node.GetData(System.String)
        name: GetData
        nameWithType: Node.GetData
        qualifiedName: BehaviorTree.Node.GetData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.GetData(System.String)
        name: GetData
        nameWithType: Node.GetData
        qualifiedName: BehaviorTree.Node.GetData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.GetData(System.String)
  BehaviorTree.Node.GetData``1(System.String):
    name:
      CSharp:
      - id: BehaviorTree.Node.GetData``1(System.String)
        name: GetData<T>
        nameWithType: Node.GetData<T>
        qualifiedName: BehaviorTree.Node.GetData<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.GetData``1(System.String)
        name: GetData(Of T)
        nameWithType: Node.GetData(Of T)
        qualifiedName: BehaviorTree.Node.GetData(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.GetData``1(System.String)
  BehaviorTree.Node.RemoveData(System.String):
    name:
      CSharp:
      - id: BehaviorTree.Node.RemoveData(System.String)
        name: RemoveData
        nameWithType: Node.RemoveData
        qualifiedName: BehaviorTree.Node.RemoveData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.RemoveData(System.String)
        name: RemoveData
        nameWithType: Node.RemoveData
        qualifiedName: BehaviorTree.Node.RemoveData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.RemoveData(System.String)
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  BehaviorTree.NodeState:
    name:
      CSharp:
      - id: BehaviorTree.NodeState
        name: NodeState
        nameWithType: NodeState
        qualifiedName: BehaviorTree.NodeState
      VB:
      - id: BehaviorTree.NodeState
        name: NodeState
        nameWithType: NodeState
        qualifiedName: BehaviorTree.NodeState
    isDefinition: true
    parent: BehaviorTree
    commentId: T:BehaviorTree.NodeState
  BehaviorTree.Node.OnUpdate:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnUpdate
        name: OnUpdate
        nameWithType: Node.OnUpdate
        qualifiedName: BehaviorTree.Node.OnUpdate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.OnUpdate
        name: OnUpdate
        nameWithType: Node.OnUpdate
        qualifiedName: BehaviorTree.Node.OnUpdate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.OnUpdate
  BehaviorTree.Inverter.OnUpdate*:
    name:
      CSharp:
      - id: BehaviorTree.Inverter.OnUpdate*
        name: OnUpdate
        nameWithType: Inverter.OnUpdate
        qualifiedName: BehaviorTree.Inverter.OnUpdate
      VB:
      - id: BehaviorTree.Inverter.OnUpdate*
        name: OnUpdate
        nameWithType: Inverter.OnUpdate
        qualifiedName: BehaviorTree.Inverter.OnUpdate
    isDefinition: true
    commentId: Overload:BehaviorTree.Inverter.OnUpdate
  BehaviorTree.Inverter:
    name:
      CSharp:
      - id: BehaviorTree.Inverter
        name: Inverter
        nameWithType: Inverter
        qualifiedName: BehaviorTree.Inverter
      VB:
      - id: BehaviorTree.Inverter
        name: Inverter
        nameWithType: Inverter
        qualifiedName: BehaviorTree.Inverter
    isDefinition: true
    commentId: T:BehaviorTree.Inverter
  NodeReflection:
    name:
      CSharp:
      - name: NodeReflection
        nameWithType: NodeReflection
        qualifiedName: NodeReflection
      VB:
      - name: NodeReflection
        nameWithType: NodeReflection
        qualifiedName: NodeReflection
    isDefinition: true
    commentId: N:NodeReflection
  NodeReflection.VisualNodeAttribute:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute
      VB:
      - id: NodeReflection.VisualNodeAttribute
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute
    isDefinition: true
    parent: NodeReflection
    commentId: T:NodeReflection.VisualNodeAttribute
  NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String):
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute.VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute.VisualNodeAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute.VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute.VisualNodeAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodeReflection.VisualNodeAttribute
    commentId: M:NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  BehaviorTree.Node.Agent*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Agent*
        name: Agent
        nameWithType: Node.Agent
        qualifiedName: BehaviorTree.Node.Agent
      VB:
      - id: BehaviorTree.Node.Agent*
        name: Agent
        nameWithType: Node.Agent
        qualifiedName: BehaviorTree.Node.Agent
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Agent
  List`1:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  List{BehaviorTree.Node}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{BehaviorTree.Node}'
  BehaviorTree.Node.Children*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Children*
        name: Children
        nameWithType: Node.Children
        qualifiedName: BehaviorTree.Node.Children
      VB:
      - id: BehaviorTree.Node.Children*
        name: Children
        nameWithType: Node.Children
        qualifiedName: BehaviorTree.Node.Children
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Children
  BehaviorTree.Node.Parent*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Parent*
        name: Parent
        nameWithType: Node.Parent
        qualifiedName: BehaviorTree.Node.Parent
      VB:
      - id: BehaviorTree.Node.Parent*
        name: Parent
        nameWithType: Node.Parent
        qualifiedName: BehaviorTree.Node.Parent
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Parent
  BehaviorTree.Node.Root*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Root*
        name: Root
        nameWithType: Node.Root
        qualifiedName: BehaviorTree.Node.Root
      VB:
      - id: BehaviorTree.Node.Root*
        name: Root
        nameWithType: Node.Root
        qualifiedName: BehaviorTree.Node.Root
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Root
  BehaviorTree.Node.State*:
    name:
      CSharp:
      - id: BehaviorTree.Node.State*
        name: State
        nameWithType: Node.State
        qualifiedName: BehaviorTree.Node.State
      VB:
      - id: BehaviorTree.Node.State*
        name: State
        nameWithType: Node.State
        qualifiedName: BehaviorTree.Node.State
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.State
  BehaviorTree.Node.Attach*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Attach*
        name: Attach
        nameWithType: Node.Attach
        qualifiedName: BehaviorTree.Node.Attach
      VB:
      - id: BehaviorTree.Node.Attach*
        name: Attach
        nameWithType: Node.Attach
        qualifiedName: BehaviorTree.Node.Attach
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Attach
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  BehaviorTree.Node.GetNode*:
    name:
      CSharp:
      - id: BehaviorTree.Node.GetNode*
        name: GetNode
        nameWithType: Node.GetNode
        qualifiedName: BehaviorTree.Node.GetNode
      VB:
      - id: BehaviorTree.Node.GetNode*
        name: GetNode
        nameWithType: Node.GetNode
        qualifiedName: BehaviorTree.Node.GetNode
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.GetNode
  IEnumerable`1:
    name:
      CSharp:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:IEnumerable`1'
  IEnumerable{{T}}:
    name:
      CSharp:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IEnumerable`1
    commentId: '!:IEnumerable{``0}'
  BehaviorTree.Node.GetNodes*:
    name:
      CSharp:
      - id: BehaviorTree.Node.GetNodes*
        name: GetNodes
        nameWithType: Node.GetNodes
        qualifiedName: BehaviorTree.Node.GetNodes
      VB:
      - id: BehaviorTree.Node.GetNodes*
        name: GetNodes
        nameWithType: Node.GetNodes
        qualifiedName: BehaviorTree.Node.GetNodes
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.GetNodes
  BehaviorTree.Node.Initialize*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Initialize*
        name: Initialize
        nameWithType: Node.Initialize
        qualifiedName: BehaviorTree.Node.Initialize
      VB:
      - id: BehaviorTree.Node.Initialize*
        name: Initialize
        nameWithType: Node.Initialize
        qualifiedName: BehaviorTree.Node.Initialize
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Initialize
  BehaviorTree.Node.Update*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Update*
        name: Update
        nameWithType: Node.Update
        qualifiedName: BehaviorTree.Node.Update
      VB:
      - id: BehaviorTree.Node.Update*
        name: Update
        nameWithType: Node.Update
        qualifiedName: BehaviorTree.Node.Update
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Update
  BehaviorTree.Node.Reset*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Reset*
        name: Reset
        nameWithType: Node.Reset
        qualifiedName: BehaviorTree.Node.Reset
      VB:
      - id: BehaviorTree.Node.Reset*
        name: Reset
        nameWithType: Node.Reset
        qualifiedName: BehaviorTree.Node.Reset
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Reset
  BehaviorTree.Node.SetData*:
    name:
      CSharp:
      - id: BehaviorTree.Node.SetData*
        name: SetData
        nameWithType: Node.SetData
        qualifiedName: BehaviorTree.Node.SetData
      VB:
      - id: BehaviorTree.Node.SetData*
        name: SetData
        nameWithType: Node.SetData
        qualifiedName: BehaviorTree.Node.SetData
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.SetData
  BehaviorTree.Node.OnInitialize*:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnInitialize*
        name: OnInitialize
        nameWithType: Node.OnInitialize
        qualifiedName: BehaviorTree.Node.OnInitialize
      VB:
      - id: BehaviorTree.Node.OnInitialize*
        name: OnInitialize
        nameWithType: Node.OnInitialize
        qualifiedName: BehaviorTree.Node.OnInitialize
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.OnInitialize
  BehaviorTree.Node.OnStart*:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnStart*
        name: OnStart
        nameWithType: Node.OnStart
        qualifiedName: BehaviorTree.Node.OnStart
      VB:
      - id: BehaviorTree.Node.OnStart*
        name: OnStart
        nameWithType: Node.OnStart
        qualifiedName: BehaviorTree.Node.OnStart
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.OnStart
  BehaviorTree.Node.OnUpdate*:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnUpdate*
        name: OnUpdate
        nameWithType: Node.OnUpdate
        qualifiedName: BehaviorTree.Node.OnUpdate
      VB:
      - id: BehaviorTree.Node.OnUpdate*
        name: OnUpdate
        nameWithType: Node.OnUpdate
        qualifiedName: BehaviorTree.Node.OnUpdate
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.OnUpdate
  BehaviorTree.Node.OnReset*:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnReset*
        name: OnReset
        nameWithType: Node.OnReset
        qualifiedName: BehaviorTree.Node.OnReset
      VB:
      - id: BehaviorTree.Node.OnReset*
        name: OnReset
        nameWithType: Node.OnReset
        qualifiedName: BehaviorTree.Node.OnReset
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.OnReset
  BehaviorTree.Node.GetData*:
    name:
      CSharp:
      - id: BehaviorTree.Node.GetData*
        name: GetData
        nameWithType: Node.GetData
        qualifiedName: BehaviorTree.Node.GetData
      VB:
      - id: BehaviorTree.Node.GetData*
        name: GetData
        nameWithType: Node.GetData
        qualifiedName: BehaviorTree.Node.GetData
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.GetData
  BehaviorTree.Node.RemoveData*:
    name:
      CSharp:
      - id: BehaviorTree.Node.RemoveData*
        name: RemoveData
        nameWithType: Node.RemoveData
        qualifiedName: BehaviorTree.Node.RemoveData
      VB:
      - id: BehaviorTree.Node.RemoveData*
        name: RemoveData
        nameWithType: Node.RemoveData
        qualifiedName: BehaviorTree.Node.RemoveData
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.RemoveData
  BehaviorTree.RepeatMode:
    name:
      CSharp:
      - id: BehaviorTree.RepeatMode
        name: RepeatMode
        nameWithType: RepeatMode
        qualifiedName: BehaviorTree.RepeatMode
      VB:
      - id: BehaviorTree.RepeatMode
        name: RepeatMode
        nameWithType: RepeatMode
        qualifiedName: BehaviorTree.RepeatMode
    isDefinition: true
    parent: BehaviorTree
    commentId: T:BehaviorTree.RepeatMode
  BehaviorTree.Repeater.RepeatMode*:
    name:
      CSharp:
      - id: BehaviorTree.Repeater.RepeatMode*
        name: RepeatMode
        nameWithType: Repeater.RepeatMode
        qualifiedName: BehaviorTree.Repeater.RepeatMode
      VB:
      - id: BehaviorTree.Repeater.RepeatMode*
        name: RepeatMode
        nameWithType: Repeater.RepeatMode
        qualifiedName: BehaviorTree.Repeater.RepeatMode
    isDefinition: true
    commentId: Overload:BehaviorTree.Repeater.RepeatMode
  NodeReflection.ExposedInVisualEditorAttribute:
    name:
      CSharp:
      - id: NodeReflection.ExposedInVisualEditorAttribute
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute
      VB:
      - id: NodeReflection.ExposedInVisualEditorAttribute
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute
    isDefinition: true
    parent: NodeReflection
    commentId: T:NodeReflection.ExposedInVisualEditorAttribute
  NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object):
    name:
      CSharp:
      - id: NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodeReflection.ExposedInVisualEditorAttribute
    commentId: M:NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
  System.InvalidOperationException:
    commentId: T:System.InvalidOperationException
  BehaviorTree.Repeater.OnUpdate*:
    name:
      CSharp:
      - id: BehaviorTree.Repeater.OnUpdate*
        name: OnUpdate
        nameWithType: Repeater.OnUpdate
        qualifiedName: BehaviorTree.Repeater.OnUpdate
      VB:
      - id: BehaviorTree.Repeater.OnUpdate*
        name: OnUpdate
        nameWithType: Repeater.OnUpdate
        qualifiedName: BehaviorTree.Repeater.OnUpdate
    isDefinition: true
    commentId: Overload:BehaviorTree.Repeater.OnUpdate
  BehaviorTree.Repeater:
    name:
      CSharp:
      - id: BehaviorTree.Repeater
        name: Repeater
        nameWithType: Repeater
        qualifiedName: BehaviorTree.Repeater
      VB:
      - id: BehaviorTree.Repeater
        name: Repeater
        nameWithType: Repeater
        qualifiedName: BehaviorTree.Repeater
    isDefinition: true
    commentId: T:BehaviorTree.Repeater
  BehaviorTree.Selector.OnUpdate*:
    name:
      CSharp:
      - id: BehaviorTree.Selector.OnUpdate*
        name: OnUpdate
        nameWithType: Selector.OnUpdate
        qualifiedName: BehaviorTree.Selector.OnUpdate
      VB:
      - id: BehaviorTree.Selector.OnUpdate*
        name: OnUpdate
        nameWithType: Selector.OnUpdate
        qualifiedName: BehaviorTree.Selector.OnUpdate
    isDefinition: true
    commentId: Overload:BehaviorTree.Selector.OnUpdate
  BehaviorTree.Selector:
    name:
      CSharp:
      - id: BehaviorTree.Selector
        name: Selector
        nameWithType: Selector
        qualifiedName: BehaviorTree.Selector
      VB:
      - id: BehaviorTree.Selector
        name: Selector
        nameWithType: Selector
        qualifiedName: BehaviorTree.Selector
    isDefinition: true
    commentId: T:BehaviorTree.Selector
  BehaviorTree.Sequence.OnUpdate*:
    name:
      CSharp:
      - id: BehaviorTree.Sequence.OnUpdate*
        name: OnUpdate
        nameWithType: Sequence.OnUpdate
        qualifiedName: BehaviorTree.Sequence.OnUpdate
      VB:
      - id: BehaviorTree.Sequence.OnUpdate*
        name: OnUpdate
        nameWithType: Sequence.OnUpdate
        qualifiedName: BehaviorTree.Sequence.OnUpdate
    isDefinition: true
    commentId: Overload:BehaviorTree.Sequence.OnUpdate
  BehaviorTree.Sequence:
    name:
      CSharp:
      - id: BehaviorTree.Sequence
        name: Sequence
        nameWithType: Sequence
        qualifiedName: BehaviorTree.Sequence
      VB:
      - id: BehaviorTree.Sequence
        name: Sequence
        nameWithType: Sequence
        qualifiedName: BehaviorTree.Sequence
    isDefinition: true
    commentId: T:BehaviorTree.Sequence
  System.Attribute:
    name:
      CSharp:
      - id: System.Attribute
        name: Attribute
        nameWithType: Attribute
        qualifiedName: System.Attribute
        isExternal: true
      VB:
      - id: System.Attribute
        name: Attribute
        nameWithType: Attribute
        qualifiedName: System.Attribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Attribute
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.Module):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.Equals(System.Object):
    name:
      CSharp:
      - id: System.Attribute.Equals(System.Object)
        name: Equals
        nameWithType: Attribute.Equals
        qualifiedName: System.Attribute.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.Equals(System.Object)
        name: Equals
        nameWithType: Attribute.Equals
        qualifiedName: System.Attribute.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.Equals(System.Object)
  System.Attribute.GetHashCode:
    name:
      CSharp:
      - id: System.Attribute.GetHashCode
        name: GetHashCode
        nameWithType: Attribute.GetHashCode
        qualifiedName: System.Attribute.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetHashCode
        name: GetHashCode
        nameWithType: Attribute.GetHashCode
        qualifiedName: System.Attribute.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetHashCode
  System.Attribute.Match(System.Object):
    name:
      CSharp:
      - id: System.Attribute.Match(System.Object)
        name: Match
        nameWithType: Attribute.Match
        qualifiedName: System.Attribute.Match
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.Match(System.Object)
        name: Match
        nameWithType: Attribute.Match
        qualifiedName: System.Attribute.Match
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.Match(System.Object)
  System.Attribute.IsDefaultAttribute:
    name:
      CSharp:
      - id: System.Attribute.IsDefaultAttribute
        name: IsDefaultAttribute
        nameWithType: Attribute.IsDefaultAttribute
        qualifiedName: System.Attribute.IsDefaultAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefaultAttribute
        name: IsDefaultAttribute
        nameWithType: Attribute.IsDefaultAttribute
        qualifiedName: System.Attribute.IsDefaultAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefaultAttribute
  System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@):
    name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
        name: _Attribute.GetTypeInfoCount
        nameWithType: Attribute._Attribute.GetTypeInfoCount
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
        name: System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
  System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr):
    name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
        name: _Attribute.GetTypeInfo
        nameWithType: Attribute._Attribute.GetTypeInfo
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
        name: System.Runtime.InteropServices._Attribute.GetTypeInfo
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  ? System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  : name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
        name: _Attribute.GetIDsOfNames
        nameWithType: Attribute._Attribute.GetIDsOfNames
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
        name: System.Runtime.InteropServices._Attribute.GetIDsOfNames
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  ? System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  : name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
        name: _Attribute.Invoke
        nameWithType: Attribute._Attribute.Invoke
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.Invoke
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
        name: System.Runtime.InteropServices._Attribute.Invoke
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.Invoke
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.Invoke
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  System.Attribute.TypeId:
    name:
      CSharp:
      - id: System.Attribute.TypeId
        name: TypeId
        nameWithType: Attribute.TypeId
        qualifiedName: System.Attribute.TypeId
        isExternal: true
      VB:
      - id: System.Attribute.TypeId
        name: TypeId
        nameWithType: Attribute.TypeId
        qualifiedName: System.Attribute.TypeId
        isExternal: true
    isDefinition: true
    parent: System.Attribute
    commentId: P:System.Attribute.TypeId
  System.Runtime.InteropServices:
    name:
      CSharp:
      - name: System.Runtime.InteropServices
        nameWithType: System.Runtime.InteropServices
        qualifiedName: System.Runtime.InteropServices
        isExternal: true
      VB:
      - name: System.Runtime.InteropServices
        nameWithType: System.Runtime.InteropServices
        qualifiedName: System.Runtime.InteropServices
    isDefinition: true
    commentId: N:System.Runtime.InteropServices
  System.Runtime.InteropServices._Attribute:
    name:
      CSharp:
      - id: System.Runtime.InteropServices._Attribute
        name: _Attribute
        nameWithType: _Attribute
        qualifiedName: System.Runtime.InteropServices._Attribute
        isExternal: true
      VB:
      - id: System.Runtime.InteropServices._Attribute
        name: _Attribute
        nameWithType: _Attribute
        qualifiedName: System.Runtime.InteropServices._Attribute
        isExternal: true
    isDefinition: true
    parent: System.Runtime.InteropServices
    commentId: T:System.Runtime.InteropServices._Attribute
  NodeReflection.ExposedInVisualEditorAttribute.DefaultValue*:
    name:
      CSharp:
      - id: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue*
        name: DefaultValue
        nameWithType: ExposedInVisualEditorAttribute.DefaultValue
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
      VB:
      - id: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue*
        name: DefaultValue
        nameWithType: ExposedInVisualEditorAttribute.DefaultValue
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
    isDefinition: true
    commentId: Overload:NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
  NodeReflection.ExposedInVisualEditorAttribute.Name*:
    name:
      CSharp:
      - id: NodeReflection.ExposedInVisualEditorAttribute.Name*
        name: Name
        nameWithType: ExposedInVisualEditorAttribute.Name
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.Name
      VB:
      - id: NodeReflection.ExposedInVisualEditorAttribute.Name*
        name: Name
        nameWithType: ExposedInVisualEditorAttribute.Name
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.Name
    isDefinition: true
    commentId: Overload:NodeReflection.ExposedInVisualEditorAttribute.Name
  NodeReflection.ExposedInVisualEditorAttribute.#ctor*:
    name:
      CSharp:
      - id: NodeReflection.ExposedInVisualEditorAttribute.#ctor*
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
      VB:
      - id: NodeReflection.ExposedInVisualEditorAttribute.#ctor*
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
    isDefinition: true
    commentId: Overload:NodeReflection.ExposedInVisualEditorAttribute.#ctor
  System.AttributeUsageAttribute:
    name:
      CSharp:
      - id: System.AttributeUsageAttribute
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute
        isExternal: true
      VB:
      - id: System.AttributeUsageAttribute
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.AttributeUsageAttribute
  System.AttributeUsageAttribute.#ctor(System.AttributeTargets):
    name:
      CSharp:
      - id: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute.AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute.AttributeUsageAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute.AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute.AttributeUsageAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.AttributeUsageAttribute
    commentId: M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
  System.AttributeTargets:
    name:
      CSharp:
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      VB:
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.AttributeTargets
  NodeReflection.VisualNodeAttribute.Description*:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.Description*
        name: Description
        nameWithType: VisualNodeAttribute.Description
        qualifiedName: NodeReflection.VisualNodeAttribute.Description
      VB:
      - id: NodeReflection.VisualNodeAttribute.Description*
        name: Description
        nameWithType: VisualNodeAttribute.Description
        qualifiedName: NodeReflection.VisualNodeAttribute.Description
    isDefinition: true
    commentId: Overload:NodeReflection.VisualNodeAttribute.Description
  NodeReflection.VisualNodeAttribute.DisplayAsBlock*:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.DisplayAsBlock*
        name: DisplayAsBlock
        nameWithType: VisualNodeAttribute.DisplayAsBlock
        qualifiedName: NodeReflection.VisualNodeAttribute.DisplayAsBlock
      VB:
      - id: NodeReflection.VisualNodeAttribute.DisplayAsBlock*
        name: DisplayAsBlock
        nameWithType: VisualNodeAttribute.DisplayAsBlock
        qualifiedName: NodeReflection.VisualNodeAttribute.DisplayAsBlock
    isDefinition: true
    commentId: Overload:NodeReflection.VisualNodeAttribute.DisplayAsBlock
  NodeReflection.VisualNodeAttribute.Name*:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.Name*
        name: Name
        nameWithType: VisualNodeAttribute.Name
        qualifiedName: NodeReflection.VisualNodeAttribute.Name
      VB:
      - id: NodeReflection.VisualNodeAttribute.Name*
        name: Name
        nameWithType: VisualNodeAttribute.Name
        qualifiedName: NodeReflection.VisualNodeAttribute.Name
    isDefinition: true
    commentId: Overload:NodeReflection.VisualNodeAttribute.Name
  NodeReflection.VisualNodeAttribute.Path*:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.Path*
        name: Path
        nameWithType: VisualNodeAttribute.Path
        qualifiedName: NodeReflection.VisualNodeAttribute.Path
      VB:
      - id: NodeReflection.VisualNodeAttribute.Path*
        name: Path
        nameWithType: VisualNodeAttribute.Path
        qualifiedName: NodeReflection.VisualNodeAttribute.Path
    isDefinition: true
    commentId: Overload:NodeReflection.VisualNodeAttribute.Path
  NodeReflection.VisualNodeAttribute.#ctor*:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.#ctor*
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute.VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute.VisualNodeAttribute
      VB:
      - id: NodeReflection.VisualNodeAttribute.#ctor*
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute.VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute.VisualNodeAttribute
    isDefinition: true
    commentId: Overload:NodeReflection.VisualNodeAttribute.#ctor
  System.Action`1:
    name:
      CSharp:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Action`1
  System.Action{VisualEditor.Editor.NodeView}:
    name:
      CSharp:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: VisualEditor.Editor.NodeView
        name: NodeView
        nameWithType: NodeView
        qualifiedName: VisualEditor.Editor.NodeView
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: VisualEditor.Editor.NodeView
        name: NodeView
        nameWithType: NodeView
        qualifiedName: VisualEditor.Editor.NodeView
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Action`1
    parent: System
    commentId: T:System.Action{VisualEditor.Editor.NodeView}
  VisualEditor.Editor.BehaviourTreeEditorGraphView.#ctor*:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.#ctor*
        name: BehaviourTreeEditorGraphView
        nameWithType: BehaviourTreeEditorGraphView.BehaviourTreeEditorGraphView
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView.BehaviourTreeEditorGraphView
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.#ctor*
        name: BehaviourTreeEditorGraphView
        nameWithType: BehaviourTreeEditorGraphView.BehaviourTreeEditorGraphView
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView.BehaviourTreeEditorGraphView
    isDefinition: true
    commentId: Overload:VisualEditor.Editor.BehaviourTreeEditorGraphView.#ctor
  BehaviorTreeObject:
    name:
      CSharp:
      - id: BehaviorTreeObject
        name: BehaviorTreeObject
        nameWithType: BehaviorTreeObject
        qualifiedName: BehaviorTreeObject
        isExternal: true
      VB:
      - id: BehaviorTreeObject
        name: BehaviorTreeObject
        nameWithType: BehaviorTreeObject
        qualifiedName: BehaviorTreeObject
        isExternal: true
    isDefinition: true
  VisualEditor.Editor.BehaviourTreeEditorGraphView.PopulateView*:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.PopulateView*
        name: PopulateView
        nameWithType: BehaviourTreeEditorGraphView.PopulateView
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView.PopulateView
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.PopulateView*
        name: PopulateView
        nameWithType: BehaviourTreeEditorGraphView.PopulateView
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView.PopulateView
    isDefinition: true
    commentId: Overload:VisualEditor.Editor.BehaviourTreeEditorGraphView.PopulateView
  List{Port}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Port
        name: Port
        nameWithType: Port
        qualifiedName: Port
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Port
        name: Port
        nameWithType: Port
        qualifiedName: Port
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{Port}'
  Port:
    name:
      CSharp:
      - id: Port
        name: Port
        nameWithType: Port
        qualifiedName: Port
        isExternal: true
      VB:
      - id: Port
        name: Port
        nameWithType: Port
        qualifiedName: Port
        isExternal: true
    isDefinition: true
  NodeAdapter:
    name:
      CSharp:
      - id: NodeAdapter
        name: NodeAdapter
        nameWithType: NodeAdapter
        qualifiedName: NodeAdapter
        isExternal: true
      VB:
      - id: NodeAdapter
        name: NodeAdapter
        nameWithType: NodeAdapter
        qualifiedName: NodeAdapter
        isExternal: true
    isDefinition: true
    commentId: '!:NodeAdapter'
  VisualEditor.Editor.BehaviourTreeEditorGraphView.GetCompatiblePorts*:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.GetCompatiblePorts*
        name: GetCompatiblePorts
        nameWithType: BehaviourTreeEditorGraphView.GetCompatiblePorts
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView.GetCompatiblePorts
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.GetCompatiblePorts*
        name: GetCompatiblePorts
        nameWithType: BehaviourTreeEditorGraphView.GetCompatiblePorts
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView.GetCompatiblePorts
    isDefinition: true
    commentId: Overload:VisualEditor.Editor.BehaviourTreeEditorGraphView.GetCompatiblePorts
  ContextualMenuPopulateEvent:
    name:
      CSharp:
      - id: ContextualMenuPopulateEvent
        name: ContextualMenuPopulateEvent
        nameWithType: ContextualMenuPopulateEvent
        qualifiedName: ContextualMenuPopulateEvent
        isExternal: true
      VB:
      - id: ContextualMenuPopulateEvent
        name: ContextualMenuPopulateEvent
        nameWithType: ContextualMenuPopulateEvent
        qualifiedName: ContextualMenuPopulateEvent
        isExternal: true
    isDefinition: true
    commentId: '!:ContextualMenuPopulateEvent'
  VisualEditor.Editor.BehaviourTreeEditorGraphView.BuildContextualMenu*:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.BuildContextualMenu*
        name: BuildContextualMenu
        nameWithType: BehaviourTreeEditorGraphView.BuildContextualMenu
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView.BuildContextualMenu
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.BuildContextualMenu*
        name: BuildContextualMenu
        nameWithType: BehaviourTreeEditorGraphView.BuildContextualMenu
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView.BuildContextualMenu
    isDefinition: true
    commentId: Overload:VisualEditor.Editor.BehaviourTreeEditorGraphView.BuildContextualMenu
  VisualEditor.Editor.BehaviourTreeEditorGraphView:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView
        name: BehaviourTreeEditorGraphView
        nameWithType: BehaviourTreeEditorGraphView
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView
        name: BehaviourTreeEditorGraphView
        nameWithType: BehaviourTreeEditorGraphView
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView
    isDefinition: true
    commentId: T:VisualEditor.Editor.BehaviourTreeEditorGraphView
  VisualEditor.Editor.BehaviourTreeEditorGraphView.UxmlFactory:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.UxmlFactory
        name: BehaviourTreeEditorGraphView.UxmlFactory
        nameWithType: BehaviourTreeEditorGraphView.UxmlFactory
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView.UxmlFactory
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorGraphView.UxmlFactory
        name: BehaviourTreeEditorGraphView.UxmlFactory
        nameWithType: BehaviourTreeEditorGraphView.UxmlFactory
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorGraphView.UxmlFactory
    isDefinition: true
    commentId: T:VisualEditor.Editor.BehaviourTreeEditorGraphView.UxmlFactory
  VisualEditor.Editor.BehaviourTreeEditorInspectorView.#ctor*:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView.#ctor*
        name: BehaviourTreeEditorInspectorView
        nameWithType: BehaviourTreeEditorInspectorView.BehaviourTreeEditorInspectorView
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorInspectorView.BehaviourTreeEditorInspectorView
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView.#ctor*
        name: BehaviourTreeEditorInspectorView
        nameWithType: BehaviourTreeEditorInspectorView.BehaviourTreeEditorInspectorView
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorInspectorView.BehaviourTreeEditorInspectorView
    isDefinition: true
    commentId: Overload:VisualEditor.Editor.BehaviourTreeEditorInspectorView.#ctor
  NodeEditorInstanceMetadata:
    name:
      CSharp:
      - id: NodeEditorInstanceMetadata
        name: NodeEditorInstanceMetadata
        nameWithType: NodeEditorInstanceMetadata
        qualifiedName: NodeEditorInstanceMetadata
        isExternal: true
      VB:
      - id: NodeEditorInstanceMetadata
        name: NodeEditorInstanceMetadata
        nameWithType: NodeEditorInstanceMetadata
        qualifiedName: NodeEditorInstanceMetadata
        isExternal: true
    isDefinition: true
  VisualEditor.Editor.BehaviourTreeEditorInspectorView.UpdateSelection*:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UpdateSelection*
        name: UpdateSelection
        nameWithType: BehaviourTreeEditorInspectorView.UpdateSelection
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UpdateSelection
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UpdateSelection*
        name: UpdateSelection
        nameWithType: BehaviourTreeEditorInspectorView.UpdateSelection
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UpdateSelection
    isDefinition: true
    commentId: Overload:VisualEditor.Editor.BehaviourTreeEditorInspectorView.UpdateSelection
  VisualEditor.Editor.BehaviourTreeEditorInspectorView:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView
        name: BehaviourTreeEditorInspectorView
        nameWithType: BehaviourTreeEditorInspectorView
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorInspectorView
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView
        name: BehaviourTreeEditorInspectorView
        nameWithType: BehaviourTreeEditorInspectorView
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorInspectorView
    isDefinition: true
    commentId: T:VisualEditor.Editor.BehaviourTreeEditorInspectorView
  VisualEditor.Editor.BehaviourTreeEditorInspectorView.UxmlFactory:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UxmlFactory
        name: BehaviourTreeEditorInspectorView.UxmlFactory
        nameWithType: BehaviourTreeEditorInspectorView.UxmlFactory
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UxmlFactory
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UxmlFactory
        name: BehaviourTreeEditorInspectorView.UxmlFactory
        nameWithType: BehaviourTreeEditorInspectorView.UxmlFactory
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorInspectorView.UxmlFactory
    isDefinition: true
    commentId: T:VisualEditor.Editor.BehaviourTreeEditorInspectorView.UxmlFactory
  VisualEditor.Editor.BehaviourTreeEditorWindow.OpenWindow*:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorWindow.OpenWindow*
        name: OpenWindow
        nameWithType: BehaviourTreeEditorWindow.OpenWindow
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorWindow.OpenWindow
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorWindow.OpenWindow*
        name: OpenWindow
        nameWithType: BehaviourTreeEditorWindow.OpenWindow
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorWindow.OpenWindow
    isDefinition: true
    commentId: Overload:VisualEditor.Editor.BehaviourTreeEditorWindow.OpenWindow
  VisualEditor.Editor.BehaviourTreeEditorWindow.CreateGUI*:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorWindow.CreateGUI*
        name: CreateGUI
        nameWithType: BehaviourTreeEditorWindow.CreateGUI
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorWindow.CreateGUI
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorWindow.CreateGUI*
        name: CreateGUI
        nameWithType: BehaviourTreeEditorWindow.CreateGUI
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorWindow.CreateGUI
    isDefinition: true
    commentId: Overload:VisualEditor.Editor.BehaviourTreeEditorWindow.CreateGUI
  VisualEditor.Editor.BehaviourTreeEditorWindow:
    name:
      CSharp:
      - id: VisualEditor.Editor.BehaviourTreeEditorWindow
        name: BehaviourTreeEditorWindow
        nameWithType: BehaviourTreeEditorWindow
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorWindow
      VB:
      - id: VisualEditor.Editor.BehaviourTreeEditorWindow
        name: BehaviourTreeEditorWindow
        nameWithType: BehaviourTreeEditorWindow
        qualifiedName: VisualEditor.Editor.BehaviourTreeEditorWindow
    isDefinition: true
    commentId: T:VisualEditor.Editor.BehaviourTreeEditorWindow
  VisualEditor.Editor.NodeView.#ctor*:
    name:
      CSharp:
      - id: VisualEditor.Editor.NodeView.#ctor*
        name: NodeView
        nameWithType: NodeView.NodeView
        qualifiedName: VisualEditor.Editor.NodeView.NodeView
      VB:
      - id: VisualEditor.Editor.NodeView.#ctor*
        name: NodeView
        nameWithType: NodeView.NodeView
        qualifiedName: VisualEditor.Editor.NodeView.NodeView
    isDefinition: true
    commentId: Overload:VisualEditor.Editor.NodeView.#ctor
  Rect:
    name:
      CSharp:
      - id: Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      VB:
      - id: Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
    isDefinition: true
    commentId: '!:Rect'
  VisualEditor.Editor.NodeView.SetPosition*:
    name:
      CSharp:
      - id: VisualEditor.Editor.NodeView.SetPosition*
        name: SetPosition
        nameWithType: NodeView.SetPosition
        qualifiedName: VisualEditor.Editor.NodeView.SetPosition
      VB:
      - id: VisualEditor.Editor.NodeView.SetPosition*
        name: SetPosition
        nameWithType: NodeView.SetPosition
        qualifiedName: VisualEditor.Editor.NodeView.SetPosition
    isDefinition: true
    commentId: Overload:VisualEditor.Editor.NodeView.SetPosition
  VisualEditor.Editor.NodeView.OnSelected*:
    name:
      CSharp:
      - id: VisualEditor.Editor.NodeView.OnSelected*
        name: OnSelected
        nameWithType: NodeView.OnSelected
        qualifiedName: VisualEditor.Editor.NodeView.OnSelected
      VB:
      - id: VisualEditor.Editor.NodeView.OnSelected*
        name: OnSelected
        nameWithType: NodeView.OnSelected
        qualifiedName: VisualEditor.Editor.NodeView.OnSelected
    isDefinition: true
    commentId: Overload:VisualEditor.Editor.NodeView.OnSelected
  VisualEditor.Editor.NodeView:
    name:
      CSharp:
      - id: VisualEditor.Editor.NodeView
        name: NodeView
        nameWithType: NodeView
        qualifiedName: VisualEditor.Editor.NodeView
      VB:
      - id: VisualEditor.Editor.NodeView
        name: NodeView
        nameWithType: NodeView
        qualifiedName: VisualEditor.Editor.NodeView
    isDefinition: true
    commentId: T:VisualEditor.Editor.NodeView
  VisualEditor.Editor.SplitView:
    name:
      CSharp:
      - id: VisualEditor.Editor.SplitView
        name: SplitView
        nameWithType: SplitView
        qualifiedName: VisualEditor.Editor.SplitView
      VB:
      - id: VisualEditor.Editor.SplitView
        name: SplitView
        nameWithType: SplitView
        qualifiedName: VisualEditor.Editor.SplitView
    isDefinition: true
    commentId: T:VisualEditor.Editor.SplitView
  VisualEditor.Editor.SplitView.UxmlFactory:
    name:
      CSharp:
      - id: VisualEditor.Editor.SplitView.UxmlFactory
        name: SplitView.UxmlFactory
        nameWithType: SplitView.UxmlFactory
        qualifiedName: VisualEditor.Editor.SplitView.UxmlFactory
      VB:
      - id: VisualEditor.Editor.SplitView.UxmlFactory
        name: SplitView.UxmlFactory
        nameWithType: SplitView.UxmlFactory
        qualifiedName: VisualEditor.Editor.SplitView.UxmlFactory
    isDefinition: true
    commentId: T:VisualEditor.Editor.SplitView.UxmlFactory
  VisualEditor.Editor:
    name:
      CSharp:
      - name: VisualEditor.Editor
        nameWithType: VisualEditor.Editor
        qualifiedName: VisualEditor.Editor
      VB:
      - name: VisualEditor.Editor
        nameWithType: VisualEditor.Editor
        qualifiedName: VisualEditor.Editor
    isDefinition: true
    commentId: N:VisualEditor.Editor
