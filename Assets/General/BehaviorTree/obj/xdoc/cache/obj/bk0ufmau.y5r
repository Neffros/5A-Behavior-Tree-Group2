id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: BehaviorTree
  commentId: N:BehaviorTree
  language: CSharp
  name:
    CSharp: BehaviorTree
    VB: BehaviorTree
  nameWithType:
    CSharp: BehaviorTree
    VB: BehaviorTree
  qualifiedName:
    CSharp: BehaviorTree
    VB: BehaviorTree
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: BehaviorTree.BehaviorTreeAgent
    commentId: T:BehaviorTree.BehaviorTreeAgent
    language: CSharp
    name:
      CSharp: BehaviorTreeAgent
      VB: BehaviorTreeAgent
    nameWithType:
      CSharp: BehaviorTreeAgent
      VB: BehaviorTreeAgent
    qualifiedName:
      CSharp: BehaviorTree.BehaviorTreeAgent
      VB: BehaviorTree.BehaviorTreeAgent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: BehaviorTreeAgent
      path: ''
      startLine: 12
    summary: "\nMain class for the behavior of the agent\n"
    example: []
    syntax:
      content:
        CSharp: 'public class BehaviorTreeAgent : MonoBehaviour'
        VB: >-
          Public Class BehaviorTreeAgent

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: BehaviorTree.BehaviorTreeAgent.Root
      commentId: P:BehaviorTree.BehaviorTreeAgent.Root
      language: CSharp
      name:
        CSharp: Root
        VB: Root
      nameWithType:
        CSharp: BehaviorTreeAgent.Root
        VB: BehaviorTreeAgent.Root
      qualifiedName:
        CSharp: BehaviorTree.BehaviorTreeAgent.Root
        VB: BehaviorTree.BehaviorTreeAgent.Root
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Root
        path: ''
        startLine: 26
      summary: "\nGets the root node that will contain children node\n"
      example: []
      syntax:
        content:
          CSharp: public Node Root { get; }
          VB: Public ReadOnly Property Root As Node
        parameters: []
        return:
          type: BehaviorTree.Node
      overload: BehaviorTree.BehaviorTreeAgent.Root*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.BehaviorTreeAgent.SetupTree
      commentId: M:BehaviorTree.BehaviorTreeAgent.SetupTree
      language: CSharp
      name:
        CSharp: SetupTree()
        VB: SetupTree()
      nameWithType:
        CSharp: BehaviorTreeAgent.SetupTree()
        VB: BehaviorTreeAgent.SetupTree()
      qualifiedName:
        CSharp: BehaviorTree.BehaviorTreeAgent.SetupTree()
        VB: BehaviorTree.BehaviorTreeAgent.SetupTree()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: SetupTree
        path: ''
        startLine: 73
      summary: "\nSets up nodes for the behavior of the agent\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual Node SetupTree()
          VB: Protected Overridable Function SetupTree As Node
        return:
          type: BehaviorTree.Node
          description: The root node. Must not be null.
      overload: BehaviorTree.BehaviorTreeAgent.SetupTree*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: BehaviorTree.Inverter
    commentId: T:BehaviorTree.Inverter
    language: CSharp
    name:
      CSharp: Inverter
      VB: Inverter
    nameWithType:
      CSharp: Inverter
      VB: Inverter
    qualifiedName:
      CSharp: BehaviorTree.Inverter
      VB: BehaviorTree.Inverter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: Inverter
      path: ''
      startLine: 95
    summary: "\nInverts the result of the child node.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [VisualNode("", "", false, "Custom")]

          public class Inverter : Node
        VB: >-
          <VisualNode("", "", False, "Custom")>

          Public Class Inverter

              Inherits Node
    inheritance:
    - System.Object
    - BehaviorTree.Node
    inheritedMembers:
    - BehaviorTree.Node.Agent
    - BehaviorTree.Node.Children
    - BehaviorTree.Node.Parent
    - BehaviorTree.Node.Root
    - BehaviorTree.Node.State
    - BehaviorTree.Node.Attach(BehaviorTree.Node)
    - BehaviorTree.Node.GetNode``1
    - BehaviorTree.Node.GetNodes``1
    - BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
    - BehaviorTree.Node.Update
    - BehaviorTree.Node.Reset
    - BehaviorTree.Node.SetData(System.String,System.Object)
    - BehaviorTree.Node.OnInitialize
    - BehaviorTree.Node.OnStart
    - BehaviorTree.Node.OnReset
    - BehaviorTree.Node.GetData(System.String)
    - BehaviorTree.Node.GetData``1(System.String)
    - BehaviorTree.Node.RemoveData(System.String)
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: NodeReflection.VisualNodeAttribute
      ctor: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      arguments:
      - type: System.String
        value: ''
      - type: System.String
        value: ''
      - type: System.Boolean
        value: false
      - type: System.String
        value: Custom
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: BehaviorTree.Inverter.OnUpdate
      commentId: M:BehaviorTree.Inverter.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: Inverter.OnUpdate()
        VB: Inverter.OnUpdate()
      qualifiedName:
        CSharp: BehaviorTree.Inverter.OnUpdate()
        VB: BehaviorTree.Inverter.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnUpdate
        path: ''
        startLine: 102
      summary: "\nEvaluate the node\n"
      example: []
      syntax:
        content:
          CSharp: protected override NodeState OnUpdate()
          VB: Protected Overrides Function OnUpdate As NodeState
        return:
          type: BehaviorTree.NodeState
          description: Return SUCCESS if a child node failed, FAILURE if a child node succeeded, or RUNNING
      overload: BehaviorTree.Inverter.OnUpdate*
      overridden: BehaviorTree.Node.OnUpdate
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: BehaviorTree.NodeState
    commentId: T:BehaviorTree.NodeState
    language: CSharp
    name:
      CSharp: NodeState
      VB: NodeState
    nameWithType:
      CSharp: NodeState
      VB: NodeState
    qualifiedName:
      CSharp: BehaviorTree.NodeState
      VB: BehaviorTree.NodeState
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: NodeState
      path: ''
      startLine: 135
    summary: "\nState of the node\n"
    example: []
    syntax:
      content:
        CSharp: public enum NodeState
        VB: Public Enum NodeState
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: BehaviorTree.NodeState.NotExecuted
      commentId: F:BehaviorTree.NodeState.NotExecuted
      language: CSharp
      name:
        CSharp: NotExecuted
        VB: NotExecuted
      nameWithType:
        CSharp: NodeState.NotExecuted
        VB: NodeState.NotExecuted
      qualifiedName:
        CSharp: BehaviorTree.NodeState.NotExecuted
        VB: BehaviorTree.NodeState.NotExecuted
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: NotExecuted
        path: ''
        startLine: 137
      syntax:
        content:
          CSharp: NotExecuted = 0
          VB: NotExecuted = 0
        return:
          type: BehaviorTree.NodeState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: BehaviorTree.NodeState.Running
      commentId: F:BehaviorTree.NodeState.Running
      language: CSharp
      name:
        CSharp: Running
        VB: Running
      nameWithType:
        CSharp: NodeState.Running
        VB: NodeState.Running
      qualifiedName:
        CSharp: BehaviorTree.NodeState.Running
        VB: BehaviorTree.NodeState.Running
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Running
        path: ''
        startLine: 138
      syntax:
        content:
          CSharp: Running = 1
          VB: Running = 1
        return:
          type: BehaviorTree.NodeState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: BehaviorTree.NodeState.Success
      commentId: F:BehaviorTree.NodeState.Success
      language: CSharp
      name:
        CSharp: Success
        VB: Success
      nameWithType:
        CSharp: NodeState.Success
        VB: NodeState.Success
      qualifiedName:
        CSharp: BehaviorTree.NodeState.Success
        VB: BehaviorTree.NodeState.Success
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Success
        path: ''
        startLine: 139
      syntax:
        content:
          CSharp: Success = 2
          VB: Success = 2
        return:
          type: BehaviorTree.NodeState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: BehaviorTree.NodeState.Failure
      commentId: F:BehaviorTree.NodeState.Failure
      language: CSharp
      name:
        CSharp: Failure
        VB: Failure
      nameWithType:
        CSharp: NodeState.Failure
        VB: NodeState.Failure
      qualifiedName:
        CSharp: BehaviorTree.NodeState.Failure
        VB: BehaviorTree.NodeState.Failure
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Failure
        path: ''
        startLine: 140
      syntax:
        content:
          CSharp: Failure = 3
          VB: Failure = 3
        return:
          type: BehaviorTree.NodeState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: BehaviorTree.Node
    commentId: T:BehaviorTree.Node
    language: CSharp
    name:
      CSharp: Node
      VB: Node
    nameWithType:
      CSharp: Node
      VB: Node
    qualifiedName:
      CSharp: BehaviorTree.Node
      VB: BehaviorTree.Node
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: Node
      path: ''
      startLine: 146
    summary: "\nNode that is connected to the root, will be evaluated by the agent\n"
    example: []
    syntax:
      content:
        CSharp: public abstract class Node
        VB: Public MustInherit Class Node
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: BehaviorTree.Node.Agent
      commentId: P:BehaviorTree.Node.Agent
      language: CSharp
      name:
        CSharp: Agent
        VB: Agent
      nameWithType:
        CSharp: Node.Agent
        VB: Node.Agent
      qualifiedName:
        CSharp: BehaviorTree.Node.Agent
        VB: BehaviorTree.Node.Agent
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Agent
        path: ''
        startLine: 153
      summary: "\nGets the behavior tree agent\n"
      example: []
      syntax:
        content:
          CSharp: public BehaviorTreeAgent Agent { get; }
          VB: Public ReadOnly Property Agent As BehaviorTreeAgent
        parameters: []
        return:
          type: BehaviorTree.BehaviorTreeAgent
      overload: BehaviorTree.Node.Agent*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.Node.Children
      commentId: P:BehaviorTree.Node.Children
      language: CSharp
      name:
        CSharp: Children
        VB: Children
      nameWithType:
        CSharp: Node.Children
        VB: Node.Children
      qualifiedName:
        CSharp: BehaviorTree.Node.Children
        VB: BehaviorTree.Node.Children
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Children
        path: ''
        startLine: 158
      summary: "\nChildren node that the node will have\n"
      example: []
      syntax:
        content:
          CSharp: public List<Node> Children { get; }
          VB: Public ReadOnly Property Children As List(Of Node)
        parameters: []
        return:
          type: List{BehaviorTree.Node}
      overload: BehaviorTree.Node.Children*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.Node.Parent
      commentId: P:BehaviorTree.Node.Parent
      language: CSharp
      name:
        CSharp: Parent
        VB: Parent
      nameWithType:
        CSharp: Node.Parent
        VB: Node.Parent
      qualifiedName:
        CSharp: BehaviorTree.Node.Parent
        VB: BehaviorTree.Node.Parent
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Parent
        path: ''
        startLine: 163
      summary: "\nGets the parent of the current node\n"
      example: []
      syntax:
        content:
          CSharp: public Node Parent { get; }
          VB: Public ReadOnly Property Parent As Node
        parameters: []
        return:
          type: BehaviorTree.Node
      overload: BehaviorTree.Node.Parent*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.Node.Root
      commentId: P:BehaviorTree.Node.Root
      language: CSharp
      name:
        CSharp: Root
        VB: Root
      nameWithType:
        CSharp: Node.Root
        VB: Node.Root
      qualifiedName:
        CSharp: BehaviorTree.Node.Root
        VB: BehaviorTree.Node.Root
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Root
        path: ''
        startLine: 168
      summary: "\nGets the root of the tree containing the node\n"
      example: []
      syntax:
        content:
          CSharp: public Node Root { get; }
          VB: Public ReadOnly Property Root As Node
        parameters: []
        return:
          type: BehaviorTree.Node
      overload: BehaviorTree.Node.Root*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.Node.State
      commentId: P:BehaviorTree.Node.State
      language: CSharp
      name:
        CSharp: State
        VB: State
      nameWithType:
        CSharp: Node.State
        VB: Node.State
      qualifiedName:
        CSharp: BehaviorTree.Node.State
        VB: BehaviorTree.Node.State
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: State
        path: ''
        startLine: 173
      summary: "\nCurrent state of the node\n"
      example: []
      syntax:
        content:
          CSharp: public NodeState State { get; }
          VB: Public ReadOnly Property State As NodeState
        parameters: []
        return:
          type: BehaviorTree.NodeState
      overload: BehaviorTree.Node.State*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: BehaviorTree.Node.Attach(BehaviorTree.Node)
      commentId: M:BehaviorTree.Node.Attach(BehaviorTree.Node)
      language: CSharp
      name:
        CSharp: Attach(Node)
        VB: Attach(Node)
      nameWithType:
        CSharp: Node.Attach(Node)
        VB: Node.Attach(Node)
      qualifiedName:
        CSharp: BehaviorTree.Node.Attach(BehaviorTree.Node)
        VB: BehaviorTree.Node.Attach(BehaviorTree.Node)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Attach
        path: ''
        startLine: 193
      summary: "\nAttach child node to this instance of Node\n"
      example: []
      syntax:
        content:
          CSharp: public Node Attach(Node node)
          VB: Public Function Attach(node As Node) As Node
        parameters:
        - id: node
          type: BehaviorTree.Node
          description: Child node to be attached
        return:
          type: BehaviorTree.Node
          description: Return current node for chaining
      overload: BehaviorTree.Node.Attach*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.GetNode``1
      commentId: M:BehaviorTree.Node.GetNode``1
      language: CSharp
      name:
        CSharp: GetNode<T>()
        VB: GetNode(Of T)()
      nameWithType:
        CSharp: Node.GetNode<T>()
        VB: Node.GetNode(Of T)()
      qualifiedName:
        CSharp: BehaviorTree.Node.GetNode<T>()
        VB: BehaviorTree.Node.GetNode(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: GetNode
        path: ''
        startLine: 205
      summary: "\nGets the first found node with the given type in the tree of this node\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public T GetNode<T>()

                where T : Node
          VB: Public Function GetNode(Of T As Node) As T
        typeParameters:
        - id: T
          description: Node type to find
        return:
          type: '{T}'
          description: A node with the given type
      overload: BehaviorTree.Node.GetNode*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.GetNodes``1
      commentId: M:BehaviorTree.Node.GetNodes``1
      language: CSharp
      name:
        CSharp: GetNodes<T>()
        VB: GetNodes(Of T)()
      nameWithType:
        CSharp: Node.GetNodes<T>()
        VB: Node.GetNodes(Of T)()
      qualifiedName:
        CSharp: BehaviorTree.Node.GetNodes<T>()
        VB: BehaviorTree.Node.GetNodes(Of T)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: GetNodes
        path: ''
        startLine: 229
      summary: "\nGets nodes by type in the tree of this node\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public IEnumerable<T> GetNodes<T>()

                where T : Node
          VB: Public Function GetNodes(Of T As Node) As IEnumerable(Of T)
        typeParameters:
        - id: T
          description: Node type to find
        return:
          type: IEnumerable{{T}}
          description: An enumerable of nodes with the given type
      overload: BehaviorTree.Node.GetNodes*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
      commentId: M:BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
      language: CSharp
      name:
        CSharp: Initialize(BehaviorTreeAgent, Node)
        VB: Initialize(BehaviorTreeAgent, Node)
      nameWithType:
        CSharp: Node.Initialize(BehaviorTreeAgent, Node)
        VB: Node.Initialize(BehaviorTreeAgent, Node)
      qualifiedName:
        CSharp: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent, BehaviorTree.Node)
        VB: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent, BehaviorTree.Node)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Initialize
        path: ''
        startLine: 242
      summary: "\nInitializes the node\n"
      example: []
      syntax:
        content:
          CSharp: public void Initialize(BehaviorTreeAgent agent, Node root = null)
          VB: Public Sub Initialize(agent As BehaviorTreeAgent, root As Node = Nothing)
        parameters:
        - id: agent
          type: BehaviorTree.BehaviorTreeAgent
        - id: root
          type: BehaviorTree.Node
      overload: BehaviorTree.Node.Initialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.Update
      commentId: M:BehaviorTree.Node.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: Node.Update()
        VB: Node.Update()
      qualifiedName:
        CSharp: BehaviorTree.Node.Update()
        VB: BehaviorTree.Node.Update()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Update
        path: ''
        startLine: 258
      summary: "\nUpdates the node\n"
      example: []
      syntax:
        content:
          CSharp: public void Update()
          VB: Public Sub Update
      overload: BehaviorTree.Node.Update*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.Reset
      commentId: M:BehaviorTree.Node.Reset
      language: CSharp
      name:
        CSharp: Reset()
        VB: Reset()
      nameWithType:
        CSharp: Node.Reset()
        VB: Node.Reset()
      qualifiedName:
        CSharp: BehaviorTree.Node.Reset()
        VB: BehaviorTree.Node.Reset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: Reset
        path: ''
        startLine: 271
      syntax:
        content:
          CSharp: public void Reset()
          VB: Public Sub Reset
      overload: BehaviorTree.Node.Reset*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.SetData(System.String,System.Object)
      commentId: M:BehaviorTree.Node.SetData(System.String,System.Object)
      language: CSharp
      name:
        CSharp: SetData(String, Object)
        VB: SetData(String, Object)
      nameWithType:
        CSharp: Node.SetData(String, Object)
        VB: Node.SetData(String, Object)
      qualifiedName:
        CSharp: BehaviorTree.Node.SetData(System.String, System.Object)
        VB: BehaviorTree.Node.SetData(System.String, System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: SetData
        path: ''
        startLine: 288
      summary: "\nAdds data to the dictionary\n"
      example: []
      syntax:
        content:
          CSharp: public void SetData(string key, object value)
          VB: Public Sub SetData(key As String, value As Object)
        parameters:
        - id: key
          type: System.String
          description: Key to be added
        - id: value
          type: System.Object
          description: Value to be added
      overload: BehaviorTree.Node.SetData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: BehaviorTree.Node.OnInitialize
      commentId: M:BehaviorTree.Node.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: Node.OnInitialize()
        VB: Node.OnInitialize()
      qualifiedName:
        CSharp: BehaviorTree.Node.OnInitialize()
        VB: BehaviorTree.Node.OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnInitialize
        path: ''
        startLine: 300
      summary: "\nFired on tree initialization\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnInitialize()
          VB: Protected Overridable Sub OnInitialize
      overload: BehaviorTree.Node.OnInitialize*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: BehaviorTree.Node.OnStart
      commentId: M:BehaviorTree.Node.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: Node.OnStart()
        VB: Node.OnStart()
      qualifiedName:
        CSharp: BehaviorTree.Node.OnStart()
        VB: BehaviorTree.Node.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnStart
        path: ''
        startLine: 306
      summary: "\nCalled on node update if the status is NotExecuted.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual NodeState OnStart()
          VB: Protected Overridable Function OnStart As NodeState
        return:
          type: BehaviorTree.NodeState
          description: Returns the new state of this node. Must not be NodeState.NotExecuted.
      overload: BehaviorTree.Node.OnStart*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: BehaviorTree.Node.OnUpdate
      commentId: M:BehaviorTree.Node.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: Node.OnUpdate()
        VB: Node.OnUpdate()
      qualifiedName:
        CSharp: BehaviorTree.Node.OnUpdate()
        VB: BehaviorTree.Node.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnUpdate
        path: ''
        startLine: 315
      summary: "\nCalled on node update if the status is Running.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual NodeState OnUpdate()
          VB: Protected Overridable Function OnUpdate As NodeState
        return:
          type: BehaviorTree.NodeState
          description: Returns the new state of this node. Must not be NodeState.NotExecuted.
      overload: BehaviorTree.Node.OnUpdate*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: BehaviorTree.Node.OnReset
      commentId: M:BehaviorTree.Node.OnReset
      language: CSharp
      name:
        CSharp: OnReset()
        VB: OnReset()
      nameWithType:
        CSharp: Node.OnReset()
        VB: Node.OnReset()
      qualifiedName:
        CSharp: BehaviorTree.Node.OnReset()
        VB: BehaviorTree.Node.OnReset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnReset
        path: ''
        startLine: 323
      summary: "\nCalled when the node is reset.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnReset()
          VB: Protected Overridable Sub OnReset
      overload: BehaviorTree.Node.OnReset*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: BehaviorTree.Node.GetData(System.String)
      commentId: M:BehaviorTree.Node.GetData(System.String)
      language: CSharp
      name:
        CSharp: GetData(String)
        VB: GetData(String)
      nameWithType:
        CSharp: Node.GetData(String)
        VB: Node.GetData(String)
      qualifiedName:
        CSharp: BehaviorTree.Node.GetData(System.String)
        VB: BehaviorTree.Node.GetData(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: GetData
        path: ''
        startLine: 337
      summary: "\nRetrieve value from dictionary\n"
      example: []
      syntax:
        content:
          CSharp: protected object GetData(string key)
          VB: Protected Function GetData(key As String) As Object
        parameters:
        - id: key
          type: System.String
          description: Key used to look for data
        return:
          type: System.Object
          description: Return value of the dictionary according to the key
      overload: BehaviorTree.Node.GetData*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: BehaviorTree.Node.GetData``1(System.String)
      commentId: M:BehaviorTree.Node.GetData``1(System.String)
      language: CSharp
      name:
        CSharp: GetData<T>(String)
        VB: GetData(Of T)(String)
      nameWithType:
        CSharp: Node.GetData<T>(String)
        VB: Node.GetData(Of T)(String)
      qualifiedName:
        CSharp: BehaviorTree.Node.GetData<T>(System.String)
        VB: BehaviorTree.Node.GetData(Of T)(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: GetData
        path: ''
        startLine: 351
      summary: "\nRetrieve value from dictionary\n"
      example: []
      syntax:
        content:
          CSharp: protected T GetData<T>(string key)
          VB: Protected Function GetData(Of T)(key As String) As T
        parameters:
        - id: key
          type: System.String
          description: Key used to look for data
        typeParameters:
        - id: T
          description: Type of the value
        return:
          type: '{T}'
          description: Return value of the dictionary according to the key
      overload: BehaviorTree.Node.GetData*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: BehaviorTree.Node.RemoveData(System.String)
      commentId: M:BehaviorTree.Node.RemoveData(System.String)
      language: CSharp
      name:
        CSharp: RemoveData(String)
        VB: RemoveData(String)
      nameWithType:
        CSharp: Node.RemoveData(String)
        VB: Node.RemoveData(String)
      qualifiedName:
        CSharp: BehaviorTree.Node.RemoveData(System.String)
        VB: BehaviorTree.Node.RemoveData(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: RemoveData
        path: ''
        startLine: 364
      summary: "\nRemove KeyValuePair from the dictionary\n"
      example: []
      syntax:
        content:
          CSharp: protected bool RemoveData(string key)
          VB: Protected Function RemoveData(key As String) As Boolean
        parameters:
        - id: key
          type: System.String
          description: Key remove from the dictionary
        return:
          type: System.Boolean
          description: Return true if the removal succeeded, false if not
      overload: BehaviorTree.Node.RemoveData*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
  - id: BehaviorTree.RepeatMode
    commentId: T:BehaviorTree.RepeatMode
    language: CSharp
    name:
      CSharp: RepeatMode
      VB: RepeatMode
    nameWithType:
      CSharp: RepeatMode
      VB: RepeatMode
    qualifiedName:
      CSharp: BehaviorTree.RepeatMode
      VB: BehaviorTree.RepeatMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: RepeatMode
      path: ''
      startLine: 395
    summary: "\nRepeat mode\n"
    example: []
    syntax:
      content:
        CSharp: public enum RepeatMode
        VB: Public Enum RepeatMode
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: BehaviorTree.RepeatMode.RepeatIfSuccess
      commentId: F:BehaviorTree.RepeatMode.RepeatIfSuccess
      language: CSharp
      name:
        CSharp: RepeatIfSuccess
        VB: RepeatIfSuccess
      nameWithType:
        CSharp: RepeatMode.RepeatIfSuccess
        VB: RepeatMode.RepeatIfSuccess
      qualifiedName:
        CSharp: BehaviorTree.RepeatMode.RepeatIfSuccess
        VB: BehaviorTree.RepeatMode.RepeatIfSuccess
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: RepeatIfSuccess
        path: ''
        startLine: 397
      syntax:
        content:
          CSharp: RepeatIfSuccess = 0
          VB: RepeatIfSuccess = 0
        return:
          type: BehaviorTree.RepeatMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: BehaviorTree.RepeatMode.RepeatIfFailure
      commentId: F:BehaviorTree.RepeatMode.RepeatIfFailure
      language: CSharp
      name:
        CSharp: RepeatIfFailure
        VB: RepeatIfFailure
      nameWithType:
        CSharp: RepeatMode.RepeatIfFailure
        VB: RepeatMode.RepeatIfFailure
      qualifiedName:
        CSharp: BehaviorTree.RepeatMode.RepeatIfFailure
        VB: BehaviorTree.RepeatMode.RepeatIfFailure
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: RepeatIfFailure
        path: ''
        startLine: 398
      syntax:
        content:
          CSharp: RepeatIfFailure = 1
          VB: RepeatIfFailure = 1
        return:
          type: BehaviorTree.RepeatMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: BehaviorTree.Repeater
    commentId: T:BehaviorTree.Repeater
    language: CSharp
    name:
      CSharp: Repeater
      VB: Repeater
    nameWithType:
      CSharp: Repeater
      VB: Repeater
    qualifiedName:
      CSharp: BehaviorTree.Repeater
      VB: BehaviorTree.Repeater
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: Repeater
      path: ''
      startLine: 404
    summary: "\nRepeats the child while its state does not match the RepeatMode\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [VisualNode("", "", false, "Custom")]

          public class Repeater : Node
        VB: >-
          <VisualNode("", "", False, "Custom")>

          Public Class Repeater

              Inherits Node
    inheritance:
    - System.Object
    - BehaviorTree.Node
    inheritedMembers:
    - BehaviorTree.Node.Agent
    - BehaviorTree.Node.Children
    - BehaviorTree.Node.Parent
    - BehaviorTree.Node.Root
    - BehaviorTree.Node.State
    - BehaviorTree.Node.Attach(BehaviorTree.Node)
    - BehaviorTree.Node.GetNode``1
    - BehaviorTree.Node.GetNodes``1
    - BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
    - BehaviorTree.Node.Update
    - BehaviorTree.Node.Reset
    - BehaviorTree.Node.SetData(System.String,System.Object)
    - BehaviorTree.Node.OnInitialize
    - BehaviorTree.Node.OnStart
    - BehaviorTree.Node.OnReset
    - BehaviorTree.Node.GetData(System.String)
    - BehaviorTree.Node.GetData``1(System.String)
    - BehaviorTree.Node.RemoveData(System.String)
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: NodeReflection.VisualNodeAttribute
      ctor: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      arguments:
      - type: System.String
        value: ''
      - type: System.String
        value: ''
      - type: System.Boolean
        value: false
      - type: System.String
        value: Custom
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: BehaviorTree.Repeater.RepeatMode
      commentId: P:BehaviorTree.Repeater.RepeatMode
      language: CSharp
      name:
        CSharp: RepeatMode
        VB: RepeatMode
      nameWithType:
        CSharp: Repeater.RepeatMode
        VB: Repeater.RepeatMode
      qualifiedName:
        CSharp: BehaviorTree.Repeater.RepeatMode
        VB: BehaviorTree.Repeater.RepeatMode
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: RepeatMode
        path: ''
        startLine: 410
      summary: "\nRepeat mode\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [ExposedInVisualEditor("", RepeatMode.RepeatIfSuccess)]

            public RepeatMode RepeatMode { get; set; }
          VB: >-
            <ExposedInVisualEditor("", RepeatMode.RepeatIfSuccess)>

            Public Property RepeatMode As RepeatMode
        parameters: []
        return:
          type: BehaviorTree.RepeatMode
      overload: BehaviorTree.Repeater.RepeatMode*
      attributes:
      - type: NodeReflection.ExposedInVisualEditorAttribute
        ctor: NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
        arguments:
        - type: System.String
          value: ''
        - type: BehaviorTree.RepeatMode
          value: 0
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: BehaviorTree.Repeater.OnUpdate
      commentId: M:BehaviorTree.Repeater.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: Repeater.OnUpdate()
        VB: Repeater.OnUpdate()
      qualifiedName:
        CSharp: BehaviorTree.Repeater.OnUpdate()
        VB: BehaviorTree.Repeater.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnUpdate
        path: ''
        startLine: 423
      summary: "\nEvaluates the node\n"
      example: []
      syntax:
        content:
          CSharp: protected override NodeState OnUpdate()
          VB: Protected Overrides Function OnUpdate As NodeState
        return:
          type: BehaviorTree.NodeState
          description: "\nIf RepeatMode is RepeatIfSuccess:\nReturn Success if the child state is Success, Running otherwise.\nIf RepeatMode is RepeatIfFailure:\nReturn Failure if the child state is Failure, Running otherwise.\n"
      overload: BehaviorTree.Repeater.OnUpdate*
      overridden: BehaviorTree.Node.OnUpdate
      exceptions:
      - type: System.InvalidOperationException
        commentId: T:System.InvalidOperationException
        description: If the repeater does not have exactly one child.
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: BehaviorTree.Selector
    commentId: T:BehaviorTree.Selector
    language: CSharp
    name:
      CSharp: Selector
      VB: Selector
    nameWithType:
      CSharp: Selector
      VB: Selector
    qualifiedName:
      CSharp: BehaviorTree.Selector
      VB: BehaviorTree.Selector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: Selector
      path: ''
      startLine: 471
    summary: "\nSelector nodes contain one or more children. Upon execution, it executes every child until one of them succeeds, otherwise it fails\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [VisualNode("", "", false, "Custom")]

          public class Selector : Node
        VB: >-
          <VisualNode("", "", False, "Custom")>

          Public Class Selector

              Inherits Node
    inheritance:
    - System.Object
    - BehaviorTree.Node
    inheritedMembers:
    - BehaviorTree.Node.Agent
    - BehaviorTree.Node.Children
    - BehaviorTree.Node.Parent
    - BehaviorTree.Node.Root
    - BehaviorTree.Node.State
    - BehaviorTree.Node.Attach(BehaviorTree.Node)
    - BehaviorTree.Node.GetNode``1
    - BehaviorTree.Node.GetNodes``1
    - BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
    - BehaviorTree.Node.Update
    - BehaviorTree.Node.Reset
    - BehaviorTree.Node.SetData(System.String,System.Object)
    - BehaviorTree.Node.OnInitialize
    - BehaviorTree.Node.OnStart
    - BehaviorTree.Node.OnReset
    - BehaviorTree.Node.GetData(System.String)
    - BehaviorTree.Node.GetData``1(System.String)
    - BehaviorTree.Node.RemoveData(System.String)
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: NodeReflection.VisualNodeAttribute
      ctor: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      arguments:
      - type: System.String
        value: ''
      - type: System.String
        value: ''
      - type: System.Boolean
        value: false
      - type: System.String
        value: Custom
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: BehaviorTree.Selector.OnUpdate
      commentId: M:BehaviorTree.Selector.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: Selector.OnUpdate()
        VB: Selector.OnUpdate()
      qualifiedName:
        CSharp: BehaviorTree.Selector.OnUpdate()
        VB: BehaviorTree.Selector.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnUpdate
        path: ''
        startLine: 478
      summary: "\nEvaluate the node\n"
      example: []
      syntax:
        content:
          CSharp: protected override NodeState OnUpdate()
          VB: Protected Overrides Function OnUpdate As NodeState
        return:
          type: BehaviorTree.NodeState
          description: 'Return SUCCESS if a child node succeeded, RUNNING if a child node is running, or FAILURE after every evaluated children '
      overload: BehaviorTree.Selector.OnUpdate*
      overridden: BehaviorTree.Node.OnUpdate
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: BehaviorTree.Sequence
    commentId: T:BehaviorTree.Sequence
    language: CSharp
    name:
      CSharp: Sequence
      VB: Sequence
    nameWithType:
      CSharp: Sequence
      VB: Sequence
    qualifiedName:
      CSharp: BehaviorTree.Sequence
      VB: BehaviorTree.Sequence
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: BehaviorTree
    source:
      id: Sequence
      path: ''
      startLine: 513
    summary: "\nSequence nodes contain one or more children. Upon execution, it executes every child and fails when one of the children fails.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [VisualNode("", "", true, "Custom")]

          public class Sequence : Node
        VB: >-
          <VisualNode("", "", True, "Custom")>

          Public Class Sequence

              Inherits Node
    inheritance:
    - System.Object
    - BehaviorTree.Node
    inheritedMembers:
    - BehaviorTree.Node.Agent
    - BehaviorTree.Node.Children
    - BehaviorTree.Node.Parent
    - BehaviorTree.Node.Root
    - BehaviorTree.Node.State
    - BehaviorTree.Node.Attach(BehaviorTree.Node)
    - BehaviorTree.Node.GetNode``1
    - BehaviorTree.Node.GetNodes``1
    - BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
    - BehaviorTree.Node.Update
    - BehaviorTree.Node.Reset
    - BehaviorTree.Node.SetData(System.String,System.Object)
    - BehaviorTree.Node.OnInitialize
    - BehaviorTree.Node.OnStart
    - BehaviorTree.Node.OnReset
    - BehaviorTree.Node.GetData(System.String)
    - BehaviorTree.Node.GetData``1(System.String)
    - BehaviorTree.Node.RemoveData(System.String)
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: NodeReflection.VisualNodeAttribute
      ctor: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      arguments:
      - type: System.String
        value: ''
      - type: System.String
        value: ''
      - type: System.Boolean
        value: true
      - type: System.String
        value: Custom
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: BehaviorTree.Sequence.OnUpdate
      commentId: M:BehaviorTree.Sequence.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: Sequence.OnUpdate()
        VB: Sequence.OnUpdate()
      qualifiedName:
        CSharp: BehaviorTree.Sequence.OnUpdate()
        VB: BehaviorTree.Sequence.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: BehaviorTree
      source:
        id: OnUpdate
        path: ''
        startLine: 520
      summary: "\nEvaluate the node\n"
      example: []
      syntax:
        content:
          CSharp: protected override NodeState OnUpdate()
          VB: Protected Overrides Function OnUpdate As NodeState
        return:
          type: BehaviorTree.NodeState
          description: 'Return FAILURE if a child node failed, RUNNING if a child is running after every evaluated node, SUCCESS if none of the child is running or failing '
      overload: BehaviorTree.Sequence.OnUpdate*
      overridden: BehaviorTree.Node.OnUpdate
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
- id: NodeReflection
  commentId: N:NodeReflection
  language: CSharp
  name:
    CSharp: NodeReflection
    VB: NodeReflection
  nameWithType:
    CSharp: NodeReflection
    VB: NodeReflection
  qualifiedName:
    CSharp: NodeReflection
    VB: NodeReflection
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NodeReflection.Engine
    commentId: T:NodeReflection.Engine
    language: CSharp
    name:
      CSharp: Engine
      VB: Engine
    nameWithType:
      CSharp: Engine
      VB: Engine
    qualifiedName:
      CSharp: NodeReflection.Engine
      VB: NodeReflection.Engine
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NodeReflection
    source:
      id: Engine
      path: ''
      startLine: 561
    summary: "\nProvides the metadata from the node types in the current assembly\n"
    example: []
    syntax:
      content:
        CSharp: public static class Engine
        VB: Public Module Engine
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NodeReflection.Engine.Metadata
      commentId: P:NodeReflection.Engine.Metadata
      language: CSharp
      name:
        CSharp: Metadata
        VB: Metadata
      nameWithType:
        CSharp: Engine.Metadata
        VB: Engine.Metadata
      qualifiedName:
        CSharp: NodeReflection.Engine.Metadata
        VB: NodeReflection.Engine.Metadata
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: Metadata
        path: ''
        startLine: 568
      summary: "\nGets the current nodes types&apos; metadata\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<string, NodeMetadata> Metadata { get; }
          VB: Public Shared ReadOnly Property Metadata As Dictionary(Of String, NodeMetadata)
        parameters: []
        return:
          type: Dictionary{System.String,NodeMetadata}
      overload: NodeReflection.Engine.Metadata*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: NodeReflection.Engine.GenerateTree(BehaviorTreeObject)
      commentId: M:NodeReflection.Engine.GenerateTree(BehaviorTreeObject)
      language: CSharp
      name:
        CSharp: GenerateTree(BehaviorTreeObject)
        VB: GenerateTree(BehaviorTreeObject)
      nameWithType:
        CSharp: Engine.GenerateTree(BehaviorTreeObject)
        VB: Engine.GenerateTree(BehaviorTreeObject)
      qualifiedName:
        CSharp: NodeReflection.Engine.GenerateTree(BehaviorTreeObject)
        VB: NodeReflection.Engine.GenerateTree(BehaviorTreeObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: GenerateTree
        path: ''
        startLine: 598
      summary: "\nGenerates tree from the scriptable object\n"
      example: []
      syntax:
        content:
          CSharp: public static Node GenerateTree(BehaviorTreeObject data)
          VB: Public Shared Function GenerateTree(data As BehaviorTreeObject) As Node
        parameters:
        - id: data
          type: BehaviorTreeObject
          description: ''
        return:
          type: Node
          description: ''
      overload: NodeReflection.Engine.GenerateTree*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodeReflection.Engine.GetPropertiesBool(System.String)
      commentId: M:NodeReflection.Engine.GetPropertiesBool(System.String)
      language: CSharp
      name:
        CSharp: GetPropertiesBool(String)
        VB: GetPropertiesBool(String)
      nameWithType:
        CSharp: Engine.GetPropertiesBool(String)
        VB: Engine.GetPropertiesBool(String)
      qualifiedName:
        CSharp: NodeReflection.Engine.GetPropertiesBool(System.String)
        VB: NodeReflection.Engine.GetPropertiesBool(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: GetPropertiesBool
        path: ''
        startLine: 608
      summary: "\nReturns the bool properties of the wanted node type\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<string, bool> GetPropertiesBool(string internalName)
          VB: Public Shared Function GetPropertiesBool(internalName As String) As Dictionary(Of String, Boolean)
        parameters:
        - id: internalName
          type: System.String
          description: Internal name of the node type
        return:
          type: Dictionary{System.String,System.Boolean}
          description: A dictionary of bool properties
      overload: NodeReflection.Engine.GetPropertiesBool*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodeReflection.Engine.GetPropertiesFloat(System.String)
      commentId: M:NodeReflection.Engine.GetPropertiesFloat(System.String)
      language: CSharp
      name:
        CSharp: GetPropertiesFloat(String)
        VB: GetPropertiesFloat(String)
      nameWithType:
        CSharp: Engine.GetPropertiesFloat(String)
        VB: Engine.GetPropertiesFloat(String)
      qualifiedName:
        CSharp: NodeReflection.Engine.GetPropertiesFloat(System.String)
        VB: NodeReflection.Engine.GetPropertiesFloat(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: GetPropertiesFloat
        path: ''
        startLine: 635
      summary: "\nReturns the float properties of the wanted node type\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<string, float> GetPropertiesFloat(string internalName)
          VB: Public Shared Function GetPropertiesFloat(internalName As String) As Dictionary(Of String, Single)
        parameters:
        - id: internalName
          type: System.String
          description: Internal name of the node type
        return:
          type: Dictionary{System.String,System.Single}
          description: A dictionary of float properties
      overload: NodeReflection.Engine.GetPropertiesFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodeReflection.Engine.GetPropertiesInt(System.String)
      commentId: M:NodeReflection.Engine.GetPropertiesInt(System.String)
      language: CSharp
      name:
        CSharp: GetPropertiesInt(String)
        VB: GetPropertiesInt(String)
      nameWithType:
        CSharp: Engine.GetPropertiesInt(String)
        VB: Engine.GetPropertiesInt(String)
      qualifiedName:
        CSharp: NodeReflection.Engine.GetPropertiesInt(System.String)
        VB: NodeReflection.Engine.GetPropertiesInt(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: GetPropertiesInt
        path: ''
        startLine: 662
      summary: "\nReturns the int properties of the wanted node type\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<string, int> GetPropertiesInt(string internalName)
          VB: Public Shared Function GetPropertiesInt(internalName As String) As Dictionary(Of String, Integer)
        parameters:
        - id: internalName
          type: System.String
          description: Internal name of the node type
        return:
          type: Dictionary{System.String,System.Int32}
          description: A dictionary of int properties
      overload: NodeReflection.Engine.GetPropertiesInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodeReflection.Engine.GetPropertiesString(System.String)
      commentId: M:NodeReflection.Engine.GetPropertiesString(System.String)
      language: CSharp
      name:
        CSharp: GetPropertiesString(String)
        VB: GetPropertiesString(String)
      nameWithType:
        CSharp: Engine.GetPropertiesString(String)
        VB: Engine.GetPropertiesString(String)
      qualifiedName:
        CSharp: NodeReflection.Engine.GetPropertiesString(System.String)
        VB: NodeReflection.Engine.GetPropertiesString(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: GetPropertiesString
        path: ''
        startLine: 689
      summary: "\nReturns the string properties of the wanted node type\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<string, string> GetPropertiesString(string internalName)
          VB: Public Shared Function GetPropertiesString(internalName As String) As Dictionary(Of String, String)
        parameters:
        - id: internalName
          type: System.String
          description: Internal name of the node type
        return:
          type: Dictionary{System.String,System.String}
          description: A dictionary of string properties
      overload: NodeReflection.Engine.GetPropertiesString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodeReflection.Engine.Update
      commentId: M:NodeReflection.Engine.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: Engine.Update()
        VB: Engine.Update()
      qualifiedName:
        CSharp: NodeReflection.Engine.Update()
        VB: NodeReflection.Engine.Update()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: Update
        path: ''
        startLine: 714
      summary: "\nUpdates the metadata\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<string, NodeMetadata> Update()
          VB: Public Shared Function Update As Dictionary(Of String, NodeMetadata)
        return:
          type: Dictionary{System.String,NodeMetadata}
      overload: NodeReflection.Engine.Update*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NodeReflection.ExposedInVisualEditorAttribute
    commentId: T:NodeReflection.ExposedInVisualEditorAttribute
    language: CSharp
    name:
      CSharp: ExposedInVisualEditorAttribute
      VB: ExposedInVisualEditorAttribute
    nameWithType:
      CSharp: ExposedInVisualEditorAttribute
      VB: ExposedInVisualEditorAttribute
    qualifiedName:
      CSharp: NodeReflection.ExposedInVisualEditorAttribute
      VB: NodeReflection.ExposedInVisualEditorAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NodeReflection
    source:
      id: ExposedInVisualEditorAttribute
      path: ''
      startLine: 792
    summary: "\nCustom attribute for node&apos;s properties\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Property)]

          public class ExposedInVisualEditorAttribute : Attribute, _Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Property)>

          Public Class ExposedInVisualEditorAttribute

              Inherits Attribute

              Implements _Attribute
    inheritance:
    - System.Object
    - System.Attribute
    implements:
    - System.Runtime.InteropServices._Attribute
    inheritedMembers:
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetHashCode
    - System.Attribute.Match(System.Object)
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    - System.Attribute.TypeId
    - System.Object.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 128
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
      commentId: P:NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
      language: CSharp
      name:
        CSharp: DefaultValue
        VB: DefaultValue
      nameWithType:
        CSharp: ExposedInVisualEditorAttribute.DefaultValue
        VB: ExposedInVisualEditorAttribute.DefaultValue
      qualifiedName:
        CSharp: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
        VB: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: DefaultValue
        path: ''
        startLine: 801
      summary: "\nGets the default value of the property\n"
      example: []
      syntax:
        content:
          CSharp: public object DefaultValue { get; }
          VB: Public ReadOnly Property DefaultValue As Object
        parameters: []
        return:
          type: System.Object
      overload: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.ExposedInVisualEditorAttribute.Name
      commentId: P:NodeReflection.ExposedInVisualEditorAttribute.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: ExposedInVisualEditorAttribute.Name
        VB: ExposedInVisualEditorAttribute.Name
      qualifiedName:
        CSharp: NodeReflection.ExposedInVisualEditorAttribute.Name
        VB: NodeReflection.ExposedInVisualEditorAttribute.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: Name
        path: ''
        startLine: 806
      summary: "\nGets the name of the node\n"
      example: []
      syntax:
        content:
          CSharp: public string Name { get; }
          VB: Public ReadOnly Property Name As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.ExposedInVisualEditorAttribute.Name*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
      commentId: M:NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
      language: CSharp
      name:
        CSharp: ExposedInVisualEditorAttribute(String, Object)
        VB: ExposedInVisualEditorAttribute(String, Object)
      nameWithType:
        CSharp: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute(String, Object)
        VB: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute(String, Object)
      qualifiedName:
        CSharp: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute(System.String, System.Object)
        VB: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute(System.String, System.Object)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: .ctor
        path: ''
        startLine: 816
      summary: "\nClass constructor\n"
      example: []
      syntax:
        content:
          CSharp: public ExposedInVisualEditorAttribute(string name = "", object defaultValue = null)
          VB: Public Sub New(name As String = "", defaultValue As Object = Nothing)
        parameters:
        - id: name
          type: System.String
          description: Property name, for display purposes
        - id: defaultValue
          type: System.Object
      overload: NodeReflection.ExposedInVisualEditorAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: NodeReflection.VisualNodeAttribute
    commentId: T:NodeReflection.VisualNodeAttribute
    language: CSharp
    name:
      CSharp: VisualNodeAttribute
      VB: VisualNodeAttribute
    nameWithType:
      CSharp: VisualNodeAttribute
      VB: VisualNodeAttribute
    qualifiedName:
      CSharp: NodeReflection.VisualNodeAttribute
      VB: NodeReflection.VisualNodeAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NodeReflection
    source:
      id: VisualNodeAttribute
      path: ''
      startLine: 833
    summary: "\nCustom attribute for custom node\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]

          public class VisualNodeAttribute : Attribute, _Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Class Or AttributeTargets.Struct)>

          Public Class VisualNodeAttribute

              Inherits Attribute

              Implements _Attribute
    inheritance:
    - System.Object
    - System.Attribute
    implements:
    - System.Runtime.InteropServices._Attribute
    inheritedMembers:
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetHashCode
    - System.Attribute.Match(System.Object)
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    - System.Attribute.TypeId
    - System.Object.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 12
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: NodeReflection.VisualNodeAttribute.Description
      commentId: P:NodeReflection.VisualNodeAttribute.Description
      language: CSharp
      name:
        CSharp: Description
        VB: Description
      nameWithType:
        CSharp: VisualNodeAttribute.Description
        VB: VisualNodeAttribute.Description
      qualifiedName:
        CSharp: NodeReflection.VisualNodeAttribute.Description
        VB: NodeReflection.VisualNodeAttribute.Description
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: Description
        path: ''
        startLine: 842
      summary: "\nGets the description of the node\n"
      example: []
      syntax:
        content:
          CSharp: public string Description { get; }
          VB: Public ReadOnly Property Description As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.VisualNodeAttribute.Description*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.VisualNodeAttribute.DisplayAsBlock
      commentId: P:NodeReflection.VisualNodeAttribute.DisplayAsBlock
      language: CSharp
      name:
        CSharp: DisplayAsBlock
        VB: DisplayAsBlock
      nameWithType:
        CSharp: VisualNodeAttribute.DisplayAsBlock
        VB: VisualNodeAttribute.DisplayAsBlock
      qualifiedName:
        CSharp: NodeReflection.VisualNodeAttribute.DisplayAsBlock
        VB: NodeReflection.VisualNodeAttribute.DisplayAsBlock
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: DisplayAsBlock
        path: ''
        startLine: 847
      summary: "\nGets if the children should be displayed as a block\n"
      example: []
      syntax:
        content:
          CSharp: public bool DisplayAsBlock { get; }
          VB: Public ReadOnly Property DisplayAsBlock As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: NodeReflection.VisualNodeAttribute.DisplayAsBlock*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.VisualNodeAttribute.Name
      commentId: P:NodeReflection.VisualNodeAttribute.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: VisualNodeAttribute.Name
        VB: VisualNodeAttribute.Name
      qualifiedName:
        CSharp: NodeReflection.VisualNodeAttribute.Name
        VB: NodeReflection.VisualNodeAttribute.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: Name
        path: ''
        startLine: 852
      summary: "\nGets the name of the node\n"
      example: []
      syntax:
        content:
          CSharp: public string Name { get; }
          VB: Public ReadOnly Property Name As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.VisualNodeAttribute.Name*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.VisualNodeAttribute.Path
      commentId: P:NodeReflection.VisualNodeAttribute.Path
      language: CSharp
      name:
        CSharp: Path
        VB: Path
      nameWithType:
        CSharp: VisualNodeAttribute.Path
        VB: VisualNodeAttribute.Path
      qualifiedName:
        CSharp: NodeReflection.VisualNodeAttribute.Path
        VB: NodeReflection.VisualNodeAttribute.Path
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: Path
        path: ''
        startLine: 857
      summary: "\nGets the path of the node category\n"
      example: []
      syntax:
        content:
          CSharp: public string Path { get; }
          VB: Public ReadOnly Property Path As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.VisualNodeAttribute.Path*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      commentId: M:NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
      language: CSharp
      name:
        CSharp: VisualNodeAttribute(String, String, Boolean, String)
        VB: VisualNodeAttribute(String, String, Boolean, String)
      nameWithType:
        CSharp: VisualNodeAttribute.VisualNodeAttribute(String, String, Boolean, String)
        VB: VisualNodeAttribute.VisualNodeAttribute(String, String, Boolean, String)
      qualifiedName:
        CSharp: NodeReflection.VisualNodeAttribute.VisualNodeAttribute(System.String, System.String, System.Boolean, System.String)
        VB: NodeReflection.VisualNodeAttribute.VisualNodeAttribute(System.String, System.String, System.Boolean, System.String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection
      source:
        id: .ctor
        path: ''
        startLine: 870
      summary: "\nClass constructor\n"
      example: []
      syntax:
        content:
          CSharp: public VisualNodeAttribute(string name = "", string description = "", bool displayAsBlock = false, string path = "Custom")
          VB: Public Sub New(name As String = "", description As String = "", displayAsBlock As Boolean = False, path As String = "Custom")
        parameters:
        - id: name
          type: System.String
          description: Node name, for display purposes
        - id: description
          type: System.String
          description: Node description
        - id: displayAsBlock
          type: System.Boolean
          description: Indicates if the children should be displayed as a block
        - id: path
          type: System.String
          description: Path of the node in the editor
      overload: NodeReflection.VisualNodeAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: NodeReflection.Data
  commentId: N:NodeReflection.Data
  language: CSharp
  name:
    CSharp: NodeReflection.Data
    VB: NodeReflection.Data
  nameWithType:
    CSharp: NodeReflection.Data
    VB: NodeReflection.Data
  qualifiedName:
    CSharp: NodeReflection.Data
    VB: NodeReflection.Data
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NodeReflection.Data.NodeMetadata
    commentId: T:NodeReflection.Data.NodeMetadata
    language: CSharp
    name:
      CSharp: NodeMetadata
      VB: NodeMetadata
    nameWithType:
      CSharp: NodeMetadata
      VB: NodeMetadata
    qualifiedName:
      CSharp: NodeReflection.Data.NodeMetadata
      VB: NodeReflection.Data.NodeMetadata
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: NodeReflection.Data
    source:
      id: NodeMetadata
      path: ''
      startLine: 891
    summary: "\nContains all the metadata of a node type\n"
    example: []
    syntax:
      content:
        CSharp: public struct NodeMetadata
        VB: Public Structure NodeMetadata
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: NodeReflection.Data.NodeMetadata.Description
      commentId: P:NodeReflection.Data.NodeMetadata.Description
      language: CSharp
      name:
        CSharp: Description
        VB: Description
      nameWithType:
        CSharp: NodeMetadata.Description
        VB: NodeMetadata.Description
      qualifiedName:
        CSharp: NodeReflection.Data.NodeMetadata.Description
        VB: NodeReflection.Data.NodeMetadata.Description
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Data
      source:
        id: Description
        path: ''
        startLine: 898
      summary: "\nGets the description of the node\n"
      example: []
      syntax:
        content:
          CSharp: public string Description { readonly get; }
          VB: Public ReadOnly Property Description As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.Data.NodeMetadata.Description*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.Data.NodeMetadata.DisplayAsBlock
      commentId: P:NodeReflection.Data.NodeMetadata.DisplayAsBlock
      language: CSharp
      name:
        CSharp: DisplayAsBlock
        VB: DisplayAsBlock
      nameWithType:
        CSharp: NodeMetadata.DisplayAsBlock
        VB: NodeMetadata.DisplayAsBlock
      qualifiedName:
        CSharp: NodeReflection.Data.NodeMetadata.DisplayAsBlock
        VB: NodeReflection.Data.NodeMetadata.DisplayAsBlock
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Data
      source:
        id: DisplayAsBlock
        path: ''
        startLine: 903
      summary: "\nGets if the children should be displayed as a block\n"
      example: []
      syntax:
        content:
          CSharp: public bool DisplayAsBlock { readonly get; }
          VB: Public ReadOnly Property DisplayAsBlock As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: NodeReflection.Data.NodeMetadata.DisplayAsBlock*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.Data.NodeMetadata.InternalName
      commentId: P:NodeReflection.Data.NodeMetadata.InternalName
      language: CSharp
      name:
        CSharp: InternalName
        VB: InternalName
      nameWithType:
        CSharp: NodeMetadata.InternalName
        VB: NodeMetadata.InternalName
      qualifiedName:
        CSharp: NodeReflection.Data.NodeMetadata.InternalName
        VB: NodeReflection.Data.NodeMetadata.InternalName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Data
      source:
        id: InternalName
        path: ''
        startLine: 908
      summary: "\nGets the internal name of the node\n"
      example: []
      syntax:
        content:
          CSharp: public string InternalName { readonly get; }
          VB: Public ReadOnly Property InternalName As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.Data.NodeMetadata.InternalName*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.Data.NodeMetadata.Name
      commentId: P:NodeReflection.Data.NodeMetadata.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: NodeMetadata.Name
        VB: NodeMetadata.Name
      qualifiedName:
        CSharp: NodeReflection.Data.NodeMetadata.Name
        VB: NodeReflection.Data.NodeMetadata.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Data
      source:
        id: Name
        path: ''
        startLine: 913
      summary: "\nGets the name of the node\n"
      example: []
      syntax:
        content:
          CSharp: public string Name { readonly get; }
          VB: Public ReadOnly Property Name As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.Data.NodeMetadata.Name*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.Data.NodeMetadata.NameToDefaultValue
      commentId: P:NodeReflection.Data.NodeMetadata.NameToDefaultValue
      language: CSharp
      name:
        CSharp: NameToDefaultValue
        VB: NameToDefaultValue
      nameWithType:
        CSharp: NodeMetadata.NameToDefaultValue
        VB: NodeMetadata.NameToDefaultValue
      qualifiedName:
        CSharp: NodeReflection.Data.NodeMetadata.NameToDefaultValue
        VB: NodeReflection.Data.NodeMetadata.NameToDefaultValue
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Data
      source:
        id: NameToDefaultValue
        path: ''
        startLine: 918
      summary: "\nGets the dictionary of exposed properties&apos; default values\n"
      example: []
      syntax:
        content:
          CSharp: public Dictionary<string, object> NameToDefaultValue { readonly get; }
          VB: Public ReadOnly Property NameToDefaultValue As Dictionary(Of String, Object)
        parameters: []
        return:
          type: Dictionary{System.String,System.Object}
      overload: NodeReflection.Data.NodeMetadata.NameToDefaultValue*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.Data.NodeMetadata.NameToType
      commentId: P:NodeReflection.Data.NodeMetadata.NameToType
      language: CSharp
      name:
        CSharp: NameToType
        VB: NameToType
      nameWithType:
        CSharp: NodeMetadata.NameToType
        VB: NodeMetadata.NameToType
      qualifiedName:
        CSharp: NodeReflection.Data.NodeMetadata.NameToType
        VB: NodeReflection.Data.NodeMetadata.NameToType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Data
      source:
        id: NameToType
        path: ''
        startLine: 923
      summary: "\nGets the dictionary of exposed properties&apos; types\n"
      example: []
      syntax:
        content:
          CSharp: public Dictionary<string, ExposedPropertyTypeEnum> NameToType { readonly get; }
          VB: Public ReadOnly Property NameToType As Dictionary(Of String, ExposedPropertyTypeEnum)
        parameters: []
        return:
          type: Dictionary{System.String,ExposedPropertyTypeEnum}
      overload: NodeReflection.Data.NodeMetadata.NameToType*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.Data.NodeMetadata.NodeType
      commentId: P:NodeReflection.Data.NodeMetadata.NodeType
      language: CSharp
      name:
        CSharp: NodeType
        VB: NodeType
      nameWithType:
        CSharp: NodeMetadata.NodeType
        VB: NodeMetadata.NodeType
      qualifiedName:
        CSharp: NodeReflection.Data.NodeMetadata.NodeType
        VB: NodeReflection.Data.NodeMetadata.NodeType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Data
      source:
        id: NodeType
        path: ''
        startLine: 928
      summary: "\nGets the type of node to instantiate\n"
      example: []
      syntax:
        content:
          CSharp: public Type NodeType { readonly get; }
          VB: Public ReadOnly Property NodeType As Type
        parameters: []
        return:
          type: System.Type
      overload: NodeReflection.Data.NodeMetadata.NodeType*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.Data.NodeMetadata.Path
      commentId: P:NodeReflection.Data.NodeMetadata.Path
      language: CSharp
      name:
        CSharp: Path
        VB: Path
      nameWithType:
        CSharp: NodeMetadata.Path
        VB: NodeMetadata.Path
      qualifiedName:
        CSharp: NodeReflection.Data.NodeMetadata.Path
        VB: NodeReflection.Data.NodeMetadata.Path
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Data
      source:
        id: Path
        path: ''
        startLine: 933
      summary: "\nGets the path of the node category\n"
      example: []
      syntax:
        content:
          CSharp: public string Path { readonly get; }
          VB: Public ReadOnly Property Path As String
        parameters: []
        return:
          type: System.String
      overload: NodeReflection.Data.NodeMetadata.Path*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: NodeReflection.Data.NodeMetadata.#ctor(NodeReflection.VisualNodeAttribute,System.Type,Dictionary{System.String,ExposedPropertyTypeEnum},Dictionary{System.String,System.Object})
      commentId: M:NodeReflection.Data.NodeMetadata.#ctor(NodeReflection.VisualNodeAttribute,System.Type,Dictionary{System.String,ExposedPropertyTypeEnum},Dictionary{System.String,System.Object})
      language: CSharp
      name:
        CSharp: NodeMetadata(VisualNodeAttribute, Type, Dictionary<String, ExposedPropertyTypeEnum>, Dictionary<String, Object>)
        VB: NodeMetadata(VisualNodeAttribute, Type, Dictionary(Of String, ExposedPropertyTypeEnum), Dictionary(Of String, Object))
      nameWithType:
        CSharp: NodeMetadata.NodeMetadata(VisualNodeAttribute, Type, Dictionary<String, ExposedPropertyTypeEnum>, Dictionary<String, Object>)
        VB: NodeMetadata.NodeMetadata(VisualNodeAttribute, Type, Dictionary(Of String, ExposedPropertyTypeEnum), Dictionary(Of String, Object))
      qualifiedName:
        CSharp: NodeReflection.Data.NodeMetadata.NodeMetadata(NodeReflection.VisualNodeAttribute, System.Type, Dictionary<System.String, ExposedPropertyTypeEnum>, Dictionary<System.String, System.Object>)
        VB: NodeReflection.Data.NodeMetadata.NodeMetadata(NodeReflection.VisualNodeAttribute, System.Type, Dictionary(Of System.String, ExposedPropertyTypeEnum), Dictionary(Of System.String, System.Object))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Data
      source:
        id: .ctor
        path: ''
        startLine: 945
      summary: "\nClass constructor\n"
      example: []
      syntax:
        content:
          CSharp: public NodeMetadata(VisualNodeAttribute nodeData, Type classType, Dictionary<string, ExposedPropertyTypeEnum> nameToType, Dictionary<string, object> nameToDefaultValue)
          VB: Public Sub New(nodeData As VisualNodeAttribute, classType As Type, nameToType As Dictionary(Of String, ExposedPropertyTypeEnum), nameToDefaultValue As Dictionary(Of String, Object))
        parameters:
        - id: nodeData
          type: NodeReflection.VisualNodeAttribute
          description: Contains display information
        - id: classType
          type: System.Type
          description: Node type to instantiate
        - id: nameToType
          type: Dictionary{System.String,ExposedPropertyTypeEnum}
          description: Properties of the node
        - id: nameToDefaultValue
          type: Dictionary{System.String,System.Object}
      overload: NodeReflection.Data.NodeMetadata.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: NodeReflection.Enumerations
  commentId: N:NodeReflection.Enumerations
  language: CSharp
  name:
    CSharp: NodeReflection.Enumerations
    VB: NodeReflection.Enumerations
  nameWithType:
    CSharp: NodeReflection.Enumerations
    VB: NodeReflection.Enumerations
  qualifiedName:
    CSharp: NodeReflection.Enumerations
    VB: NodeReflection.Enumerations
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NodeReflection.Enumerations.ExposedPropertyTypeEnum
    commentId: T:NodeReflection.Enumerations.ExposedPropertyTypeEnum
    language: CSharp
    name:
      CSharp: ExposedPropertyTypeEnum
      VB: ExposedPropertyTypeEnum
    nameWithType:
      CSharp: ExposedPropertyTypeEnum
      VB: ExposedPropertyTypeEnum
    qualifiedName:
      CSharp: NodeReflection.Enumerations.ExposedPropertyTypeEnum
      VB: NodeReflection.Enumerations.ExposedPropertyTypeEnum
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: NodeReflection.Enumerations
    source:
      id: ExposedPropertyTypeEnum
      path: ''
      startLine: 966
    summary: "\nRepresents the supported types for the exposed properties\n"
    example: []
    syntax:
      content:
        CSharp: public enum ExposedPropertyTypeEnum
        VB: Public Enum ExposedPropertyTypeEnum
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: NodeReflection.Enumerations.ExposedPropertyTypeEnum.NONE
      commentId: F:NodeReflection.Enumerations.ExposedPropertyTypeEnum.NONE
      language: CSharp
      name:
        CSharp: NONE
        VB: NONE
      nameWithType:
        CSharp: ExposedPropertyTypeEnum.NONE
        VB: ExposedPropertyTypeEnum.NONE
      qualifiedName:
        CSharp: NodeReflection.Enumerations.ExposedPropertyTypeEnum.NONE
        VB: NodeReflection.Enumerations.ExposedPropertyTypeEnum.NONE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Enumerations
      source:
        id: NONE
        path: ''
        startLine: 968
      syntax:
        content:
          CSharp: NONE = 0
          VB: NONE = 0
        return:
          type: NodeReflection.Enumerations.ExposedPropertyTypeEnum
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: NodeReflection.Enumerations.ExposedPropertyTypeEnum.BOOL
      commentId: F:NodeReflection.Enumerations.ExposedPropertyTypeEnum.BOOL
      language: CSharp
      name:
        CSharp: BOOL
        VB: BOOL
      nameWithType:
        CSharp: ExposedPropertyTypeEnum.BOOL
        VB: ExposedPropertyTypeEnum.BOOL
      qualifiedName:
        CSharp: NodeReflection.Enumerations.ExposedPropertyTypeEnum.BOOL
        VB: NodeReflection.Enumerations.ExposedPropertyTypeEnum.BOOL
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Enumerations
      source:
        id: BOOL
        path: ''
        startLine: 969
      syntax:
        content:
          CSharp: BOOL = 1
          VB: BOOL = 1
        return:
          type: NodeReflection.Enumerations.ExposedPropertyTypeEnum
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: NodeReflection.Enumerations.ExposedPropertyTypeEnum.INT
      commentId: F:NodeReflection.Enumerations.ExposedPropertyTypeEnum.INT
      language: CSharp
      name:
        CSharp: INT
        VB: INT
      nameWithType:
        CSharp: ExposedPropertyTypeEnum.INT
        VB: ExposedPropertyTypeEnum.INT
      qualifiedName:
        CSharp: NodeReflection.Enumerations.ExposedPropertyTypeEnum.INT
        VB: NodeReflection.Enumerations.ExposedPropertyTypeEnum.INT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Enumerations
      source:
        id: INT
        path: ''
        startLine: 970
      syntax:
        content:
          CSharp: INT = 2
          VB: INT = 2
        return:
          type: NodeReflection.Enumerations.ExposedPropertyTypeEnum
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: NodeReflection.Enumerations.ExposedPropertyTypeEnum.FLOAT
      commentId: F:NodeReflection.Enumerations.ExposedPropertyTypeEnum.FLOAT
      language: CSharp
      name:
        CSharp: FLOAT
        VB: FLOAT
      nameWithType:
        CSharp: ExposedPropertyTypeEnum.FLOAT
        VB: ExposedPropertyTypeEnum.FLOAT
      qualifiedName:
        CSharp: NodeReflection.Enumerations.ExposedPropertyTypeEnum.FLOAT
        VB: NodeReflection.Enumerations.ExposedPropertyTypeEnum.FLOAT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Enumerations
      source:
        id: FLOAT
        path: ''
        startLine: 971
      syntax:
        content:
          CSharp: FLOAT = 3
          VB: FLOAT = 3
        return:
          type: NodeReflection.Enumerations.ExposedPropertyTypeEnum
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: NodeReflection.Enumerations.ExposedPropertyTypeEnum.STRING
      commentId: F:NodeReflection.Enumerations.ExposedPropertyTypeEnum.STRING
      language: CSharp
      name:
        CSharp: STRING
        VB: STRING
      nameWithType:
        CSharp: ExposedPropertyTypeEnum.STRING
        VB: ExposedPropertyTypeEnum.STRING
      qualifiedName:
        CSharp: NodeReflection.Enumerations.ExposedPropertyTypeEnum.STRING
        VB: NodeReflection.Enumerations.ExposedPropertyTypeEnum.STRING
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Enumerations
      source:
        id: STRING
        path: ''
        startLine: 972
      syntax:
        content:
          CSharp: STRING = 4
          VB: STRING = 4
        return:
          type: NodeReflection.Enumerations.ExposedPropertyTypeEnum
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
- id: NodeReflection.Utils
  commentId: N:NodeReflection.Utils
  language: CSharp
  name:
    CSharp: NodeReflection.Utils
    VB: NodeReflection.Utils
  nameWithType:
    CSharp: NodeReflection.Utils
    VB: NodeReflection.Utils
  qualifiedName:
    CSharp: NodeReflection.Utils
    VB: NodeReflection.Utils
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NodeReflection.Utils.Reflection
    commentId: T:NodeReflection.Utils.Reflection
    language: CSharp
    name:
      CSharp: Reflection
      VB: Reflection
    nameWithType:
      CSharp: Reflection
      VB: Reflection
    qualifiedName:
      CSharp: NodeReflection.Utils.Reflection
      VB: NodeReflection.Utils.Reflection
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NodeReflection.Utils
    source:
      id: Reflection
      path: ''
      startLine: 986
    summary: "\nUtilitary reflection methods for the node reflection engine\n"
    example: []
    syntax:
      content:
        CSharp: public static class Reflection
        VB: Public Module Reflection
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NodeReflection.Utils.Reflection.GetExposedAttribute(PropertyInfo)
      commentId: M:NodeReflection.Utils.Reflection.GetExposedAttribute(PropertyInfo)
      language: CSharp
      name:
        CSharp: GetExposedAttribute(PropertyInfo)
        VB: GetExposedAttribute(PropertyInfo)
      nameWithType:
        CSharp: Reflection.GetExposedAttribute(PropertyInfo)
        VB: Reflection.GetExposedAttribute(PropertyInfo)
      qualifiedName:
        CSharp: NodeReflection.Utils.Reflection.GetExposedAttribute(PropertyInfo)
        VB: NodeReflection.Utils.Reflection.GetExposedAttribute(PropertyInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Utils
      source:
        id: GetExposedAttribute
        path: ''
        startLine: 1002
      summary: "\nGets the ExposedAttribute of the property type\n"
      example: []
      syntax:
        content:
          CSharp: public static ExposedInVisualEditorAttribute GetExposedAttribute(PropertyInfo propertyType)
          VB: Public Shared Function GetExposedAttribute(propertyType As PropertyInfo) As ExposedInVisualEditorAttribute
        parameters:
        - id: propertyType
          type: PropertyInfo
          description: Property to check
        return:
          type: NodeReflection.ExposedInVisualEditorAttribute
          description: An ExposedAttribute
      overload: NodeReflection.Utils.Reflection.GetExposedAttribute*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodeReflection.Utils.Reflection.GetExposedProperties(System.Type)
      commentId: M:NodeReflection.Utils.Reflection.GetExposedProperties(System.Type)
      language: CSharp
      name:
        CSharp: GetExposedProperties(Type)
        VB: GetExposedProperties(Type)
      nameWithType:
        CSharp: Reflection.GetExposedProperties(Type)
        VB: Reflection.GetExposedProperties(Type)
      qualifiedName:
        CSharp: NodeReflection.Utils.Reflection.GetExposedProperties(System.Type)
        VB: NodeReflection.Utils.Reflection.GetExposedProperties(System.Type)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Utils
      source:
        id: GetExposedProperties
        path: ''
        startLine: 1012
      summary: "\nReturns an enumerable holding exposed properties in the given class\n"
      example: []
      syntax:
        content:
          CSharp: public static IEnumerable<PropertyInfo> GetExposedProperties(Type classType)
          VB: Public Shared Function GetExposedProperties(classType As Type) As IEnumerable(Of PropertyInfo)
        parameters:
        - id: classType
          type: System.Type
          description: Class to check
        return:
          type: IEnumerable{PropertyInfo}
          description: An enumerable of properties
      overload: NodeReflection.Utils.Reflection.GetExposedProperties*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodeReflection.Utils.Reflection.GetNodeAttribute(System.Type)
      commentId: M:NodeReflection.Utils.Reflection.GetNodeAttribute(System.Type)
      language: CSharp
      name:
        CSharp: GetNodeAttribute(Type)
        VB: GetNodeAttribute(Type)
      nameWithType:
        CSharp: Reflection.GetNodeAttribute(Type)
        VB: Reflection.GetNodeAttribute(Type)
      qualifiedName:
        CSharp: NodeReflection.Utils.Reflection.GetNodeAttribute(System.Type)
        VB: NodeReflection.Utils.Reflection.GetNodeAttribute(System.Type)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Utils
      source:
        id: GetNodeAttribute
        path: ''
        startLine: 1024
      summary: "\nGets the NodeAttribute of the type\n"
      example: []
      syntax:
        content:
          CSharp: public static VisualNodeAttribute GetNodeAttribute(Type classType)
          VB: Public Shared Function GetNodeAttribute(classType As Type) As VisualNodeAttribute
        parameters:
        - id: classType
          type: System.Type
          description: Class to check
        return:
          type: NodeReflection.VisualNodeAttribute
          description: A NodeAttribute
      overload: NodeReflection.Utils.Reflection.GetNodeAttribute*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodeReflection.Utils.Reflection.GetNodeClasses(Assembly)
      commentId: M:NodeReflection.Utils.Reflection.GetNodeClasses(Assembly)
      language: CSharp
      name:
        CSharp: GetNodeClasses(Assembly)
        VB: GetNodeClasses(Assembly)
      nameWithType:
        CSharp: Reflection.GetNodeClasses(Assembly)
        VB: Reflection.GetNodeClasses(Assembly)
      qualifiedName:
        CSharp: NodeReflection.Utils.Reflection.GetNodeClasses(Assembly)
        VB: NodeReflection.Utils.Reflection.GetNodeClasses(Assembly)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Utils
      source:
        id: GetNodeClasses
        path: ''
        startLine: 1034
      summary: "\nReturns an enumerable holding node classes in the given assembly\n"
      example: []
      syntax:
        content:
          CSharp: public static IEnumerable<Type> GetNodeClasses(Assembly assembly)
          VB: Public Shared Function GetNodeClasses(assembly As Assembly) As IEnumerable(Of Type)
        parameters:
        - id: assembly
          type: Assembly
          description: Assembly to check
        return:
          type: IEnumerable{System.Type}
          description: An enumerable of class types
      overload: NodeReflection.Utils.Reflection.GetNodeClasses*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodeReflection.Utils.Reflection.GetNodeClasses
      commentId: M:NodeReflection.Utils.Reflection.GetNodeClasses
      language: CSharp
      name:
        CSharp: GetNodeClasses()
        VB: GetNodeClasses()
      nameWithType:
        CSharp: Reflection.GetNodeClasses()
        VB: Reflection.GetNodeClasses()
      qualifiedName:
        CSharp: NodeReflection.Utils.Reflection.GetNodeClasses()
        VB: NodeReflection.Utils.Reflection.GetNodeClasses()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Utils
      source:
        id: GetNodeClasses
        path: ''
        startLine: 1045
      summary: "\nReturns an enumerable holding node classes in every assembly\n"
      example: []
      syntax:
        content:
          CSharp: public static IEnumerable<Type> GetNodeClasses()
          VB: Public Shared Function GetNodeClasses As IEnumerable(Of Type)
        return:
          type: IEnumerable{System.Type}
          description: An enumerable of class types
      overload: NodeReflection.Utils.Reflection.GetNodeClasses*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NodeReflection.Utils.StateGeneration
    commentId: T:NodeReflection.Utils.StateGeneration
    language: CSharp
    name:
      CSharp: StateGeneration
      VB: StateGeneration
    nameWithType:
      CSharp: StateGeneration
      VB: StateGeneration
    qualifiedName:
      CSharp: NodeReflection.Utils.StateGeneration
      VB: NodeReflection.Utils.StateGeneration
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NodeReflection.Utils
    source:
      id: StateGeneration
      path: ''
      startLine: 1070
    summary: "\nUtilitary state generation methods for the node reflection engine\n"
    example: []
    syntax:
      content:
        CSharp: public static class StateGeneration
        VB: Public Module StateGeneration
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects(Assembly)
      commentId: M:NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects(Assembly)
      language: CSharp
      name:
        CSharp: GetNodeMetadataObjects(Assembly)
        VB: GetNodeMetadataObjects(Assembly)
      nameWithType:
        CSharp: StateGeneration.GetNodeMetadataObjects(Assembly)
        VB: StateGeneration.GetNodeMetadataObjects(Assembly)
      qualifiedName:
        CSharp: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects(Assembly)
        VB: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects(Assembly)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Utils
      source:
        id: GetNodeMetadataObjects
        path: ''
        startLine: 1088
      summary: "\nInitializes and returns all node metadata objects by internal name in the given assembly\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<string, NodeMetadata> GetNodeMetadataObjects(Assembly assembly)
          VB: Public Shared Function GetNodeMetadataObjects(assembly As Assembly) As Dictionary(Of String, NodeMetadata)
        parameters:
        - id: assembly
          type: Assembly
          description: Assembly to check
        return:
          type: Dictionary{System.String,NodeMetadata}
          description: A dictionary of string to NodeMetadata
      overload: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects
      commentId: M:NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects
      language: CSharp
      name:
        CSharp: GetNodeMetadataObjects()
        VB: GetNodeMetadataObjects()
      nameWithType:
        CSharp: StateGeneration.GetNodeMetadataObjects()
        VB: StateGeneration.GetNodeMetadataObjects()
      qualifiedName:
        CSharp: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects()
        VB: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NodeReflection.Utils
      source:
        id: GetNodeMetadataObjects
        path: ''
        startLine: 1100
      summary: "\nInitializes and returns all node metadata objects by internal name in the given assembly\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<string, NodeMetadata> GetNodeMetadataObjects()
          VB: Public Shared Function GetNodeMetadataObjects As Dictionary(Of String, NodeMetadata)
        return:
          type: Dictionary{System.String,NodeMetadata}
          description: A dictionary of string to NodeMetadata
      overload: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  BehaviorTree:
    name:
      CSharp:
      - name: BehaviorTree
        nameWithType: BehaviorTree
        qualifiedName: BehaviorTree
      VB:
      - name: BehaviorTree
        nameWithType: BehaviorTree
        qualifiedName: BehaviorTree
    isDefinition: true
    commentId: N:BehaviorTree
  BehaviorTree.Node:
    name:
      CSharp:
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      VB:
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
    isDefinition: true
    parent: BehaviorTree
    commentId: T:BehaviorTree.Node
  BehaviorTree.BehaviorTreeAgent.Root*:
    name:
      CSharp:
      - id: BehaviorTree.BehaviorTreeAgent.Root*
        name: Root
        nameWithType: BehaviorTreeAgent.Root
        qualifiedName: BehaviorTree.BehaviorTreeAgent.Root
      VB:
      - id: BehaviorTree.BehaviorTreeAgent.Root*
        name: Root
        nameWithType: BehaviorTreeAgent.Root
        qualifiedName: BehaviorTree.BehaviorTreeAgent.Root
    isDefinition: true
    commentId: Overload:BehaviorTree.BehaviorTreeAgent.Root
  BehaviorTree.BehaviorTreeAgent.SetupTree*:
    name:
      CSharp:
      - id: BehaviorTree.BehaviorTreeAgent.SetupTree*
        name: SetupTree
        nameWithType: BehaviorTreeAgent.SetupTree
        qualifiedName: BehaviorTree.BehaviorTreeAgent.SetupTree
      VB:
      - id: BehaviorTree.BehaviorTreeAgent.SetupTree*
        name: SetupTree
        nameWithType: BehaviorTreeAgent.SetupTree
        qualifiedName: BehaviorTree.BehaviorTreeAgent.SetupTree
    isDefinition: true
    commentId: Overload:BehaviorTree.BehaviorTreeAgent.SetupTree
  BehaviorTree.BehaviorTreeAgent:
    name:
      CSharp:
      - id: BehaviorTree.BehaviorTreeAgent
        name: BehaviorTreeAgent
        nameWithType: BehaviorTreeAgent
        qualifiedName: BehaviorTree.BehaviorTreeAgent
      VB:
      - id: BehaviorTree.BehaviorTreeAgent
        name: BehaviorTreeAgent
        nameWithType: BehaviorTreeAgent
        qualifiedName: BehaviorTree.BehaviorTreeAgent
    isDefinition: true
    parent: BehaviorTree
    commentId: T:BehaviorTree.BehaviorTreeAgent
  BehaviorTree.Node.Agent:
    name:
      CSharp:
      - id: BehaviorTree.Node.Agent
        name: Agent
        nameWithType: Node.Agent
        qualifiedName: BehaviorTree.Node.Agent
      VB:
      - id: BehaviorTree.Node.Agent
        name: Agent
        nameWithType: Node.Agent
        qualifiedName: BehaviorTree.Node.Agent
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: P:BehaviorTree.Node.Agent
  BehaviorTree.Node.Children:
    name:
      CSharp:
      - id: BehaviorTree.Node.Children
        name: Children
        nameWithType: Node.Children
        qualifiedName: BehaviorTree.Node.Children
      VB:
      - id: BehaviorTree.Node.Children
        name: Children
        nameWithType: Node.Children
        qualifiedName: BehaviorTree.Node.Children
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: P:BehaviorTree.Node.Children
  BehaviorTree.Node.Parent:
    name:
      CSharp:
      - id: BehaviorTree.Node.Parent
        name: Parent
        nameWithType: Node.Parent
        qualifiedName: BehaviorTree.Node.Parent
      VB:
      - id: BehaviorTree.Node.Parent
        name: Parent
        nameWithType: Node.Parent
        qualifiedName: BehaviorTree.Node.Parent
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: P:BehaviorTree.Node.Parent
  BehaviorTree.Node.Root:
    name:
      CSharp:
      - id: BehaviorTree.Node.Root
        name: Root
        nameWithType: Node.Root
        qualifiedName: BehaviorTree.Node.Root
      VB:
      - id: BehaviorTree.Node.Root
        name: Root
        nameWithType: Node.Root
        qualifiedName: BehaviorTree.Node.Root
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: P:BehaviorTree.Node.Root
  BehaviorTree.Node.State:
    name:
      CSharp:
      - id: BehaviorTree.Node.State
        name: State
        nameWithType: Node.State
        qualifiedName: BehaviorTree.Node.State
      VB:
      - id: BehaviorTree.Node.State
        name: State
        nameWithType: Node.State
        qualifiedName: BehaviorTree.Node.State
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: P:BehaviorTree.Node.State
  BehaviorTree.Node.Attach(BehaviorTree.Node):
    name:
      CSharp:
      - id: BehaviorTree.Node.Attach(BehaviorTree.Node)
        name: Attach
        nameWithType: Node.Attach
        qualifiedName: BehaviorTree.Node.Attach
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.Attach(BehaviorTree.Node)
        name: Attach
        nameWithType: Node.Attach
        qualifiedName: BehaviorTree.Node.Attach
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.Attach(BehaviorTree.Node)
  BehaviorTree.Node.GetNode``1:
    name:
      CSharp:
      - id: BehaviorTree.Node.GetNode``1
        name: GetNode<T>
        nameWithType: Node.GetNode<T>
        qualifiedName: BehaviorTree.Node.GetNode<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.GetNode``1
        name: GetNode(Of T)
        nameWithType: Node.GetNode(Of T)
        qualifiedName: BehaviorTree.Node.GetNode(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.GetNode``1
  BehaviorTree.Node.GetNodes``1:
    name:
      CSharp:
      - id: BehaviorTree.Node.GetNodes``1
        name: GetNodes<T>
        nameWithType: Node.GetNodes<T>
        qualifiedName: BehaviorTree.Node.GetNodes<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.GetNodes``1
        name: GetNodes(Of T)
        nameWithType: Node.GetNodes(Of T)
        qualifiedName: BehaviorTree.Node.GetNodes(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.GetNodes``1
  BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node):
    name:
      CSharp:
      - id: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
        name: Initialize
        nameWithType: Node.Initialize
        qualifiedName: BehaviorTree.Node.Initialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: BehaviorTree.BehaviorTreeAgent
        name: BehaviorTreeAgent
        nameWithType: BehaviorTreeAgent
        qualifiedName: BehaviorTree.BehaviorTreeAgent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
        name: Initialize
        nameWithType: Node.Initialize
        qualifiedName: BehaviorTree.Node.Initialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: BehaviorTree.BehaviorTreeAgent
        name: BehaviorTreeAgent
        nameWithType: BehaviorTreeAgent
        qualifiedName: BehaviorTree.BehaviorTreeAgent
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.Initialize(BehaviorTree.BehaviorTreeAgent,BehaviorTree.Node)
  BehaviorTree.Node.Update:
    name:
      CSharp:
      - id: BehaviorTree.Node.Update
        name: Update
        nameWithType: Node.Update
        qualifiedName: BehaviorTree.Node.Update
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.Update
        name: Update
        nameWithType: Node.Update
        qualifiedName: BehaviorTree.Node.Update
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.Update
  BehaviorTree.Node.Reset:
    name:
      CSharp:
      - id: BehaviorTree.Node.Reset
        name: Reset
        nameWithType: Node.Reset
        qualifiedName: BehaviorTree.Node.Reset
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.Reset
        name: Reset
        nameWithType: Node.Reset
        qualifiedName: BehaviorTree.Node.Reset
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.Reset
  BehaviorTree.Node.SetData(System.String,System.Object):
    name:
      CSharp:
      - id: BehaviorTree.Node.SetData(System.String,System.Object)
        name: SetData
        nameWithType: Node.SetData
        qualifiedName: BehaviorTree.Node.SetData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.SetData(System.String,System.Object)
        name: SetData
        nameWithType: Node.SetData
        qualifiedName: BehaviorTree.Node.SetData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.SetData(System.String,System.Object)
  BehaviorTree.Node.OnInitialize:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnInitialize
        name: OnInitialize
        nameWithType: Node.OnInitialize
        qualifiedName: BehaviorTree.Node.OnInitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.OnInitialize
        name: OnInitialize
        nameWithType: Node.OnInitialize
        qualifiedName: BehaviorTree.Node.OnInitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.OnInitialize
  BehaviorTree.Node.OnStart:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnStart
        name: OnStart
        nameWithType: Node.OnStart
        qualifiedName: BehaviorTree.Node.OnStart
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.OnStart
        name: OnStart
        nameWithType: Node.OnStart
        qualifiedName: BehaviorTree.Node.OnStart
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.OnStart
  BehaviorTree.Node.OnReset:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnReset
        name: OnReset
        nameWithType: Node.OnReset
        qualifiedName: BehaviorTree.Node.OnReset
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.OnReset
        name: OnReset
        nameWithType: Node.OnReset
        qualifiedName: BehaviorTree.Node.OnReset
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.OnReset
  BehaviorTree.Node.GetData(System.String):
    name:
      CSharp:
      - id: BehaviorTree.Node.GetData(System.String)
        name: GetData
        nameWithType: Node.GetData
        qualifiedName: BehaviorTree.Node.GetData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.GetData(System.String)
        name: GetData
        nameWithType: Node.GetData
        qualifiedName: BehaviorTree.Node.GetData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.GetData(System.String)
  BehaviorTree.Node.GetData``1(System.String):
    name:
      CSharp:
      - id: BehaviorTree.Node.GetData``1(System.String)
        name: GetData<T>
        nameWithType: Node.GetData<T>
        qualifiedName: BehaviorTree.Node.GetData<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.GetData``1(System.String)
        name: GetData(Of T)
        nameWithType: Node.GetData(Of T)
        qualifiedName: BehaviorTree.Node.GetData(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.GetData``1(System.String)
  BehaviorTree.Node.RemoveData(System.String):
    name:
      CSharp:
      - id: BehaviorTree.Node.RemoveData(System.String)
        name: RemoveData
        nameWithType: Node.RemoveData
        qualifiedName: BehaviorTree.Node.RemoveData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.RemoveData(System.String)
        name: RemoveData
        nameWithType: Node.RemoveData
        qualifiedName: BehaviorTree.Node.RemoveData
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.RemoveData(System.String)
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  BehaviorTree.NodeState:
    name:
      CSharp:
      - id: BehaviorTree.NodeState
        name: NodeState
        nameWithType: NodeState
        qualifiedName: BehaviorTree.NodeState
      VB:
      - id: BehaviorTree.NodeState
        name: NodeState
        nameWithType: NodeState
        qualifiedName: BehaviorTree.NodeState
    isDefinition: true
    parent: BehaviorTree
    commentId: T:BehaviorTree.NodeState
  BehaviorTree.Node.OnUpdate:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnUpdate
        name: OnUpdate
        nameWithType: Node.OnUpdate
        qualifiedName: BehaviorTree.Node.OnUpdate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: BehaviorTree.Node.OnUpdate
        name: OnUpdate
        nameWithType: Node.OnUpdate
        qualifiedName: BehaviorTree.Node.OnUpdate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: BehaviorTree.Node
    commentId: M:BehaviorTree.Node.OnUpdate
  BehaviorTree.Inverter.OnUpdate*:
    name:
      CSharp:
      - id: BehaviorTree.Inverter.OnUpdate*
        name: OnUpdate
        nameWithType: Inverter.OnUpdate
        qualifiedName: BehaviorTree.Inverter.OnUpdate
      VB:
      - id: BehaviorTree.Inverter.OnUpdate*
        name: OnUpdate
        nameWithType: Inverter.OnUpdate
        qualifiedName: BehaviorTree.Inverter.OnUpdate
    isDefinition: true
    commentId: Overload:BehaviorTree.Inverter.OnUpdate
  BehaviorTree.Inverter:
    name:
      CSharp:
      - id: BehaviorTree.Inverter
        name: Inverter
        nameWithType: Inverter
        qualifiedName: BehaviorTree.Inverter
      VB:
      - id: BehaviorTree.Inverter
        name: Inverter
        nameWithType: Inverter
        qualifiedName: BehaviorTree.Inverter
    isDefinition: true
    commentId: T:BehaviorTree.Inverter
  NodeReflection:
    name:
      CSharp:
      - name: NodeReflection
        nameWithType: NodeReflection
        qualifiedName: NodeReflection
      VB:
      - name: NodeReflection
        nameWithType: NodeReflection
        qualifiedName: NodeReflection
    isDefinition: true
    commentId: N:NodeReflection
  NodeReflection.VisualNodeAttribute:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute
      VB:
      - id: NodeReflection.VisualNodeAttribute
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute
    isDefinition: true
    parent: NodeReflection
    commentId: T:NodeReflection.VisualNodeAttribute
  NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String):
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute.VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute.VisualNodeAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute.VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute.VisualNodeAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodeReflection.VisualNodeAttribute
    commentId: M:NodeReflection.VisualNodeAttribute.#ctor(System.String,System.String,System.Boolean,System.String)
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  BehaviorTree.Node.Agent*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Agent*
        name: Agent
        nameWithType: Node.Agent
        qualifiedName: BehaviorTree.Node.Agent
      VB:
      - id: BehaviorTree.Node.Agent*
        name: Agent
        nameWithType: Node.Agent
        qualifiedName: BehaviorTree.Node.Agent
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Agent
  List`1:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:List`1'
  List{BehaviorTree.Node}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: BehaviorTree.Node
        name: Node
        nameWithType: Node
        qualifiedName: BehaviorTree.Node
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{BehaviorTree.Node}'
  BehaviorTree.Node.Children*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Children*
        name: Children
        nameWithType: Node.Children
        qualifiedName: BehaviorTree.Node.Children
      VB:
      - id: BehaviorTree.Node.Children*
        name: Children
        nameWithType: Node.Children
        qualifiedName: BehaviorTree.Node.Children
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Children
  BehaviorTree.Node.Parent*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Parent*
        name: Parent
        nameWithType: Node.Parent
        qualifiedName: BehaviorTree.Node.Parent
      VB:
      - id: BehaviorTree.Node.Parent*
        name: Parent
        nameWithType: Node.Parent
        qualifiedName: BehaviorTree.Node.Parent
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Parent
  BehaviorTree.Node.Root*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Root*
        name: Root
        nameWithType: Node.Root
        qualifiedName: BehaviorTree.Node.Root
      VB:
      - id: BehaviorTree.Node.Root*
        name: Root
        nameWithType: Node.Root
        qualifiedName: BehaviorTree.Node.Root
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Root
  BehaviorTree.Node.State*:
    name:
      CSharp:
      - id: BehaviorTree.Node.State*
        name: State
        nameWithType: Node.State
        qualifiedName: BehaviorTree.Node.State
      VB:
      - id: BehaviorTree.Node.State*
        name: State
        nameWithType: Node.State
        qualifiedName: BehaviorTree.Node.State
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.State
  BehaviorTree.Node.Attach*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Attach*
        name: Attach
        nameWithType: Node.Attach
        qualifiedName: BehaviorTree.Node.Attach
      VB:
      - id: BehaviorTree.Node.Attach*
        name: Attach
        nameWithType: Node.Attach
        qualifiedName: BehaviorTree.Node.Attach
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Attach
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  BehaviorTree.Node.GetNode*:
    name:
      CSharp:
      - id: BehaviorTree.Node.GetNode*
        name: GetNode
        nameWithType: Node.GetNode
        qualifiedName: BehaviorTree.Node.GetNode
      VB:
      - id: BehaviorTree.Node.GetNode*
        name: GetNode
        nameWithType: Node.GetNode
        qualifiedName: BehaviorTree.Node.GetNode
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.GetNode
  IEnumerable`1:
    name:
      CSharp:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  IEnumerable{{T}}:
    name:
      CSharp:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IEnumerable`1
    commentId: '!:IEnumerable{``0}'
  BehaviorTree.Node.GetNodes*:
    name:
      CSharp:
      - id: BehaviorTree.Node.GetNodes*
        name: GetNodes
        nameWithType: Node.GetNodes
        qualifiedName: BehaviorTree.Node.GetNodes
      VB:
      - id: BehaviorTree.Node.GetNodes*
        name: GetNodes
        nameWithType: Node.GetNodes
        qualifiedName: BehaviorTree.Node.GetNodes
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.GetNodes
  BehaviorTree.Node.Initialize*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Initialize*
        name: Initialize
        nameWithType: Node.Initialize
        qualifiedName: BehaviorTree.Node.Initialize
      VB:
      - id: BehaviorTree.Node.Initialize*
        name: Initialize
        nameWithType: Node.Initialize
        qualifiedName: BehaviorTree.Node.Initialize
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Initialize
  BehaviorTree.Node.Update*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Update*
        name: Update
        nameWithType: Node.Update
        qualifiedName: BehaviorTree.Node.Update
      VB:
      - id: BehaviorTree.Node.Update*
        name: Update
        nameWithType: Node.Update
        qualifiedName: BehaviorTree.Node.Update
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Update
  BehaviorTree.Node.Reset*:
    name:
      CSharp:
      - id: BehaviorTree.Node.Reset*
        name: Reset
        nameWithType: Node.Reset
        qualifiedName: BehaviorTree.Node.Reset
      VB:
      - id: BehaviorTree.Node.Reset*
        name: Reset
        nameWithType: Node.Reset
        qualifiedName: BehaviorTree.Node.Reset
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.Reset
  BehaviorTree.Node.SetData*:
    name:
      CSharp:
      - id: BehaviorTree.Node.SetData*
        name: SetData
        nameWithType: Node.SetData
        qualifiedName: BehaviorTree.Node.SetData
      VB:
      - id: BehaviorTree.Node.SetData*
        name: SetData
        nameWithType: Node.SetData
        qualifiedName: BehaviorTree.Node.SetData
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.SetData
  BehaviorTree.Node.OnInitialize*:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnInitialize*
        name: OnInitialize
        nameWithType: Node.OnInitialize
        qualifiedName: BehaviorTree.Node.OnInitialize
      VB:
      - id: BehaviorTree.Node.OnInitialize*
        name: OnInitialize
        nameWithType: Node.OnInitialize
        qualifiedName: BehaviorTree.Node.OnInitialize
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.OnInitialize
  BehaviorTree.Node.OnStart*:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnStart*
        name: OnStart
        nameWithType: Node.OnStart
        qualifiedName: BehaviorTree.Node.OnStart
      VB:
      - id: BehaviorTree.Node.OnStart*
        name: OnStart
        nameWithType: Node.OnStart
        qualifiedName: BehaviorTree.Node.OnStart
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.OnStart
  BehaviorTree.Node.OnUpdate*:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnUpdate*
        name: OnUpdate
        nameWithType: Node.OnUpdate
        qualifiedName: BehaviorTree.Node.OnUpdate
      VB:
      - id: BehaviorTree.Node.OnUpdate*
        name: OnUpdate
        nameWithType: Node.OnUpdate
        qualifiedName: BehaviorTree.Node.OnUpdate
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.OnUpdate
  BehaviorTree.Node.OnReset*:
    name:
      CSharp:
      - id: BehaviorTree.Node.OnReset*
        name: OnReset
        nameWithType: Node.OnReset
        qualifiedName: BehaviorTree.Node.OnReset
      VB:
      - id: BehaviorTree.Node.OnReset*
        name: OnReset
        nameWithType: Node.OnReset
        qualifiedName: BehaviorTree.Node.OnReset
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.OnReset
  BehaviorTree.Node.GetData*:
    name:
      CSharp:
      - id: BehaviorTree.Node.GetData*
        name: GetData
        nameWithType: Node.GetData
        qualifiedName: BehaviorTree.Node.GetData
      VB:
      - id: BehaviorTree.Node.GetData*
        name: GetData
        nameWithType: Node.GetData
        qualifiedName: BehaviorTree.Node.GetData
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.GetData
  BehaviorTree.Node.RemoveData*:
    name:
      CSharp:
      - id: BehaviorTree.Node.RemoveData*
        name: RemoveData
        nameWithType: Node.RemoveData
        qualifiedName: BehaviorTree.Node.RemoveData
      VB:
      - id: BehaviorTree.Node.RemoveData*
        name: RemoveData
        nameWithType: Node.RemoveData
        qualifiedName: BehaviorTree.Node.RemoveData
    isDefinition: true
    commentId: Overload:BehaviorTree.Node.RemoveData
  BehaviorTree.RepeatMode:
    name:
      CSharp:
      - id: BehaviorTree.RepeatMode
        name: RepeatMode
        nameWithType: RepeatMode
        qualifiedName: BehaviorTree.RepeatMode
      VB:
      - id: BehaviorTree.RepeatMode
        name: RepeatMode
        nameWithType: RepeatMode
        qualifiedName: BehaviorTree.RepeatMode
    isDefinition: true
    parent: BehaviorTree
    commentId: T:BehaviorTree.RepeatMode
  BehaviorTree.Repeater.RepeatMode*:
    name:
      CSharp:
      - id: BehaviorTree.Repeater.RepeatMode*
        name: RepeatMode
        nameWithType: Repeater.RepeatMode
        qualifiedName: BehaviorTree.Repeater.RepeatMode
      VB:
      - id: BehaviorTree.Repeater.RepeatMode*
        name: RepeatMode
        nameWithType: Repeater.RepeatMode
        qualifiedName: BehaviorTree.Repeater.RepeatMode
    isDefinition: true
    commentId: Overload:BehaviorTree.Repeater.RepeatMode
  NodeReflection.ExposedInVisualEditorAttribute:
    name:
      CSharp:
      - id: NodeReflection.ExposedInVisualEditorAttribute
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute
      VB:
      - id: NodeReflection.ExposedInVisualEditorAttribute
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute
    isDefinition: true
    parent: NodeReflection
    commentId: T:NodeReflection.ExposedInVisualEditorAttribute
  NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object):
    name:
      CSharp:
      - id: NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodeReflection.ExposedInVisualEditorAttribute
    commentId: M:NodeReflection.ExposedInVisualEditorAttribute.#ctor(System.String,System.Object)
  System.InvalidOperationException:
    commentId: T:System.InvalidOperationException
  BehaviorTree.Repeater.OnUpdate*:
    name:
      CSharp:
      - id: BehaviorTree.Repeater.OnUpdate*
        name: OnUpdate
        nameWithType: Repeater.OnUpdate
        qualifiedName: BehaviorTree.Repeater.OnUpdate
      VB:
      - id: BehaviorTree.Repeater.OnUpdate*
        name: OnUpdate
        nameWithType: Repeater.OnUpdate
        qualifiedName: BehaviorTree.Repeater.OnUpdate
    isDefinition: true
    commentId: Overload:BehaviorTree.Repeater.OnUpdate
  BehaviorTree.Repeater:
    name:
      CSharp:
      - id: BehaviorTree.Repeater
        name: Repeater
        nameWithType: Repeater
        qualifiedName: BehaviorTree.Repeater
      VB:
      - id: BehaviorTree.Repeater
        name: Repeater
        nameWithType: Repeater
        qualifiedName: BehaviorTree.Repeater
    isDefinition: true
    commentId: T:BehaviorTree.Repeater
  BehaviorTree.Selector.OnUpdate*:
    name:
      CSharp:
      - id: BehaviorTree.Selector.OnUpdate*
        name: OnUpdate
        nameWithType: Selector.OnUpdate
        qualifiedName: BehaviorTree.Selector.OnUpdate
      VB:
      - id: BehaviorTree.Selector.OnUpdate*
        name: OnUpdate
        nameWithType: Selector.OnUpdate
        qualifiedName: BehaviorTree.Selector.OnUpdate
    isDefinition: true
    commentId: Overload:BehaviorTree.Selector.OnUpdate
  BehaviorTree.Selector:
    name:
      CSharp:
      - id: BehaviorTree.Selector
        name: Selector
        nameWithType: Selector
        qualifiedName: BehaviorTree.Selector
      VB:
      - id: BehaviorTree.Selector
        name: Selector
        nameWithType: Selector
        qualifiedName: BehaviorTree.Selector
    isDefinition: true
    commentId: T:BehaviorTree.Selector
  BehaviorTree.Sequence.OnUpdate*:
    name:
      CSharp:
      - id: BehaviorTree.Sequence.OnUpdate*
        name: OnUpdate
        nameWithType: Sequence.OnUpdate
        qualifiedName: BehaviorTree.Sequence.OnUpdate
      VB:
      - id: BehaviorTree.Sequence.OnUpdate*
        name: OnUpdate
        nameWithType: Sequence.OnUpdate
        qualifiedName: BehaviorTree.Sequence.OnUpdate
    isDefinition: true
    commentId: Overload:BehaviorTree.Sequence.OnUpdate
  BehaviorTree.Sequence:
    name:
      CSharp:
      - id: BehaviorTree.Sequence
        name: Sequence
        nameWithType: Sequence
        qualifiedName: BehaviorTree.Sequence
      VB:
      - id: BehaviorTree.Sequence
        name: Sequence
        nameWithType: Sequence
        qualifiedName: BehaviorTree.Sequence
    isDefinition: true
    commentId: T:BehaviorTree.Sequence
  Dictionary`2:
    name:
      CSharp:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  Dictionary{System.String,NodeMetadata}:
    name:
      CSharp:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: NodeMetadata
        name: NodeMetadata
        nameWithType: NodeMetadata
        qualifiedName: NodeMetadata
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: NodeMetadata
        name: NodeMetadata
        nameWithType: NodeMetadata
        qualifiedName: NodeMetadata
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Dictionary`2
    commentId: '!:Dictionary{System.String,NodeMetadata}'
  NodeReflection.Engine.Metadata*:
    name:
      CSharp:
      - id: NodeReflection.Engine.Metadata*
        name: Metadata
        nameWithType: Engine.Metadata
        qualifiedName: NodeReflection.Engine.Metadata
      VB:
      - id: NodeReflection.Engine.Metadata*
        name: Metadata
        nameWithType: Engine.Metadata
        qualifiedName: NodeReflection.Engine.Metadata
    isDefinition: true
    commentId: Overload:NodeReflection.Engine.Metadata
  Node:
    name:
      CSharp:
      - id: Node
        name: Node
        nameWithType: Node
        qualifiedName: Node
        isExternal: true
      VB:
      - id: Node
        name: Node
        nameWithType: Node
        qualifiedName: Node
        isExternal: true
    isDefinition: true
    commentId: '!:Node'
  BehaviorTreeObject:
    name:
      CSharp:
      - id: BehaviorTreeObject
        name: BehaviorTreeObject
        nameWithType: BehaviorTreeObject
        qualifiedName: BehaviorTreeObject
        isExternal: true
      VB:
      - id: BehaviorTreeObject
        name: BehaviorTreeObject
        nameWithType: BehaviorTreeObject
        qualifiedName: BehaviorTreeObject
        isExternal: true
    isDefinition: true
    commentId: '!:BehaviorTreeObject'
  NodeReflection.Engine.GenerateTree*:
    name:
      CSharp:
      - id: NodeReflection.Engine.GenerateTree*
        name: GenerateTree
        nameWithType: Engine.GenerateTree
        qualifiedName: NodeReflection.Engine.GenerateTree
      VB:
      - id: NodeReflection.Engine.GenerateTree*
        name: GenerateTree
        nameWithType: Engine.GenerateTree
        qualifiedName: NodeReflection.Engine.GenerateTree
    isDefinition: true
    commentId: Overload:NodeReflection.Engine.GenerateTree
  Dictionary{System.String,System.Boolean}:
    name:
      CSharp:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Dictionary`2
    commentId: '!:Dictionary{System.String,System.Boolean}'
  NodeReflection.Engine.GetPropertiesBool*:
    name:
      CSharp:
      - id: NodeReflection.Engine.GetPropertiesBool*
        name: GetPropertiesBool
        nameWithType: Engine.GetPropertiesBool
        qualifiedName: NodeReflection.Engine.GetPropertiesBool
      VB:
      - id: NodeReflection.Engine.GetPropertiesBool*
        name: GetPropertiesBool
        nameWithType: Engine.GetPropertiesBool
        qualifiedName: NodeReflection.Engine.GetPropertiesBool
    isDefinition: true
    commentId: Overload:NodeReflection.Engine.GetPropertiesBool
  Dictionary{System.String,System.Single}:
    name:
      CSharp:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Dictionary`2
    commentId: '!:Dictionary{System.String,System.Single}'
  NodeReflection.Engine.GetPropertiesFloat*:
    name:
      CSharp:
      - id: NodeReflection.Engine.GetPropertiesFloat*
        name: GetPropertiesFloat
        nameWithType: Engine.GetPropertiesFloat
        qualifiedName: NodeReflection.Engine.GetPropertiesFloat
      VB:
      - id: NodeReflection.Engine.GetPropertiesFloat*
        name: GetPropertiesFloat
        nameWithType: Engine.GetPropertiesFloat
        qualifiedName: NodeReflection.Engine.GetPropertiesFloat
    isDefinition: true
    commentId: Overload:NodeReflection.Engine.GetPropertiesFloat
  Dictionary{System.String,System.Int32}:
    name:
      CSharp:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Dictionary`2
    commentId: '!:Dictionary{System.String,System.Int32}'
  NodeReflection.Engine.GetPropertiesInt*:
    name:
      CSharp:
      - id: NodeReflection.Engine.GetPropertiesInt*
        name: GetPropertiesInt
        nameWithType: Engine.GetPropertiesInt
        qualifiedName: NodeReflection.Engine.GetPropertiesInt
      VB:
      - id: NodeReflection.Engine.GetPropertiesInt*
        name: GetPropertiesInt
        nameWithType: Engine.GetPropertiesInt
        qualifiedName: NodeReflection.Engine.GetPropertiesInt
    isDefinition: true
    commentId: Overload:NodeReflection.Engine.GetPropertiesInt
  Dictionary{System.String,System.String}:
    name:
      CSharp:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Dictionary`2
    commentId: '!:Dictionary{System.String,System.String}'
  NodeReflection.Engine.GetPropertiesString*:
    name:
      CSharp:
      - id: NodeReflection.Engine.GetPropertiesString*
        name: GetPropertiesString
        nameWithType: Engine.GetPropertiesString
        qualifiedName: NodeReflection.Engine.GetPropertiesString
      VB:
      - id: NodeReflection.Engine.GetPropertiesString*
        name: GetPropertiesString
        nameWithType: Engine.GetPropertiesString
        qualifiedName: NodeReflection.Engine.GetPropertiesString
    isDefinition: true
    commentId: Overload:NodeReflection.Engine.GetPropertiesString
  NodeReflection.Engine.Update*:
    name:
      CSharp:
      - id: NodeReflection.Engine.Update*
        name: Update
        nameWithType: Engine.Update
        qualifiedName: NodeReflection.Engine.Update
      VB:
      - id: NodeReflection.Engine.Update*
        name: Update
        nameWithType: Engine.Update
        qualifiedName: NodeReflection.Engine.Update
    isDefinition: true
    commentId: Overload:NodeReflection.Engine.Update
  NodeReflection.Engine:
    name:
      CSharp:
      - id: NodeReflection.Engine
        name: Engine
        nameWithType: Engine
        qualifiedName: NodeReflection.Engine
      VB:
      - id: NodeReflection.Engine
        name: Engine
        nameWithType: Engine
        qualifiedName: NodeReflection.Engine
    isDefinition: true
    commentId: T:NodeReflection.Engine
  System.Attribute:
    name:
      CSharp:
      - id: System.Attribute
        name: Attribute
        nameWithType: Attribute
        qualifiedName: System.Attribute
        isExternal: true
      VB:
      - id: System.Attribute
        name: Attribute
        nameWithType: Attribute
        qualifiedName: System.Attribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Attribute
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.Module):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.Equals(System.Object):
    name:
      CSharp:
      - id: System.Attribute.Equals(System.Object)
        name: Equals
        nameWithType: Attribute.Equals
        qualifiedName: System.Attribute.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.Equals(System.Object)
        name: Equals
        nameWithType: Attribute.Equals
        qualifiedName: System.Attribute.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.Equals(System.Object)
  System.Attribute.GetHashCode:
    name:
      CSharp:
      - id: System.Attribute.GetHashCode
        name: GetHashCode
        nameWithType: Attribute.GetHashCode
        qualifiedName: System.Attribute.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetHashCode
        name: GetHashCode
        nameWithType: Attribute.GetHashCode
        qualifiedName: System.Attribute.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetHashCode
  System.Attribute.Match(System.Object):
    name:
      CSharp:
      - id: System.Attribute.Match(System.Object)
        name: Match
        nameWithType: Attribute.Match
        qualifiedName: System.Attribute.Match
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.Match(System.Object)
        name: Match
        nameWithType: Attribute.Match
        qualifiedName: System.Attribute.Match
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.Match(System.Object)
  System.Attribute.IsDefaultAttribute:
    name:
      CSharp:
      - id: System.Attribute.IsDefaultAttribute
        name: IsDefaultAttribute
        nameWithType: Attribute.IsDefaultAttribute
        qualifiedName: System.Attribute.IsDefaultAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefaultAttribute
        name: IsDefaultAttribute
        nameWithType: Attribute.IsDefaultAttribute
        qualifiedName: System.Attribute.IsDefaultAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefaultAttribute
  System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@):
    name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
        name: _Attribute.GetTypeInfoCount
        nameWithType: Attribute._Attribute.GetTypeInfoCount
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
        name: System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
  System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr):
    name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
        name: _Attribute.GetTypeInfo
        nameWithType: Attribute._Attribute.GetTypeInfo
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
        name: System.Runtime.InteropServices._Attribute.GetTypeInfo
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  ? System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  : name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
        name: _Attribute.GetIDsOfNames
        nameWithType: Attribute._Attribute.GetIDsOfNames
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
        name: System.Runtime.InteropServices._Attribute.GetIDsOfNames
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  ? System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  : name:
      CSharp:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
        name: _Attribute.Invoke
        nameWithType: Attribute._Attribute.Invoke
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.Invoke
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
        name: System.Runtime.InteropServices._Attribute.Invoke
        nameWithType: Attribute.System.Runtime.InteropServices._Attribute.Invoke
        qualifiedName: System.Attribute.System.Runtime.InteropServices._Attribute.Invoke
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IntPtr
        name: IntPtr
        nameWithType: IntPtr
        qualifiedName: System.IntPtr
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  System.Attribute.TypeId:
    name:
      CSharp:
      - id: System.Attribute.TypeId
        name: TypeId
        nameWithType: Attribute.TypeId
        qualifiedName: System.Attribute.TypeId
        isExternal: true
      VB:
      - id: System.Attribute.TypeId
        name: TypeId
        nameWithType: Attribute.TypeId
        qualifiedName: System.Attribute.TypeId
        isExternal: true
    isDefinition: true
    parent: System.Attribute
    commentId: P:System.Attribute.TypeId
  System.Runtime.InteropServices:
    name:
      CSharp:
      - name: System.Runtime.InteropServices
        nameWithType: System.Runtime.InteropServices
        qualifiedName: System.Runtime.InteropServices
        isExternal: true
      VB:
      - name: System.Runtime.InteropServices
        nameWithType: System.Runtime.InteropServices
        qualifiedName: System.Runtime.InteropServices
    isDefinition: true
    commentId: N:System.Runtime.InteropServices
  System.Runtime.InteropServices._Attribute:
    name:
      CSharp:
      - id: System.Runtime.InteropServices._Attribute
        name: _Attribute
        nameWithType: _Attribute
        qualifiedName: System.Runtime.InteropServices._Attribute
        isExternal: true
      VB:
      - id: System.Runtime.InteropServices._Attribute
        name: _Attribute
        nameWithType: _Attribute
        qualifiedName: System.Runtime.InteropServices._Attribute
        isExternal: true
    isDefinition: true
    parent: System.Runtime.InteropServices
    commentId: T:System.Runtime.InteropServices._Attribute
  NodeReflection.ExposedInVisualEditorAttribute.DefaultValue*:
    name:
      CSharp:
      - id: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue*
        name: DefaultValue
        nameWithType: ExposedInVisualEditorAttribute.DefaultValue
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
      VB:
      - id: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue*
        name: DefaultValue
        nameWithType: ExposedInVisualEditorAttribute.DefaultValue
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
    isDefinition: true
    commentId: Overload:NodeReflection.ExposedInVisualEditorAttribute.DefaultValue
  NodeReflection.ExposedInVisualEditorAttribute.Name*:
    name:
      CSharp:
      - id: NodeReflection.ExposedInVisualEditorAttribute.Name*
        name: Name
        nameWithType: ExposedInVisualEditorAttribute.Name
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.Name
      VB:
      - id: NodeReflection.ExposedInVisualEditorAttribute.Name*
        name: Name
        nameWithType: ExposedInVisualEditorAttribute.Name
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.Name
    isDefinition: true
    commentId: Overload:NodeReflection.ExposedInVisualEditorAttribute.Name
  NodeReflection.ExposedInVisualEditorAttribute.#ctor*:
    name:
      CSharp:
      - id: NodeReflection.ExposedInVisualEditorAttribute.#ctor*
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
      VB:
      - id: NodeReflection.ExposedInVisualEditorAttribute.#ctor*
        name: ExposedInVisualEditorAttribute
        nameWithType: ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
        qualifiedName: NodeReflection.ExposedInVisualEditorAttribute.ExposedInVisualEditorAttribute
    isDefinition: true
    commentId: Overload:NodeReflection.ExposedInVisualEditorAttribute.#ctor
  System.AttributeUsageAttribute:
    name:
      CSharp:
      - id: System.AttributeUsageAttribute
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute
        isExternal: true
      VB:
      - id: System.AttributeUsageAttribute
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.AttributeUsageAttribute
  System.AttributeUsageAttribute.#ctor(System.AttributeTargets):
    name:
      CSharp:
      - id: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute.AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute.AttributeUsageAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute.AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute.AttributeUsageAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.AttributeUsageAttribute
    commentId: M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
  System.AttributeTargets:
    name:
      CSharp:
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      VB:
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.AttributeTargets
  NodeReflection.VisualNodeAttribute.Description*:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.Description*
        name: Description
        nameWithType: VisualNodeAttribute.Description
        qualifiedName: NodeReflection.VisualNodeAttribute.Description
      VB:
      - id: NodeReflection.VisualNodeAttribute.Description*
        name: Description
        nameWithType: VisualNodeAttribute.Description
        qualifiedName: NodeReflection.VisualNodeAttribute.Description
    isDefinition: true
    commentId: Overload:NodeReflection.VisualNodeAttribute.Description
  NodeReflection.VisualNodeAttribute.DisplayAsBlock*:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.DisplayAsBlock*
        name: DisplayAsBlock
        nameWithType: VisualNodeAttribute.DisplayAsBlock
        qualifiedName: NodeReflection.VisualNodeAttribute.DisplayAsBlock
      VB:
      - id: NodeReflection.VisualNodeAttribute.DisplayAsBlock*
        name: DisplayAsBlock
        nameWithType: VisualNodeAttribute.DisplayAsBlock
        qualifiedName: NodeReflection.VisualNodeAttribute.DisplayAsBlock
    isDefinition: true
    commentId: Overload:NodeReflection.VisualNodeAttribute.DisplayAsBlock
  NodeReflection.VisualNodeAttribute.Name*:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.Name*
        name: Name
        nameWithType: VisualNodeAttribute.Name
        qualifiedName: NodeReflection.VisualNodeAttribute.Name
      VB:
      - id: NodeReflection.VisualNodeAttribute.Name*
        name: Name
        nameWithType: VisualNodeAttribute.Name
        qualifiedName: NodeReflection.VisualNodeAttribute.Name
    isDefinition: true
    commentId: Overload:NodeReflection.VisualNodeAttribute.Name
  NodeReflection.VisualNodeAttribute.Path*:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.Path*
        name: Path
        nameWithType: VisualNodeAttribute.Path
        qualifiedName: NodeReflection.VisualNodeAttribute.Path
      VB:
      - id: NodeReflection.VisualNodeAttribute.Path*
        name: Path
        nameWithType: VisualNodeAttribute.Path
        qualifiedName: NodeReflection.VisualNodeAttribute.Path
    isDefinition: true
    commentId: Overload:NodeReflection.VisualNodeAttribute.Path
  NodeReflection.VisualNodeAttribute.#ctor*:
    name:
      CSharp:
      - id: NodeReflection.VisualNodeAttribute.#ctor*
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute.VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute.VisualNodeAttribute
      VB:
      - id: NodeReflection.VisualNodeAttribute.#ctor*
        name: VisualNodeAttribute
        nameWithType: VisualNodeAttribute.VisualNodeAttribute
        qualifiedName: NodeReflection.VisualNodeAttribute.VisualNodeAttribute
    isDefinition: true
    commentId: Overload:NodeReflection.VisualNodeAttribute.#ctor
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  NodeReflection.Data.NodeMetadata.Description*:
    name:
      CSharp:
      - id: NodeReflection.Data.NodeMetadata.Description*
        name: Description
        nameWithType: NodeMetadata.Description
        qualifiedName: NodeReflection.Data.NodeMetadata.Description
      VB:
      - id: NodeReflection.Data.NodeMetadata.Description*
        name: Description
        nameWithType: NodeMetadata.Description
        qualifiedName: NodeReflection.Data.NodeMetadata.Description
    isDefinition: true
    commentId: Overload:NodeReflection.Data.NodeMetadata.Description
  NodeReflection.Data.NodeMetadata.DisplayAsBlock*:
    name:
      CSharp:
      - id: NodeReflection.Data.NodeMetadata.DisplayAsBlock*
        name: DisplayAsBlock
        nameWithType: NodeMetadata.DisplayAsBlock
        qualifiedName: NodeReflection.Data.NodeMetadata.DisplayAsBlock
      VB:
      - id: NodeReflection.Data.NodeMetadata.DisplayAsBlock*
        name: DisplayAsBlock
        nameWithType: NodeMetadata.DisplayAsBlock
        qualifiedName: NodeReflection.Data.NodeMetadata.DisplayAsBlock
    isDefinition: true
    commentId: Overload:NodeReflection.Data.NodeMetadata.DisplayAsBlock
  NodeReflection.Data.NodeMetadata.InternalName*:
    name:
      CSharp:
      - id: NodeReflection.Data.NodeMetadata.InternalName*
        name: InternalName
        nameWithType: NodeMetadata.InternalName
        qualifiedName: NodeReflection.Data.NodeMetadata.InternalName
      VB:
      - id: NodeReflection.Data.NodeMetadata.InternalName*
        name: InternalName
        nameWithType: NodeMetadata.InternalName
        qualifiedName: NodeReflection.Data.NodeMetadata.InternalName
    isDefinition: true
    commentId: Overload:NodeReflection.Data.NodeMetadata.InternalName
  NodeReflection.Data.NodeMetadata.Name*:
    name:
      CSharp:
      - id: NodeReflection.Data.NodeMetadata.Name*
        name: Name
        nameWithType: NodeMetadata.Name
        qualifiedName: NodeReflection.Data.NodeMetadata.Name
      VB:
      - id: NodeReflection.Data.NodeMetadata.Name*
        name: Name
        nameWithType: NodeMetadata.Name
        qualifiedName: NodeReflection.Data.NodeMetadata.Name
    isDefinition: true
    commentId: Overload:NodeReflection.Data.NodeMetadata.Name
  Dictionary{System.String,System.Object}:
    name:
      CSharp:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Dictionary`2
    commentId: '!:Dictionary{System.String,System.Object}'
  NodeReflection.Data.NodeMetadata.NameToDefaultValue*:
    name:
      CSharp:
      - id: NodeReflection.Data.NodeMetadata.NameToDefaultValue*
        name: NameToDefaultValue
        nameWithType: NodeMetadata.NameToDefaultValue
        qualifiedName: NodeReflection.Data.NodeMetadata.NameToDefaultValue
      VB:
      - id: NodeReflection.Data.NodeMetadata.NameToDefaultValue*
        name: NameToDefaultValue
        nameWithType: NodeMetadata.NameToDefaultValue
        qualifiedName: NodeReflection.Data.NodeMetadata.NameToDefaultValue
    isDefinition: true
    commentId: Overload:NodeReflection.Data.NodeMetadata.NameToDefaultValue
  Dictionary{System.String,ExposedPropertyTypeEnum}:
    name:
      CSharp:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: ExposedPropertyTypeEnum
        name: ExposedPropertyTypeEnum
        nameWithType: ExposedPropertyTypeEnum
        qualifiedName: ExposedPropertyTypeEnum
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: ExposedPropertyTypeEnum
        name: ExposedPropertyTypeEnum
        nameWithType: ExposedPropertyTypeEnum
        qualifiedName: ExposedPropertyTypeEnum
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Dictionary`2
    commentId: '!:Dictionary{System.String,ExposedPropertyTypeEnum}'
  NodeReflection.Data.NodeMetadata.NameToType*:
    name:
      CSharp:
      - id: NodeReflection.Data.NodeMetadata.NameToType*
        name: NameToType
        nameWithType: NodeMetadata.NameToType
        qualifiedName: NodeReflection.Data.NodeMetadata.NameToType
      VB:
      - id: NodeReflection.Data.NodeMetadata.NameToType*
        name: NameToType
        nameWithType: NodeMetadata.NameToType
        qualifiedName: NodeReflection.Data.NodeMetadata.NameToType
    isDefinition: true
    commentId: Overload:NodeReflection.Data.NodeMetadata.NameToType
  System.Type:
    name:
      CSharp:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      VB:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Type
  NodeReflection.Data.NodeMetadata.NodeType*:
    name:
      CSharp:
      - id: NodeReflection.Data.NodeMetadata.NodeType*
        name: NodeType
        nameWithType: NodeMetadata.NodeType
        qualifiedName: NodeReflection.Data.NodeMetadata.NodeType
      VB:
      - id: NodeReflection.Data.NodeMetadata.NodeType*
        name: NodeType
        nameWithType: NodeMetadata.NodeType
        qualifiedName: NodeReflection.Data.NodeMetadata.NodeType
    isDefinition: true
    commentId: Overload:NodeReflection.Data.NodeMetadata.NodeType
  NodeReflection.Data.NodeMetadata.Path*:
    name:
      CSharp:
      - id: NodeReflection.Data.NodeMetadata.Path*
        name: Path
        nameWithType: NodeMetadata.Path
        qualifiedName: NodeReflection.Data.NodeMetadata.Path
      VB:
      - id: NodeReflection.Data.NodeMetadata.Path*
        name: Path
        nameWithType: NodeMetadata.Path
        qualifiedName: NodeReflection.Data.NodeMetadata.Path
    isDefinition: true
    commentId: Overload:NodeReflection.Data.NodeMetadata.Path
  NodeReflection.Data.NodeMetadata.#ctor*:
    name:
      CSharp:
      - id: NodeReflection.Data.NodeMetadata.#ctor*
        name: NodeMetadata
        nameWithType: NodeMetadata.NodeMetadata
        qualifiedName: NodeReflection.Data.NodeMetadata.NodeMetadata
      VB:
      - id: NodeReflection.Data.NodeMetadata.#ctor*
        name: NodeMetadata
        nameWithType: NodeMetadata.NodeMetadata
        qualifiedName: NodeReflection.Data.NodeMetadata.NodeMetadata
    isDefinition: true
    commentId: Overload:NodeReflection.Data.NodeMetadata.#ctor
  NodeReflection.Data.NodeMetadata:
    name:
      CSharp:
      - id: NodeReflection.Data.NodeMetadata
        name: NodeMetadata
        nameWithType: NodeMetadata
        qualifiedName: NodeReflection.Data.NodeMetadata
      VB:
      - id: NodeReflection.Data.NodeMetadata
        name: NodeMetadata
        nameWithType: NodeMetadata
        qualifiedName: NodeReflection.Data.NodeMetadata
    isDefinition: true
    commentId: T:NodeReflection.Data.NodeMetadata
  NodeReflection.Data:
    name:
      CSharp:
      - name: NodeReflection.Data
        nameWithType: NodeReflection.Data
        qualifiedName: NodeReflection.Data
      VB:
      - name: NodeReflection.Data
        nameWithType: NodeReflection.Data
        qualifiedName: NodeReflection.Data
    isDefinition: true
    commentId: N:NodeReflection.Data
  NodeReflection.Enumerations:
    name:
      CSharp:
      - name: NodeReflection.Enumerations
        nameWithType: NodeReflection.Enumerations
        qualifiedName: NodeReflection.Enumerations
      VB:
      - name: NodeReflection.Enumerations
        nameWithType: NodeReflection.Enumerations
        qualifiedName: NodeReflection.Enumerations
    isDefinition: true
    commentId: N:NodeReflection.Enumerations
  NodeReflection.Enumerations.ExposedPropertyTypeEnum:
    name:
      CSharp:
      - id: NodeReflection.Enumerations.ExposedPropertyTypeEnum
        name: ExposedPropertyTypeEnum
        nameWithType: ExposedPropertyTypeEnum
        qualifiedName: NodeReflection.Enumerations.ExposedPropertyTypeEnum
      VB:
      - id: NodeReflection.Enumerations.ExposedPropertyTypeEnum
        name: ExposedPropertyTypeEnum
        nameWithType: ExposedPropertyTypeEnum
        qualifiedName: NodeReflection.Enumerations.ExposedPropertyTypeEnum
    isDefinition: true
    parent: NodeReflection.Enumerations
    commentId: T:NodeReflection.Enumerations.ExposedPropertyTypeEnum
  PropertyInfo:
    name:
      CSharp:
      - id: PropertyInfo
        name: PropertyInfo
        nameWithType: PropertyInfo
        qualifiedName: PropertyInfo
        isExternal: true
      VB:
      - id: PropertyInfo
        name: PropertyInfo
        nameWithType: PropertyInfo
        qualifiedName: PropertyInfo
        isExternal: true
    isDefinition: true
    commentId: '!:PropertyInfo'
  NodeReflection.Utils.Reflection.GetExposedAttribute*:
    name:
      CSharp:
      - id: NodeReflection.Utils.Reflection.GetExposedAttribute*
        name: GetExposedAttribute
        nameWithType: Reflection.GetExposedAttribute
        qualifiedName: NodeReflection.Utils.Reflection.GetExposedAttribute
      VB:
      - id: NodeReflection.Utils.Reflection.GetExposedAttribute*
        name: GetExposedAttribute
        nameWithType: Reflection.GetExposedAttribute
        qualifiedName: NodeReflection.Utils.Reflection.GetExposedAttribute
    isDefinition: true
    commentId: Overload:NodeReflection.Utils.Reflection.GetExposedAttribute
  IEnumerable{PropertyInfo}:
    name:
      CSharp:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: PropertyInfo
        name: PropertyInfo
        nameWithType: PropertyInfo
        qualifiedName: PropertyInfo
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: PropertyInfo
        name: PropertyInfo
        nameWithType: PropertyInfo
        qualifiedName: PropertyInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IEnumerable`1
    commentId: '!:IEnumerable{PropertyInfo}'
  NodeReflection.Utils.Reflection.GetExposedProperties*:
    name:
      CSharp:
      - id: NodeReflection.Utils.Reflection.GetExposedProperties*
        name: GetExposedProperties
        nameWithType: Reflection.GetExposedProperties
        qualifiedName: NodeReflection.Utils.Reflection.GetExposedProperties
      VB:
      - id: NodeReflection.Utils.Reflection.GetExposedProperties*
        name: GetExposedProperties
        nameWithType: Reflection.GetExposedProperties
        qualifiedName: NodeReflection.Utils.Reflection.GetExposedProperties
    isDefinition: true
    commentId: Overload:NodeReflection.Utils.Reflection.GetExposedProperties
  NodeReflection.Utils.Reflection.GetNodeAttribute*:
    name:
      CSharp:
      - id: NodeReflection.Utils.Reflection.GetNodeAttribute*
        name: GetNodeAttribute
        nameWithType: Reflection.GetNodeAttribute
        qualifiedName: NodeReflection.Utils.Reflection.GetNodeAttribute
      VB:
      - id: NodeReflection.Utils.Reflection.GetNodeAttribute*
        name: GetNodeAttribute
        nameWithType: Reflection.GetNodeAttribute
        qualifiedName: NodeReflection.Utils.Reflection.GetNodeAttribute
    isDefinition: true
    commentId: Overload:NodeReflection.Utils.Reflection.GetNodeAttribute
  IEnumerable{System.Type}:
    name:
      CSharp:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IEnumerable`1
    commentId: '!:IEnumerable{System.Type}'
  Assembly:
    name:
      CSharp:
      - id: Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: Assembly
        isExternal: true
      VB:
      - id: Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: Assembly
        isExternal: true
    isDefinition: true
  NodeReflection.Utils.Reflection.GetNodeClasses*:
    name:
      CSharp:
      - id: NodeReflection.Utils.Reflection.GetNodeClasses*
        name: GetNodeClasses
        nameWithType: Reflection.GetNodeClasses
        qualifiedName: NodeReflection.Utils.Reflection.GetNodeClasses
      VB:
      - id: NodeReflection.Utils.Reflection.GetNodeClasses*
        name: GetNodeClasses
        nameWithType: Reflection.GetNodeClasses
        qualifiedName: NodeReflection.Utils.Reflection.GetNodeClasses
    isDefinition: true
    commentId: Overload:NodeReflection.Utils.Reflection.GetNodeClasses
  NodeReflection.Utils.Reflection:
    name:
      CSharp:
      - id: NodeReflection.Utils.Reflection
        name: Reflection
        nameWithType: Reflection
        qualifiedName: NodeReflection.Utils.Reflection
      VB:
      - id: NodeReflection.Utils.Reflection
        name: Reflection
        nameWithType: Reflection
        qualifiedName: NodeReflection.Utils.Reflection
    isDefinition: true
    commentId: T:NodeReflection.Utils.Reflection
  NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects*:
    name:
      CSharp:
      - id: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects*
        name: GetNodeMetadataObjects
        nameWithType: StateGeneration.GetNodeMetadataObjects
        qualifiedName: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects
      VB:
      - id: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects*
        name: GetNodeMetadataObjects
        nameWithType: StateGeneration.GetNodeMetadataObjects
        qualifiedName: NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects
    isDefinition: true
    commentId: Overload:NodeReflection.Utils.StateGeneration.GetNodeMetadataObjects
  NodeReflection.Utils.StateGeneration:
    name:
      CSharp:
      - id: NodeReflection.Utils.StateGeneration
        name: StateGeneration
        nameWithType: StateGeneration
        qualifiedName: NodeReflection.Utils.StateGeneration
      VB:
      - id: NodeReflection.Utils.StateGeneration
        name: StateGeneration
        nameWithType: StateGeneration
        qualifiedName: NodeReflection.Utils.StateGeneration
    isDefinition: true
    commentId: T:NodeReflection.Utils.StateGeneration
  NodeReflection.Utils:
    name:
      CSharp:
      - name: NodeReflection.Utils
        nameWithType: NodeReflection.Utils
        qualifiedName: NodeReflection.Utils
      VB:
      - name: NodeReflection.Utils
        nameWithType: NodeReflection.Utils
        qualifiedName: NodeReflection.Utils
    isDefinition: true
    commentId: N:NodeReflection.Utils
